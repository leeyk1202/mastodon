#!/usr/bin/env ruby

#########################
## Scafold RSwag specs ##
#########################

# Uses RSwag's default spec generator and patches the specs with custom defaults.
#
# The controllers routes and HTTP methods are automatically recognized and a spec for
# each of them is generated.
# However, these specs do not generate a real documentation yet.
# Only the minimum of path, method, etc. are generated.
# Response schemas, parmeters and more ought to be added manually.
#
# Ideally, the spec does not only document the controllers action, but also verifies
# some of the controllers features, just like any classic request spec would.
#
# Runs for all controllers in app/controllers/api/ by default.
# Optionally specific controller files can be given as arguments.

require 'fileutils'
require 'active_support/inflector'
require 'pry'

ENV['RAILS_ENV'] ||= 'development'

FILTER_CONTROLLERS = [
  # takes endless to generate for unknown reasons
  'app/controllers/api/v1/accounts/featured_tags_controller.rb',
  'app/controllers/api/v1/custom_emojis_controller.rb',
  'app/controllers/api/v1/instances_controller.rb'
]

# path to your application root.
APP_ROOT = File.expand_path('..', __dir__)

HTTP_VERBS = %w(get post put patch delete)
INDENTS = (2..8).map { |depth| [depth, ' ' * depth ] }.to_h

def indent(string, amount = 2)
  "#{INDENTS[amount]}#{string}"
end

def operation_id(line, tags)
  test_title = line.strip.split("('").last.split("'").first.split(' ')
  operation_fullname = ActiveSupport::Inflector.classify(
    "#{tags[1..-1].join('_')}_#{test_title.join('_')}"
  )
  "operationId '#{operation_fullname.slice(0).downcase}#{operation_fullname[1..-1]}'"
end

def patch_lines(line, index, klass_name, tags)
  return "RSpec.describe #{klass_name}, type: :request do" if index <= 3 && line.start_with?('RSpec.describe')

  return line unless HTTP_VERBS.include?(line.strip.split("('").first)

  [
    line,
    indent("tags #{tags.map { |tag| "'#{tag}'" }.join(', ')}", 6),
    indent(operation_id(line, tags), 6),
    indent('rswag_auth_scope', 6),
    '',
    indent("include_context 'user token auth'", 6),
    '',
  ]
end

FileUtils.chdir APP_ROOT do
  controllers = if ARGV.size > 0
    ARGV
  else 
    Dir['app/controllers/api/*/**/*_controller.rb'] - FILTER_CONTROLLERS
  end
  controllers.each do |path|
    klass_match = File.read(path).match(/^class ([\w:]+)/)
    next unless klass_match

    klass_name = klass_match[0]&.split('class ').last
    tags = klass_name.split('Controller').first.split('::')
    controller_path = path.split('app/controllers/').last
    route_path = controller_path.split('_controller.rb').first
    spec_path = "#{APP_ROOT}/spec/requests/#{route_path}_spec.rb"
    spec_renamed_path = "#{APP_ROOT}/spec/requests/#{controller_path.gsub(/\.rb$/, '')}_spec.rb"
    spec_backup_path = spec_renamed_path.gsub(/_spec\.rb$/, '_spec_old.rb')
    puts "Spec generation for #{klass_name} in #{path}"
    puts `bundle exec rails g rspec:swagger #{klass_name}`
    next unless File.exist?(spec_path)

    spec_source = File.read(spec_path)
    File.delete(spec_path)
    lines = spec_source.split("\n").each_with_index.flat_map do |line, index|
      patch_lines(line, index, klass_name, tags)
    end

    cleaned = ''
    start_index = 0
    lines.each_with_index do |line, index|
      next if index < start_index

      next unless line.include?('after do |example|')

      indent_depth = line.size - line.strip.size
      stripped_lines = lines[start_index..(index - 1)] + [indent('rswag_add_examples!', indent_depth)]
      cleaned = [cleaned, stripped_lines].join("\n")
      start_index = lines[index..-1].find_index { |line| line.include?('end') } + index + 1
    end
    cleaned = ([cleaned] + lines[start_index..-1] + ['']).join("\n")

    File.rename(spec_renamed_path, spec_backup_path) if File.exist?(spec_renamed_path)
    spec_file = File.open(spec_renamed_path, 'w')
    spec_file.write(['# TODO: implement rswag spec from generated scafold', cleaned].join("\n"))
    spec_file.close
    puts `rubocop -A #{spec_renamed_path}`
    diff = `git diff #{spec_renamed_path}`
    if diff.blank? && File.exist?(spec_backup_path)
      File.delete(spec_renamed_path)
      File.rename(spec_backup_path, spec_renamed_path)
    end
    # binding.pry
    # [spec_renamed_path, spec_backup_path]
  end
  # puts `rubocop -A #{generated_specs.map(&:first).join(' ')}`
end
