version: '3'
volumes:
  postgres:
  redis:
  elasticsearch:
  storage:

services:
  db:
    restart: always
    image: postgres:15-alpine
    shm_size: 256mb
    networks:
      internal_network:
        aliases:
          - postgres
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'

  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      internal_network:
        aliases:
          - redis
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - redis:/data

#  es:
#    restart: always
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
#    environment:
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true"
#      - "xpack.license.self_generated.type=basic"
#      - "xpack.security.enabled=false"
#      - "xpack.watcher.enabled=false"
#      - "xpack.graph.enabled=false"
#      - "xpack.ml.enabled=false"
#      - "bootstrap.memory_lock=true"
#      - "cluster.name=es-mastodon"
#      - "discovery.type=single-node"
#      - "thread_pool.write.queue_size=1000"
#    networks:
#      internal_network:
#        aliases:
#          - elasticsearch
#    healthcheck:
#       test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
#    volumes:
#       - elasticsearch:/usr/share/elasticsearch/data
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#      nofile:
#        soft: 65536
#        hard: 65536
#    ports:
#      - '127.0.0.1:9200:9200'

  web:
    build: .
    image: tootsuite/mastodon
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    env_file: stack.env
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    networks:
      external_network:
        aliases:
          - backend
      internal_network:
        aliases:
          - puma
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    ports:
      - '127.0.0.1:3000:3000'
    depends_on:
      - db
      - redis
#      - es
    volumes:
      - storage:/mastodon/public/system

  streaming:
    build: .
    image: tootsuite/mastodon
    env_file: stack.env
    command: node ./streaming
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      external_network:
        aliases:
          - streaming
      internal_network:
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    ports:
      - '127.0.0.1:4000:4000'
    depends_on:
      - db
      - redis

  sidekiq:
    build: .
    image: tootsuite/mastodon
    env_file: stack.env
    command: bundle exec sidekiq
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - db
      - redis
    networks:
      - external_network
      - internal_network
    volumes:
      - storage:/mastodon/public/system
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]


  ## Uncomment to enable federation with tor instances along with adding the following ENV variables
  ## http_proxy=http://privoxy:8118
  ## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true
#   tor:
#     image: sirboops/tor
#     networks:
#        external_network:
#          aliases:
#            - tor
#  
#   privoxy:
#     image: sirboops/privoxy
#     volumes:
#       - ./priv-config:/opt/config
#     networks:
#       external_network:
#       internal_network:
#         aliases:
#           - privoxy

#  nginx:
#    image: nginx
#    restart: always
#    networks:
#      - external_network
#    healthcheck:
#      # Replace example.com with testing domain
#      test: ["CMD-SHELL", "curl -Isf --resolve example.com:80:127.0.0.1 http://example.com || exit 1"]
#    ports:
#      - '80:80'
#      - '443:443'
#    depends_on:
#      - web
#      - streaming
#    volumes:
#      - ./nginx:/etc/nginx/
#      - ./letsencrypt:/etc/letsencrypt

#  certbot:
#    image: certbot/certbot
#    tty: true
#    command: certonly
#    restart: on-failure
#    profiles: ["certbot"]
#    networks:
#      external_network:
#        aliases:
#          - certbot
#    ports:
#      - '127.0.0.0:5000:80'
#    depends_on:
#      - nginx
#    volumes:
#      - ./letsencrypt:/etc/letsencrypt

networks:
  external_network:
  internal_network:
    driver: overlay
    attachable: true
    internal: true
