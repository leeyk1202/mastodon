---
openapi: 3.0.3
info:
  title: API V1
  version: v1
paths: {}
security:
  - bearerAuth: []
components:
  schemas:
    Account:
      description: |
        Represents a user of Mastodon and their associated profile.
      properties:
        acct:
          description: |
            The Webfinger account URI. 
            Equal to username for local users, or username@domain for remote users.
          example: bob@example.com
          type: string
        avatar:
          description: An image icon that is shown next to statuses and in the profile.
          type: string
        avatar_static:
          description: |
            A static version of the `avatar`. 
            Equal to `avatar` if its value is a static image; different if `avatar` is an animated GIF.
          type: string
        bot: &ref_4
          description: |
            A presentational flag.  
            Indicates that the account may perform automated actions, may not be monitored, or identifies as a robot.
          type: boolean
        created_at:
          $ref: '#/components/schemas/DateTime'
        discoverable: &ref_3
          description: Whether the account has opted into discovery features such as the profile directory.
          type: boolean
        display_name: &ref_0
          description: The display name to use for the profile.
          type: string
        emojis:
          description: |
            Custom emoji entities to be used when rendering the profile. 
            If none, an empty array will be returned.
          items:
            $ref: '#/components/schemas/CustomEmoji'
          type: array
        fields:
          description: Additional metadata attached to a profile as name-value pairs.
          items:
            $ref: '#/components/schemas/AccountField'
          type: array
        followers_count:
          description: The reported followers of this profile.
          type: integer
        following_count:
          description: The reported follows of this profile.
          type: integer
        group:
          nullable: true
          type: boolean
        header:
          description: An image banner that is shown above the profile and in profile cards.
          type: string
        header_static:
          description: |
            A static version of the `header`. 
            Equal to `header` if its value is a static image; different if `header` is an animated GIF.
          type: string
        id:
          $ref: '#/components/schemas/StringId'
        last_status_at:
          description: When the most recent status was posted.
          example: '2022-11-13'
          format: date
          nullable: true
          type: string
        locked: &ref_2
          description: Whether the account manually approves follow requests.
          nullable: true
          type: boolean
        moved:
          $ref: '#/components/schemas/Account'
          description: |
            Indicates that the profile is currently inactive and that its user has moved to a new account.
        noindex:
          type: boolean
        note: &ref_1
          description: The profile's bio / description.
          type: string
        silenced:
          type: boolean
        source:
          $ref: '#/components/schemas/Source'
        statuses_count:
          description: How many statuses are attached to this account.
          type: integer
        suspended:
          type: boolean
        url:
          description: The location of the user's profile page.
          nullable: true
          type: string
        username:
          description: The username of the account, not including domain.
          type: string
      required:
        - id
        - username
        - acct
        - url
      type: object
    
    AccountField:
      allOf:
        - $ref: '#/components/schemas/Field'
        - properties:
            verified_at:
              type: string
          type: object
      required:
        - name
        - value
    
    AccountUpdateCredentialsParams:
      example:
        avatar: ''
        bot: false
        discoverable: true
        display_name: Jane Doe
        fields_attributes:
          - name: Location
            value: Nowhere
          - name: Occupation
            value: Sourcerer
        header: ''
        locked: false
        note: The bio
        source:
          language: en
          privacy: public
          sensitive: false
      properties:
        avatar:
          description: Avatar image encoded using multipart/form-data
          type: string
        bot: *ref_4
        discoverable: *ref_3
        display_name: *ref_0
        fields_attributes:
          items:
            $ref: '#/components/schemas/Field'
          type: array
        header:
          description: Avatar image encoded using multipart/form-data
          type: string
        locked: *ref_2
        note: *ref_1
        source:
          $ref: '#/components/schemas/SourceParam'
      type: object
    
    Admin::Account:
      description: Admin-level information about a given account.
      properties:
        account:
          $ref: '#/components/schemas/Account'
          description: User-level information about the account.
        approved:
          description: Whether the account is currently approved.
          type: boolean
        confirmed:
          description: Whether the account has confirmed their email address.
          type: boolean
        created_at:
          $ref: '#/components/schemas/DateTime'
        created_by_application_id:
          $ref: '#/components/schemas/StringId'
          description: The ID of the Application that created this account, if applicable.
        disabled:
          description: Whether the account is currently disabled.
          type: boolean
        domain:
          description: The domain of the account, if it is remote.
          nullable: true
          type: string
        email:
          description: The email address associated with the account.
          type: string
        id:
          $ref: '#/components/schemas/StringId'
        invite_request:
          description: The reason given when requesting an invite (for instances that require manual approval of registrations)
          nullable: true
          type: string
        invited_by_account_id:
          $ref: '#/components/schemas/StringId'
          description: The ID of the Account that invited this user, if applicable.
        ip:
          description: The IP address last used to login to this account.
          nullable: true
          type: string
        ips:
          description: All known IP addresses associated with this account.
          items:
            type: string
          type: array
        locale:
          description: |
            The locale of the account.  
            ISO 639 Part 1 two-letter language code
          pattern: '[a-z]{2}'
          type: string
        role:
          $ref: '#/components/schemas/Role'
          description: The current role of the account.
        silenced:
          description: Whether the account is currently silenced.
          type: boolean
        suspended:
          description: Whether the account is currently suspended.
          type: boolean
        username:
          description: The username of the account, not including domain.
          type: string
      type: object
    
    Admin::CanonicalEmailBlock:
      description: Represents a canonical email block (hashed).
      properties:
        canonical_email_hash:
          description: The SHA256 hash of the canonical email address.
          example: b344e55d11b3fc25d0d53194e0475838bf17e9be67ce3e6469956222d9a34f9c
          type: string
        id:
          description: The ID of the email block in the database.
          example: '2'
          type: string
      type: object
    
    Admin::Cohort:
      description: Represents a retention metric.
      properties:
        data:
          description: Retention data for users who registered during the given period.
          items:
            $ref: '#/components/schemas/Admin::CohortData'
          type: array
        frequency:
          description: |
            The size of the bucket for the returned data.
            - `'day'` : Daily buckets
            - `'month'` : Monthly buckets
          enum:
            - day
            - month
          type: string
        period:
          description: The timestamp for the start of the period, at midnight.
      type: object
    
    Admin::CohortData:
      description: Retention data for users who registered during the given period.
      properties:
        date:
          description: The timestamp for the start of the bucket, at midnight.
          format: datetime
          type: string
        rate:
          description: The percentage rate of users who registered in the specified `period` and were active for the given `date` bucket.
          type: number
        value:
          description: How many users registered in the specified `period` and were active for the given `date` bucket.
          type: integer
      type: object
    
    Admin::Dimension:
      description: Represents qualitative data about the server.
      properties:
        data:
          description: The data available for the requested dimension.
          items:
            $ref: '#/components/schemas/Admin::Dimension::Data'
          type: array
        key:
          description: The unique keystring for the requested dimension.
          example: space_usage
          type: string
      type: object
    
    Admin::Dimension::Data:
      description: The data available for the requested dimension.
      properties:
        human_key:
          description: A human-readable key for this data item.
          example: PostgreSQL
          type: string
        human_value:
          description: A human-readable formatted value for this data item.
          example: 14.2 MB
          type: string
        key:
          description: The unique keystring for this data item.
          example: postgresql
          type: string
        unit:
          description: The units associated with this data item's value, if applicable.
          example: bytes
          type: string
        value:
          description: The value for this data item.
          example: '14924935'
          type: string
      type: object
    
    Admin::DomainAllow:
      description: Represents a domain allowed to federate.
      properties:
        created_at:
          $ref: '#/components/schemas/DateTime'
          description: When the domain was allowed to federate.
        domain:
          description: The domain that is allowed to federate.
          example: mastodon.social
          type: string
        id:
          $ref: '#/components/schemas/StringId'
          description: The ID of the DomainAllow in the database.
      type: object
    
    Admin::DomainBlock:
      description: Represents a domain limited from federating.
      properties:
        created_at:
          $ref: '#/components/schemas/DateTime'
          description: When the domain was blocked from federating.
        domain:
          description: The domain that is not allowed to federate.
          example: example.com
          type: string
        id:
          $ref: '#/components/schemas/StringId'
          description: The ID of the DomainBlock in the database.
        obfuscate:
          description: Whether to obfuscate public displays of this domain block
          type: boolean
        private_comment:
          nullable: true
          type: string
        public_comment:
          nullable: true
          type: string
        reject_media:
          description: Whether to reject media attachments from this domain
          type: boolean
        reject_reports:
          description: Whether to reject reports from this domain
          type: boolean
        severity:
          description: |
            The policy to be applied by this domain block.

            `silence` = Account statuses from this domain will be hidden by default
            `suspend` = All incoming data from this domain will be rejected
            `noop` = Do nothing. Allows for rejecting media or reports
          enum:
            - silence
            - suspend
            - noop
          type: string
      type: object
    
    Admin::EmailDomainBlock:
      description: Represents an email domain that cannot be used to sign up.
      properties:
        created_at:
          $ref: '#/components/schemas/DateTime'
          description: When the email domain was disallowed from signups.
        domain:
          description: The email domain that is not allowed to be used for signups.
          example: foo.com
          type: string
        history:
          description: Usage statistics for given days (typically the past week).
          items:
            properties:
              accounts:
                description: The counted accounts signup attempts using that email domain within that day.
                example: '0'
                pattern: '[0-9]+'
                type: string
              day:
                description: UNIX timestamp on midnight of the given day.
                example: '1668556800'
                pattern: '[0-9]+'
                type: string
              uses:
                description: The counted IP signup attempts of that email domain within that day.
                example: '0'
                pattern: '[0-9]+'
                type: string
            type: object
          type: array
        id:
          $ref: '#/components/schemas/StringId'
          description: The ID of the DomainBlock in the database.
      type: object
    
    Admin::Ip:
      description: Represents an IP address associated with a user.
      properties:
        ip:
          description: The IP address.
          example: 192.168.42.1
          type: string
        used_at:
          $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the IP address was last used for this account.
      type: object
    
    Admin::IpBlock:
      description: Represents an IP address range that cannot be used to sign up.
      properties:
        comment:
          description: The recorded reason for this IP block.
          type: string
        created_at:
          $ref: '#/components/schemas/DateTime'
          description: When the IP block was created.
        expires_at:
          $ref: '#/components/schemas/DateTime'
          description: When the IP block will expire.
          nullable: true
        id:
          $ref: '#/components/schemas/StringId'
          description: The ID of the DomainBlock in the database.
        ip:
          description: The IP address range that is not allowed to federate.
          example: 8.8.8.8/32
          type: string
        severity:
          description: |
            The associated policy with this IP block.

            `sign_up_requires_approval` = Any signup from this IP range will create a pending account
            `sign_up_block` = Any signup from this IP range will be rejected
            `no_access` = Any activity from this IP range will be rejected entirely
          enum:
            - sign_up_requires_approval
            - sign_up_block
            - no_access
          type: string
      type: object
    
    Admin::Measure:
      description: Represents quantitative data about the server.
      properties:
        data:
          description: The data available for the requested measure, split into daily buckets.
          items:
            properties:
              date:
                $ref: '#/components/schemas/DateTime'
                description: Midnight on the requested day in the time period.
              value:
                description: The numeric value for the requested measure.
                example: '0'
                pattern: '[0-9]+'
                type: string
            type: object
          type: array
        human_value:
          description: A human-readable formatted value for this data item.
          nullable: true
          type: string
        key:
          description: The unique keystring for this data item.
          example: instance_media_attachments
          type: string
        previous_total:
          description: |
            The numeric total associated with the requested measure, in the previous period. 
            Previous period is calculated by subtracting the start_at and end_at dates, 
            then offsetting both start and end dates backwards by the length of the time period.
          nullable: true
          pattern: '[0-9]+'
          type: string
        total:
          description: The value for this data item.
          example: '14924935'
          pattern: '[0-9]+'
          type: string
        unit:
          description: The units associated with this data item’s value, if applicable.
          example: bytes
          nullable: true
          type: string
      type: object
    
    Admin::Report:
      description: Admin-level information about a filed report.
      properties:
        account:
          $ref: '#/components/schemas/Admin::Account'
          description: The account which filed the report.
        action_taken:
          description: Whether an action was taken to resolve this report.
          type: boolean
        action_taken_at:
          $ref: '#/components/schemas/DateTime'
          description: When an action was taken, if this report is currently resolved.
          nullable: true
        action_taken_by_account:
          $ref: '#/components/schemas/Admin::Account'
          description: The account of the moderator who handled the report.
          nullable: true
        assigned_account:
          $ref: '#/components/schemas/Admin::Account'
          description: The account of the moderator assigned to this report.
          nullable: true
        category:
          description: |
            The category under which the report is classified.

            `spam` = Malicious, fake, or repetitive content
            `violation` = Violates one or more specific rules
            `other` = The default (catch-all) category
          enum:
            - spam
            - violation
            - other
          type: string
        comment:
          description: An optional reason for reporting.
          type: string
        created_at:
          $ref: '#/components/schemas/DateTime'
        forwarded:
          description: Whether a report was forwarded to a remote instance.
          type: boolean
        id:
          $ref: '#/components/schemas/StringId'
        rules:
          description: Rules attached to the report, for context.
          items:
            $ref: '#/components/schemas/Rule'
          type: array
        statuses:
          description: Statuses attached to the report, for context.
          items:
            $ref: '#/components/schemas/Status'
          type: array
        target_account:
          $ref: '#/components/schemas/Admin::Account'
          description: The account being reported.
        updated_at:
          $ref: '#/components/schemas/DateTime'
      type: object
    
    Announcement:
      description: Represents an announcement set by an administrator.
      properties:
        all_day:
          description: Whether the announcement should start and end on dates only instead of datetimes. Will be false if there is no starts_at or ends_at time.
          type: boolean
        content:
          description: The text of the announcement.
          type: string
        emojis:
          description: Custom emoji used in the announcement text.
          items:
            $ref: '#/components/schemas/CustomEmoji'
          type: array
        ends_at:
          description: When the announcement will end.
          nullable: true
          type: string
        id:
          $ref: '#/components/schemas/StringId'
          description: The announcement id.
        mentions:
          description: Accounts mentioned in the announcement text.
          items:
            $ref: '#/components/schemas/Announcement::Account'
          type: array
        published:
          description: Whether the announcement is currently active.
          type: boolean
        published_at:
          $ref: '#/components/schemas/DateTime'
          description: When the announcement was published.
        reactions:
          description: Emoji reactions attached to the announcement.
          items:
            $ref: '#/components/schemas/Reaction'
          type: array
        read:
          description: Whether the announcement has been read by the user.
          nullable: true
          type: boolean
        starts_at:
          description: When the announcement will start.
          nullable: true
          type: string
        statuses:
          description: Statuses linked in the announcement text.
          items:
            $ref: '#/components/schemas/Announcement::Status'
          type: array
        tags:
          description: Tags linked in the announcement text.
          items:
            $ref: '#/components/schemas/Status::Tag'
          type: array
        updated_at:
          $ref: '#/components/schemas/DateTime'
          description: When the announcement was last updated.
      type: object
    
    Announcement::Account:
      properties:
        acct:
          description: |
            The webfinger acct: URI of the mentioned user. Equivalent to username for local users, or `username@domain` for remote users.
          type: string
        id:
          $ref: '#/components/schemas/StringId'
          description: The account ID of the mentioned user.
        url:
          description: The location of the mentioned user's profile.
          type: string
        username:
          description: The username of the mentioned user.
          type: string
      type: object
    
    Announcement::Status:
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        url:
          description: The URL of an attached Status.
          type: string
      type: object
    
    Application:
      description: Represents an application that interfaces with the REST API to access accounts or post statuses.
      properties:
        client_id:
          description: Client ID key, to be used for obtaining OAuth tokens
          nullable: true
          type: string
        client_secret:
          description: Client secret key, to be used for obtaining OAuth tokens
          nullable: true
          type: string
        name:
          description: The name of your application.
          type: string
        vapid_key:
          description: |
            Used for Push Streaming API. Returned with POST /api/v1/apps. Equivalent to WebPushSubscription#server_key
          type: string
        website:
          description: The website associated with your application.
          nullable: true
          type: string
      required:
        - name
        - vapid_key
      type: object
    
    ApplicationRequestBody:
      properties:
        client_name:
          description: A name for your application
          type: string
        redirect_uris:
          description: |
            Where the user should be redirected after authorization.

            To display the authorization code to the user instead of redirecting to a web page,
            use urn:ietf:wg:oauth:2.0:oob in this parameter.
          type: string
        scopes:
          description: Space separated list of scopes. If none is provided, defaults to read.
          type: string
        website:
          description: A URL to the homepage of your app
          type: string
      required:
        - client_name
        - redirect_uris
      type: object
    
    Context:
      description: Represents the tree around a given status. Used for reconstructing threads of statuses.
      properties:
        ancestors:
          description: Parents in the thread.
          items:
            $ref: '#/components/schemas/Status'
          type: array
        descendants:
          description: Children in the thread.
          items:
            $ref: '#/components/schemas/Status'
          type: array
      type: object
    
    Conversation:
      description: Represents a conversation with "direct message" visibility.
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        accounts:
          description: Participants in the conversation.
          items:
            $ref: '#/components/schemas/Account'
          type: array
        last_status:
          $ref: '#/components/schemas/Status'
          description: The last status in the conversation.
          nullable: true
        unread:
          description: Is the conversation currently marked as unread?
          type: boolean
      type: object
      required:
        - id
        - accounts
        - last_status
        - unread
    
    Credential:
      properties:
        role:
          $ref: '#/components/schemas/Role'
        source:
          $ref: '#/components/schemas/Source'
      type: object
    
    CustomEmoji:
      description: Represents a custom emoji.
      properties:
        category:
          description: Used for sorting custom emoji in the picker.
          nullable: true
          type: string
        shortcode:
          description: The name of the custom emoji.
          type: string
        static_url:
          description: A link to a static copy of the custom emoji.
          nullable: true
          type: string
        url:
          description: A link to the custom emoji.
          type: string
        visible_in_picker:
          description: Whether this Emoji should be visible in the picker or unlisted.
          nullable: true
          type: boolean
      type: object
      required:
        - shortcode
        - url
        - static_url
        - visible_in_picker
    
    DateTime:
      example: '2022-11-13T21:24:59.474Z'
      format: datetime
      type: string
    
    DomainBlock:
      description: Represents a domain that is blocked by the instance.
      properties:
        comment:
          description: An optional reason for the domain block.
          nullable: true
          type: string
        digest:
          description: The SHA256 hash digest of the domain string.
          type: string
        domain:
          description: The domain which is blocked. This may be obfuscated or partially censored.
          type: string
        severity:
          description: |
            The level to which the domain is blocked.

            `silence` = Users from this domain will be hidden from timelines, threads, and notifications (unless you follow the user).
            `suspend` = Incoming messages from this domain will be rejected and dropped entirely.
          enum:
            - silence
            - suspend
          type: string
      required:
        - domain
        - digest
        - severity
      type: object
    
    Error:
      properties:
        error:
          description: The error message.
          type: string
        error_description:
          description: A longer description of the error, mainly provided with the OAuth API.
          nullable: true
          type: string
      required:
        - error
      type: object
    
    ExtendedDescription:
      properties:
        content:
          description: The rendered HTML content of the extended description.
          type: string
        updated_at:
          $ref: '#/components/schemas/DateTime'
      required:
        - content
        - updated_at
      type: object
    
    FamiliarFollowers:
      description: Represents a subset of your follows who also follow some other user.
      properties:
        accounts:
          description: Accounts you follow that also follow this account.
          items:
            $ref: '#/components/schemas/Account'
          type: array
        id:
          $ref: '#/components/schemas/StringId'
      type: object
    
    FeaturedTag:
      description: Represents a hashtag that is featured on a profile.
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        last_status_at:
          description: The timestamp of the last authored status containing this hashtag.
          format: date
          nullable: true
          type: string
        name:
          description: The name of the hashtag being featured.
          type: string
        statuses_count:
          description: The number of authored statuses containing this hashtag.
          pattern: '[0-9]+'
          type: string
        url:
          description: A link to all statuses by a user that contain this hashtag.
          type: string
      type: object
    
    Field:
      properties:
        name:
          type: string
        value:
          type: string
      required:
        - name
        - value
      type: object
    
    Filter:
      description: Represents a user-defined filter for determining which statuses should not be shown to the user.
      properties:
        context:
          description: |
            The contexts in which the filter should be applied.

            `home` = home timeline and lists
            `notifications` = notifications timeline
            `public` = public timelines
            `thread` = expanded thread of a detailed status
            `account` = when viewing a profile
          enum:
            - home
            - notifications
            - public
            - thread
            - account
          type: string
        expires_at:
          description: When the filter should no longer be applied.
          type: string
        filter_action:
          description: |
            The action to be taken when a status matches this filter.

            `warn` = show a warning that identifies the matching filter by `title`, and allow the user to expand the filtered status. This is the default (and unknown values should be treated as equivalent to `warn`).
            `hide` = do not show this status if it is received
          enum:
            - warn
            - hide
          type: string
        id:
          $ref: '#/components/schemas/StringId'
        keywords:
          description: The keywords grouped under this filter.
          items:
            $ref: '#/components/schemas/FilterKeyword'
          type: array
        statuses:
          description: The statuses grouped under this filter.
          items:
            $ref: '#/components/schemas/FilterStatus'
          type: array
        title:
          description: A title given by the user to name the filter.
          type: string
      type: object
    
    FilterKeyword:
      description: Represents a keyword that, if matched, should cause the filter action to be taken.
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        keyword:
          description: The phrase to be matched against.
          type: string
        whole_word:
          description: |
            Should the filter consider word boundaries?
            See [implementation guidelines for filters](https://docs.joinmastodon.org/api/guidelines/#filters).
          type: boolean
      type: object
    
    FilterStatus:
      description: Represents a status ID that, if matched, should cause the filter action to be taken.
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        status_id:
          $ref: '#/components/schemas/StringId'
          description: The ID of the filtered Status in the database.
      type: object
    
    IdentityProof:
      deprecated: true
      description: Represents a proof from an external identity provider.
      properties: {}
      type: object
    
    Instance:
      description: Represents the software instance of Mastodon running on this domain.
      properties:
        configuration:
          description: Configured values and limits for this website.
          properties:
            accounts:
              description: Limits related to accounts.
              properties:
                max_featured_tags:
                  description: The maximum number of featured tags allowed for each account.
                  type: integer
              type: object
            media_attachments:
              description: Hints for which attachments will be accepted.
              properties:
                image_matrix_limit:
                  description: The maximum number of pixels (width times height) for image uploads.
                  type: integer
                image_size_limit:
                  description: The maximum size of any uploaded image, in bytes.
                  type: integer
                supported_mime_types:
                  description: Contains MIME types that can be uploaded.
                  items:
                    type: string
                  type: array
                video_frame_rate_limit:
                  description: The maximum frame rate for any uploaded video.
                  type: integer
                video_matrix_limit:
                  description: The maximum number of pixels (width times height) for video uploads.
                  type: integer
                video_size_limit:
                  description: The maximum size of any uploaded video, in bytes.
                  type: integer
              type: object
            polls:
              properties:
                max_characters_per_option:
                  description: Each poll option is allowed to have this many characters.
                  type: integer
                max_expiration:
                  description: The longest allowed poll duration, in seconds.
                  type: integer
                max_options:
                  description: Each poll is allowed to have up to this many options.
                  type: integer
                min_expiration:
                  description: The shortest allowed poll duration, in seconds.
                  type: integer
              type: object
            statuses:
              description: Limits related to authoring statuses.
              properties:
                characters_reserved_per_url:
                  description: Each URL in a status will be assumed to be exactly this many characters.
                  type: integer
                max_characters:
                  description: The maximum number of allowed characters per status.
                  type: integer
                max_media_attachments:
                  description: The maximum number of media attachments that can be added to a status.
                  type: integer
              type: object
            translation:
              description: Hints related to translation.
              properties:
                enabled:
                  description: Whether the Translations API is available on this instance.
                  type: boolean
              type: object
            urls:
              description: URLs of interest for clients apps.
              properties:
                streaming_api:
                  description: The Websockets URL for connecting to the streaming API.
                  type: string
              type: object
          type: object
        contact:
          description: Hints related to contacting a representative of the website.
          properties:
            account:
              $ref: '#/components/schemas/Account'
              description: An account that can be contacted natively over the network regarding inquiries or issues.
            email:
              type: string
          type: object
        description:
          description: A short, plain-text description defined by the admin.
          type: string
        domain:
          description: The domain name of the instance.
          type: string
        languages:
          description: Primary languages of the website and its staff.
          items:
            description: (ISO 639-1 two-letter code)
            pattern: '[a-z]{2}'
            type: string
          type: array
        registrations:
          description: Information about registering for this website.
          properties:
            approval_required:
              description: Whether registrations require moderator approval.
              type: boolean
            enabled:
              description: Whether registrations are enabled.
              type: boolean
            message:
              description: A custom message to be shown when registrations are closed.
              nullable: true
              type: string
          type: object
        rules:
          description: An itemized list of rules for this website.
          items:
            $ref: '#/components/schemas/Rule'
          type: array
        source_url:
          description: The URL for the source code of the software running on this instance, in keeping with AGPL license requirements.
          type: string
        thumbnail:
          description: An image used to represent this instance.
          properties:
            blurhash:
              description: |
                A hash computed by [the BlurHash algorithm](https://github.com/woltapp/blurhash),
                for generating colorful preview thumbnails when media has not been downloaded yet.
              nullable: true
              type: string
            url:
              description: The URL for the thumbnail image.
              type: string
            versions:
              nullable: true
              properties:
                '@1x':
                  description: The URL for the thumbnail image at 1x resolution.
                  type: string
                '@2x':
                  description: The URL for the thumbnail image at 2x resolution.
                  type: string
              type: object
          required:
            - url
          type: object
        title:
          description: The title of the website.
          type: string
        usage:
          description: Usage data for this instance.
          properties:
            users:
              description: Usage data related to users on this instance.
              properties:
                active_month:
                  description: The number of active users in the past 4 weeks.
                  type: integer
              type: object
          type: object
        version:
          description: The version of Mastodon installed on the instance.
          type: string
      type: object
    
    List:
      description: Represents a list of some users that the authenticated user follows.
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        replies_policy:
          description: |
            `followed` = Show replies to any followed user
            `list` = Show replies to members of the list
            `none` = Show replies to no one
          enum:
            - followed
            - list
            - none
          type: string
        title:
          description: The user-defined title of the list.
          type: string
      type: object
    
    Marker:
      description: Represents the last read position within a user's timelines.
      properties:
        last_read_id:
          $ref: '#/components/schemas/StringId'
          description: The ID of the most recently viewed entity.
        updated_at:
          $ref: '#/components/schemas/DateTime'
        version:
          description: An incrementing counter, used for locking to prevent write conflicts.
          type: integer
      type: object
    
    MediaAttachment:
      description: Represents a file or media attachment that can be added to a status.
      properties:
        blurhash:
          description: |
            A hash computed by [the BlurHash algorithm](https://github.com/woltapp/blurhash), 
            for generating colorful preview thumbnails when media has not been downloaded yet.
          type: string
        description:
          description: Alternate text that describes what is in the media attachment, to be used for the visually impaired or when media attachments do not load.
          type: string
        id:
          $ref: '#/components/schemas/StringId'
        meta:
          description: |
            Metadata returned by Paperclip.

            May contain subtrees small and original, as well as various other top-level properties.

            More importantly, there may be another topl-level focus Hash object on images as of 2.3.0, 
            with coordinates can be used for smart thumbnail cropping - see Focal points for cropped media thumbnails for more.
          type: string
        preview_remote_url:
          nullable: true
          type: string
        preview_url:
          description: The location of a scaled-down preview of the attachment.
          nullable: true
          type: string
        remote_url:
          description: The location of the full-size original attachment on the remote website.
          nullable: true
          type: string
        text_url:
          deprecated: true
          description: A shorter URL for the attachment.
          nullable: true
          type: string
        type:
          description: |
            The type of the attachment.
            `unknown` = unsupported or unrecognized file type
            `image` = Static image
            `gifv` = Looping, soundless animation
            `video` = Video clip
            `audio` = Audio track
          enum:
            - image
            - gifv
            - video
            - unknown
            - audio
          type: string
        url:
          description: The location of the original full-size attachment.
          nullable: true
          type: string
      required:
        - id
        - type
      type: object
    
    Mention:
      properties:
        acct:
          type: string
        id:
          $ref: '#/components/schemas/StringId'
        url:
          nullable: true
          type: string
        username:
          type: string
      type: object
    
    Notification:
      description: Represents a notification of an event relevant to the user.
      properties:
        account:
          $ref: '#/components/schemas/Account'
          description: The account that performed the action that generated the notification.
        created_at:
          $ref: '#/components/schemas/DateTime'
        id:
          $ref: '#/components/schemas/StringId'
        report:
          $ref: '#/components/schemas/Report'
          description: |
            Report that was the object of the notification.
            Attached when type of the notification is `admin.report`.
        status:
          $ref: '#/components/schemas/Status'
          description: |
            Status that was the object of the notification.
            Attached when type of the notification is 
            `favourite`, `reblog`, `status`, `mention`, `poll`, or `update`.
        type:
          description: |
            The type of event that resulted in the notification.

            `mention` = Someone mentioned you in their status
            `status` = Someone you enabled notifications for has posted a status
            `reblog` = Someone boosted one of your statuses
            `follow` = Someone followed you
            `follow_request` = Someone requested to follow you
            `favourite` = Someone favourited one of your statuses
            `poll` = A poll you have voted in or created has ended
            `update` = A status you interacted with has been edited
            `admin.sign_up` = Someone signed up (optionally sent to admins)
            `admin.report` = A new report has been filed
          enum:
            - mention
            - status
            - reblog
            - follow
            - follow_request
            - favourite
            - poll
            - update
            - admin.sign_up
            - admin.report
          type: string
      type: object
    
    Poll:
      description: Represents a poll attached to a status.
      properties:
        emojis:
          items:
            $ref: '#/components/schemas/CustomEmoji'
          type: array
        expired:
          description: Is the poll currently expired?
          type: boolean
        expires_at:
          $ref: '#/components/schemas/DateTime'
        id:
          $ref: '#/components/schemas/StringId'
        multiple:
          description: Does the poll allow multiple-choice answers?
          type: boolean
        options:
          description: Possible answers for the poll.
          properties:
            title:
              description: The text value of the poll option.
              type: string
            votes_count:
              description: The total number of received votes for this option.
              nullable: true
              type: integer
          type: object
        own_votes:
          description: |
            When called with a user token, which options has the authorized user chosen?

            Contains an array of index values for options.
          items:
            $ref: '#/components/schemas/PollVote'
          type: array
        voted:
          description: When called with a user token, has the authorized user voted?
          nullable: true
          type: boolean
        voters_count:
          description: How many unique accounts have voted on a multiple-choice poll.
          type: integer
        votes_count:
          description: How many votes have been received.
          type: string
      required:
        - id
      type: object
    
    PollVote:
      properties:
        actor:
          type: string
        id:
          $ref: '#/components/schemas/StringId'
        object:
          properties:
            attributed_to:
              type: string
            id:
              type: string
            in_reply_to:
              type: string
            name:
              type: string
            to:
              type: string
            type:
              type: string
          type: object
        to:
          type: string
        type:
          type: string
      type: object
    
    Preferences:
      description: Represents a user's preferences.
      properties:
        posting:default:language:
          description: |
            Default language for new posts. 
            Equivalent to CredentialAccount#source[language]
            (ISO 639-1 language two-letter code)
          nullable: true
          pattern: '[a-z]{2}'
          type: string
        posting:default:sensitive:
          description: Default sensitivity flag for new posts. Equivalent to CredentialAccount#source[sensitive].
          type: boolean
        posting:default:visibility:
          description: |
            Default visibility for new posts. Equivalent to CredentialAccount#source[privacy].

            `public` = Public post
            `unlisted` = Unlisted post
            `private` = Followers-only post
            `direct` = Direct post
          enum:
            - public
            - unlisted
            - private
            - direct
          type: string
        reading:expand:media:
          description: |
            Whether media attachments should be automatically displayed or blurred/hidden.

            `default` = Hide media marked as sensitive
            `show_all` = Always show all media by default, regardless of sensitivity
            `hide_all` = Always hide all media by default, regardless of sensitivity
          enum:
            - default
            - show_all
            - hide_all
          type: string
        reading:expand:spoilers:
          description: |
            Whether CWs should be expanded by default.
          type: boolean
      type: object
    
    PreviewCard:
      description: |
        Represents a rich preview card that is generated using OpenGraph tags from a URL.
      properties:
        author_name:
          description: The author of the original resource.
          type: string
        author_url:
          description: A link to the author of the original resource.
          type: string
        blurhash:
          description: |
            A hash computed by [the BlurHash algorithm](https://github.com/woltapp/blurhash),
            for generating colorful preview thumbnails when media has not been downloaded yet.
          nullable: true
          type: string
        description:
          description: Description of preview.
          type: string
        embed_url:
          description: Used for photo embeds, instead of custom `html`.
          type: string
        height:
          anyOf:
            - pattern: '[0-9]+'
              type: string
            - type: integer
          description: Height of preview, in pixels.
        html:
          description: HTML to be used for generating the preview card.
          type: string
        image:
          description: Preview thumbnail.
          nullable: true
          type: string
        provider_name:
          description: The provider of the original resource.
          type: string
        provider_url:
          description: A link to the provider of the original resource.
          type: string
        title:
          description: Title of linked resource.
          type: string
        type:
          description: |
            The type of the preview card.
            `link` = Link OEmbed
            `photo` = Photo OEmbed
            `video` = Video OEmbed
            `rich` = iframe OEmbed. Not currently accepted, so won't show up in practice.
          enum:
            - link
            - photo
            - video
            - rich
          type: string
        url:
          description: Location of linked resource.
          type: string
        width:
          anyOf:
            - pattern: '[0-9]+'
              type: string
            - type: integer
          description: Width of preview, in pixels.
      type: object
    
    PreviewCardLink:
      allOf:
        - $ref: '#/components/schemas/PreviewCard'
        - properties:
            history:
              items:
                $ref: '#/components/schemas/TrendHistory'
              type: array
          type: object
    
    Reaction:
      description: Represents an announcement set by an administrator.
      properties:
        count:
          description: The total number of users who have added this reaction.
          type: integer
        me:
          description: 'If there is a currently authorized user: Have you added this reaction?'
          type: boolean
        name:
          description: The emoji used for the reaction. Either a unicode emoji, or a custom emoji's shortcode.
          type: string
        static_url:
          description: |
            If the reaction is a custom emoji: A link to a non-animated version of the custom emoji.
          type: string
        url:
          description: |
            If the reaction is a custom emoji: A link to the custom emoji.
          type: string
      type: object
    
    Relationship:
      description: Represents the relationship between accounts, such as following / blocking / muting / etc.
      properties:
        blocked_by:
          description: Is this user blocking you?
          type: boolean
        blocking:
          description: Are you blocking this user?
          type: boolean
        domain_blocking:
          description: Are you blocking this user's domain?
          type: boolean
        endorsed:
          description: Are you featuring this user on your profile?
          type: boolean
        followed_by:
          description: Are you followed by this user?
          type: boolean
        following:
          description: Are you following this user?
          type: boolean
        id:
          $ref: '#/components/schemas/StringId'
          description: The account id.
        languages:
          deprecated: true
          description: dead attribute defined in REST::RelationshipSerializer
          nullable: true
        muting:
          description: Are you muting this user?
          type: boolean
        muting_notifications:
          description: Are you muting notifications from this user?
          type: boolean
        note:
          description: This user's profile bio
          type: string
        notifying:
          description: Have you enabled notifications for this user?
          type: boolean
        requested:
          description: Do you have a pending follow request for this user?
          type: boolean
        showing_reblogs:
          description: Are you receiving this user's boosts in your home timeline?
          type: boolean
      type: object
    
    Report:
      description: Reports filed against users and/or statuses, to be taken action on by moderators.
      properties:
        action_taken:
          type: boolean
        action_taken_at:
          $ref: '#/components/schemas/DateTime'
          nullable: true
        category:
          description: |
            The generic reason for the report.

            `spam` = Unwanted or repetitive content
            `violation` = A specific rule was violated
            `other` = Some other reason
          enum:
            - other
            - spam
            - violation
          type: string
        comment:
          type: string
        created_at:
          format: datetime
          type: string
        forwarded:
          description: Whether the report was forwarded to a remote domain.
          type: boolean
        id:
          $ref: '#/components/schemas/StringId'
        rule_ids:
          items:
            $ref: '#/components/schemas/StringId'
          nullable: true
          type: array
        status_ids:
          items:
            $ref: '#/components/schemas/StringId'
          type: array
        target_account:
          $ref: '#/components/schemas/Account'
      type: object
    
    Role:
      description: Represents a custom user role that grants permissions.
      properties:
        color:
          description: The hex code assigned to this role. If no hex code is assigned, the string will be empty.
          type: string
        created_at:
          $ref: '#/components/schemas/DateTime'
          description: The date that the role was created.
        highlighted:
          description: Whether the role is publicly visible as a badge on user profiles.
          type: boolean
        id:
          description: The ID of the Role in the database.
          type: integer
        name:
          description: The name of the role.
          type: string
        permissions:
          description: |
            A bitmask that represents the sum of all permissions granted to the role.

            To determine the permissions available to a certain role, convert the permissions 
            attribute to binary and compare from the least significant bit upwards. 
            For convenience (and to prevent the terms from growing too long), 
            permissions will be presented below using hexadecimal values.

            - `0x1` : **Administrator**. Users with this permission bypass all permissions.
            - `0x2` : **Devops**. Allows users to access Sidekiq and pgHero dashboards.
            - `0x4` : **View Audit Log**. Allows users to see history of admin actions.
            - `0x8` : **View Dashboard**. Allows users to access the dashboard and various metrics.
            - `0x10` : **Manage Reports**. Allows users to review reports and perform moderation actions against them.
            - `0x20` : **Manage Federation**. Allows users to block or allow federation with other domains, and control deliverability.
            - `0x40` : **Manage Settings**. Allows users to change site settings.
            - `0x80` : **Manage Blocks**. Allows users to block e-mail providers and IP addresses.
            - `0x100` : **Manage Taxonomies**. Allows users to review trending content and update hashtag settings.
            - `0x200` : **Manage Appeals**. Allows users to review appeals against moderation actions.
            - `0x400` : **Manage Users**. Allows users to view other users' details and perform moderation actions against them.
            - `0x800` : **Manage Invites**. Allows users to browse and deactivate invite links.
            - `0x1000` : **Manage Rules**. Allows users to change server rules.
            - `0x2000` : **Manage Announcements**. Allows users to manage announcements on the server.
            - `0x4000` : **Manage Custom Emojis**. Allows users to manage custom emojis on the server.
            - `0x8000` : **Manage Webhooks**. Allows users to set up webhooks for administrative events.
            - `0x10000` : **Invite Users**. Allows users to invite new people to the server.
            - `0x20000` : **Manage Roles**. Allows users to manage and assign roles below theirs.
            - `0x40000` : **Manage User Access**. Allows users to disable other users' two-factor authentication, change their e-mail address, and reset their password.
            - `0x80000` : **Delete User Data**. Allows users to delete other users' data without delay.
          type: integer
        position:
          description: An index for the role's position. The higher the position, the more priority the role has over other
          type: integer
        updated_at:
          $ref: '#/components/schemas/DateTime'
          description: The date that the role was updated.
      type: object
    
    Rule:
      description: Represents a rule that server users should follow.
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        text:
          description: The rule to be followed.
          type: string
      type: object
    
    ScheduledStatus:
      description: Represents a status that will be published at a future scheduled date.
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        media_attachments:
          description: Media that will be attached when the status is posted.
          items:
            $ref: '#/components/schemas/MediaAttachment'
          type: array
        params:
          description: The parameters to be used when the status is posted.
          type: object
        scheduled_at:
          $ref: '#/components/schemas/DateTime'
      type: object
    
    Search:
      description: Represents the results of a search.
      properties:
        accounts:
          description: Accounts which match the given query
          items:
            $ref: '#/components/schemas/Account'
          type: array
        hashtags:
          description: Hashtags which match the given query
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        statuses:
          description: Statuses which match the given query
          items:
            $ref: '#/components/schemas/Status'
          type: array
      type: object
    
    Source:
      allOf:
        - $ref: '#/components/schemas/SourceParam'
        - properties:
            fields:
              description: Metadata about the account.
              items:
                $ref: '#/components/schemas/AccountField'
              type: array
            follow_requests_count:
              description: The number of pending follow requests.
              nullable: true
              type: integer
            note:
              description: Profile bio.
              type: string
          type: object
      description: |
        Represents display or publishing preferences of user's own account.  
        Returned as an additional entity when verifying and updated credentials, as an attribute of Account.
    
    SourceParam:
      properties:
        language:
          description: The default posting language for new statuses.
          nullable: true
          pattern: '[a-z]{2}'
          type: string
        privacy:
          description: |
            The default post privacy to be used for new statuses.

            public = Public post
            unlisted = Unlisted post
            private = Followers-only post
            direct = Direct post
          enum:
            - private
            - public
            - unlisted
            - direct
          nullable: true
          type: string
        sensitive:
          description: Whether new statuses should be marked sensitive by default.
          nullable: true
          type: boolean
      type: object
    
    Status:
      properties:
        account:
          $ref: '#/components/schemas/Account'
        application:
          nullable: true
          properties:
            name:
              type: string
            website:
              type: string
          type: object
        bookmarked:
          type: boolean
        card:
          $ref: '#/components/schemas/PreviewCard'
          nullable: true
        content:
          type: string
        created_at:
          $ref: '#/components/schemas/DateTime'
        edited_at:
          $ref: '#/components/schemas/DateTime'
          nullable: true
        emojis:
          items:
            $ref: '#/components/schemas/CustomEmoji'
          type: array
        favourited:
          type: boolean
        favourites_count:
          type: integer
        id:
          $ref: '#/components/schemas/StringId'
        in_reply_to_account_id:
          $ref: '#/components/schemas/StringId'
          nullable: true
        in_reply_to_id:
          $ref: '#/components/schemas/StringId'
          nullable: true
        language:
          nullable: true
          type: string
        media_attachments:
          items:
            $ref: '#/components/schemas/MediaAttachment'
          type: array
        mentions:
          items:
            $ref: '#/components/schemas/Mention'
          type: array
        muted:
          type: boolean
        pinned:
          type: boolean
        poll:
          $ref: '#/components/schemas/Poll'
          nullable: true
        reblog:
          $ref: '#/components/schemas/Status'
          nullable: true
        reblogged:
          type: boolean
        reblogs_count:
          type: integer
        replies_count:
          type: integer
        sensitive:
          type: boolean
        spoiler_text:
          type: string
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        text:
          type: string
        uri:
          example: 3140471290b4d12608d949fc6550017a0a0d236f6a93d4b36006c69a6a09e7ca
          type: string
        url:
          nullable: true
          type: string
        visibility:
          enum:
            - public
            - unlisted
            - private
            - direct
            - limited
          type: string
      required:
        - id
        - created_at
        - media_attachments
      type: object
    
    Status::Tag:
      properties:
        id:
          pattern: '[0-9]+'
          type: string
        url:
          type: string
      type: object
    
    StatusEdit:
      description: Represents a revision of a status that has been edited.
      properties:
        account:
          $ref: '#/components/schemas/Account'
          description: The account that published this revision.
        content:
          description: The content of the status at this revision.
          type: string
        created_at:
          $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the revision was published.
        emojis:
          description: Any custom emoji that are used in the current revision.
          items:
            $ref: '#/components/schemas/CustomEmoji'
          type: array
        media_attachments:
          description: |
            The current state of the poll options at this revision.

            Note that edits changing the poll options will be collapsed together into one edit, since this action resets the poll.
          items:
            $ref: '#/components/schemas/MediaAttachment'
          type: array
        poll:
          description: |
            The current state of the poll options at this revision.

            Note that edits changing the poll options will be collapsed together into one edit, since this action resets the poll.
        sensitive:
          description: Whether the status was marked sensitive at this revision.
          type: boolean
        spoiler_text:
          description: The content of the subject or content warning at this revision.
          type: string
      type: object
    
    StatusSource:
      description: Represents a status's source as plain text.
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        spoiler_text:
          description: The plain text used to compose the status's subject or content warning.
          type: string
        text:
          description: The plain text used to compose the status.
          type: string
      type: object
    
    StringId:
      example: '10999'
      pattern: '[0-9]+'
      type: string
    
    Suggestion:
      properties:
        account:
          $ref: '#/components/schemas/Account'
        source:
          description: |
            The reason this account is being suggested.

            `staff` = This account was manually recommended by your administration team
            `past_interactions` = You have interacted with this account previously
            `global` = This account has many reblogs, favourites, and active local followers within the last 30 days
          enum:
            - staff
            - past_interactions
            - global
          type: string
      type: object
    
    Tag:
      description: Represents a hashtag used within the content of a status.
      properties:
        following:
          description: Whether the current token's authorized user is following this tag.
          nullable: true
          type: boolean
        history:
          description: Usage statistics for given days (typically the past week).
          items:
            properties:
              accounts:
                description: The total of accounts using the tag within that day.
                type: string
              day:
                description: UNIX timestamp on midnight of the given day.
                type: string
              uses:
                description: The counted usage of the tag within that day.
                type: string
            type: object
          nullable: true
          type: array
        name:
          description: |
            The value of the hashtag after the # sign.
          type: string
        url:
          description: A link to the hashtag on the instance.
          type: string
      type: object
    
    Token:
      description: Represents an OAuth token used for authenticating with the API and performing actions.
      properties:
        access_token:
          description: An OAuth token to be used for authorization.
          type: string
        created_at:
          $ref: '#/components/schemas/DateTime'
        scope:
          description: The OAuth scopes granted by this token, space-separated.
          type: string
        token_type:
          description: The OAuth token type. Mastodon uses `Bearer` tokens.
          type: string
      type: object
    
    TrendHistory:
      properties:
        accounts:
          pattern: '[0-9]+'
          type: string
        day:
          pattern: '[0-9]+'
          type: string
        uses:
          pattern: '[0-9]+'
          type: string
      type: object
    
    boolOrStrBool:
      anyOf:
        - type: boolean
        - enum:
            - '1'
            - '0'
            - 'true'
            - 'false'
          type: string
  
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
    oauth:
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          scopes:
            admin:read: |
              - admin:read:accounts
              - admin:read:reports
              Used for moderation API. Added in Mastodon 2.9.1.
            admin:read:accounts: Admin read accounts
            admin:read:reports: Admin read reports
            admin:write: |
              - admin:write:accounts
              - admin:write:reports
              Used for moderation API. Added in Mastodon 2.9.1.
            admin:write:accounts: Admin write accounts
            admin:write:reports: Admin write reports
            follow: |
              Grants access to manage relationships.  
              Requesting follow will also grant the following child scopes, shown in bold in the table:

              read:blocks, write:blocks
              read:follows, write:follows
              read:mutes, write:mutes
            push: |
              Grants access to [Web Push API subscriptions](https://docs.joinmastodon.org/methods/notifications/push/).
              Added in Mastodon 2.4.0.
            read: |
              Grants access to read data.
              Requesting read will also grant child scopes shown in the left column of the table below.
            read:accounts: Read accounts
            read:blocks: Read blocks
            read:bookmarks: Read bookmarks
            read:favourites: Read favourites
            read:filters: Read filters
            read:follows: Read follows
            read:lists: Read lists
            read:mutes: Read mutes
            read:notifications: Read notifications
            read:search: Read search
            read:statuses: Read statuses
            write: |
              Grants access to write data.
              Requesting write will also grant child scopes shown in the right column of the table below.
            write:accounts: Write accounts
            write:blocks: Write blocks
            write:bookmarks: Write bookmarks
            write:conversations: Write conversations
            write:favourites: Write favourites
            write:filters: Write filters
            write:follows: Write follows
            write:lists: Write lists
            write:media: Write media
            write:mutes: Write mutes
            write:notifications: Write notifications
            write:reports: Write reports
            write:statuses: Write statuses
          tokenUrl: /oauth/token
      type: oauth2

  headers:
    X-RateLimit-Limit:
      description: Number of requests permitted per time period
      schema:
        type: string
    X-RateLimit-Remaining:
      description: Number of requests you can still make
      schema:
        type: string
    X-RateLimit-Reset:
      description: Timestamp when your rate limit will reset
      schema:
        type: string

  requestBodies:
    v1AccountsUpdateCredentials:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccountUpdateCredentialsParams'
      required: false
  
  links: {}
  parameters: {}
  responses: {}
  callbacks: {}
  examples: {}
