---
openapi: '3.1.0'
info:
  title: API V1
  version: v1
paths: {}
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/token
          scopes:
            read: |
              Grants access to read data.
              Requesting read will also grant child scopes shown in the left column of the table below.
            write: |
              Grants access to write data.
              Requesting write will also grant child scopes shown in the right column of the table below.
            follow: |
              Grants access to manage relationships.  
              Requesting follow will also grant the following child scopes, shown in bold in the table:

              read:blocks, write:blocks
              read:follows, write:follows
              read:mutes, write:mutes
            push: |
              Grants access to [Web Push API subscriptions](https://docs.joinmastodon.org/methods/notifications/push/).
              Added in Mastodon 2.4.0.
            admin:read: |
              - admin:read:accounts
              - admin:read:reports
              Used for moderation API. Added in Mastodon 2.9.1.
            admin:write: |
              - admin:write:accounts
              - admin:write:reports
              Used for moderation API. Added in Mastodon 2.9.1.
            read:accounts: Read accounts
            write:accounts: Write accounts
            read:blocks: Read blocks
            write:blocks: Write blocks
            read:bookmarks: Read bookmarks
            write:bookmarks: Write bookmarks
            write:conversations: Write conversations
            read:favourites: Read favourites
            write:favourites: Write favourites
            read:filters: Read filters
            write:filters: Write filters
            read:follows: Read follows
            write:follows: Write follows
            read:lists: Read lists
            write:lists: Write lists
            write:media: Write media
            read:mutes: Read mutes
            write:mutes: Write mutes
            read:notifications: Read notifications
            write:notifications: Write notifications
            write:reports: Write reports
            read:search: Read search
            read:statuses: Read statuses
            write:statuses: Write statuses
            admin:read:accounts: Admin read accounts
            admin:write:accounts: Admin write accounts
            admin:read:reports: Admin read reports
            admin:write:reports: Admin write reports

  schemas:
    Admin::Account:
      type: object
      description: Admin-level information about a given account.
      properties:
        id: { $ref: '#/components/schemas/StringId' }
        username:
          type: string
          description: The username of the account, not including domain.
        domain:
          description: The domain of the account, if it is remote.
          nullable: true
          type: string
        created_at: { $ref: '#/components/schemas/DateTime' }
        email:
          description: The email address associated with the account.
          type: string
        ip:
          description: The IP address last used to login to this account.
          type: string
          nullable: true
        ips:
          description: All known IP addresses associated with this account.
          type: array
          items:
            type: string
        locale:
          description: |
            The locale of the account.  
            ISO 639 Part 1 two-letter language code
          pattern: '[a-z]{2}'
          type: string
        invite_request:
          description: The reason given when requesting an invite (for instances that require manual approval of registrations)
          type: string
          nullable: true
        role:
          description: The current role of the account.
          $ref: '#/components/schemas/Role'
        confirmed:
          description: Whether the account has confirmed their email address.
          type: boolean
        approved:
          description: Whether the account is currently approved.
          type: boolean
        disabled:
          description: Whether the account is currently disabled.
          type: boolean
        silenced:
          description: Whether the account is currently silenced.
          type: boolean
        suspended:
          description: Whether the account is currently suspended.
          type: boolean
        account:
          description: User-level information about the account.
          $ref: '#/components/schemas/Account'
        created_by_application_id:
          description: The ID of the Application that created this account, if applicable.
          $ref: '#/components/schemas/StringId'
        invited_by_account_id:
          description: The ID of the Account that invited this user, if applicable.
          $ref: '#/components/schemas/StringId'

    Admin::CanonicalEmailBlock:
      description: Represents a canonical email block (hashed).
      type: object
      properties:
        id:
          description: The ID of the email block in the database.
          type: string
          example: '2'
        canonical_email_hash:
          description: The SHA256 hash of the canonical email address.
          type: string
          example: b344e55d11b3fc25d0d53194e0475838bf17e9be67ce3e6469956222d9a34f9c

    Admin::CohortData:
      description: Retention data for users who registered during the given period.
      type: object
      properties:
        date:
          description: The timestamp for the start of the bucket, at midnight.
          type: string
          format: datetime
        rate:
          description: The percentage rate of users who registered in the specified `period` and were active for the given `date` bucket.
          type: number
        value:
          description: How many users registered in the specified `period` and were active for the given `date` bucket.
          type: integer

    Admin::Cohort:
      description: Represents a retention metric.
      type: object
      properties:
        period:
          description: The timestamp for the start of the period, at midnight.
        frequency:
          description: |
            The size of the bucket for the returned data.
            - `'day'` : Daily buckets
            - `'month'` : Monthly buckets
          type: string
          enum:
            - day
            - month
        data:
          description: Retention data for users who registered during the given period.
          type: array
          items:
            $ref: '#/components/schemas/Admin::CohortData'

    Admin::Dimension::Data:
      description: The data available for the requested dimension.
      type: object
      properties:
        key:
          description: The unique keystring for this data item.
          type: string
          example: postgresql
        human_key:
          description: A human-readable key for this data item.
          type: string
          example: PostgreSQL
        value:
          description: The value for this data item.
          type: string
          example: '14924935'
        unit:
          description: The units associated with this data item's value, if applicable.
          type: string
          example: bytes
        human_value:
          description: A human-readable formatted value for this data item.
          type: string
          example: 14.2 MB

    Admin::Dimension:
      description: Represents qualitative data about the server.
      type: object
      properties:
        key:
          description: The unique keystring for the requested dimension.
          type: string
          example: space_usage
        data:
          description: The data available for the requested dimension.
          type: array
          items:
            $ref: '#/components/schemas/Admin::Dimension::Data'

    Admin::DomainAllow:
      description: Represents a domain allowed to federate.
      type: object
      properties:
        id:
          description: The ID of the DomainAllow in the database.
          $ref: '#/components/schemas/StringId'
        domain:
          description: The domain that is allowed to federate.
          type: string
          example: mastodon.social
        created_at:
          description: When the domain was allowed to federate.
          $ref: '#/components/schemas/DateTime'
    
    Admin::DomainBlock:
      description: Represents a domain limited from federating.
      type: object
      properties:
        id:
          description: The ID of the DomainBlock in the database.
          $ref: '#/components/schemas/StringId'
        domain:
          description: The domain that is not allowed to federate.
          type: string
          example: example.com
        created_at:
          description: When the domain was blocked from federating.
          $ref: '#/components/schemas/DateTime'
        severity:
          description: |
            The policy to be applied by this domain block.

            `silence` = Account statuses from this domain will be hidden by default
            `suspend` = All incoming data from this domain will be rejected
            `noop` = Do nothing. Allows for rejecting media or reports
          type: string
          enum:
            - silence
            - suspend
            - noop
        reject_media:
          description: Whether to reject media attachments from this domain
          type: boolean
        reject_reports:
          description: Whether to reject reports from this domain
          type: boolean
        private_comment:
          type: string
          nullable: true
        public_comment:
          type: string
          nullable: true
        obfuscate:
          description: Whether to obfuscate public displays of this domain block
          type: boolean

    Admin::EmailDomainBlock:
      description: Represents an email domain that cannot be used to sign up.
      type: object
      properties:
        id:
          description: The ID of the DomainBlock in the database.
          $ref: '#/components/schemas/StringId'
        domain:
          description: The email domain that is not allowed to be used for signups.
          type: string
          example: foo.com
        created_at:
          description: When the email domain was disallowed from signups.
          $ref: '#/components/schemas/DateTime'
        history:
          description: Usage statistics for given days (typically the past week).
          type: array
          items:
            type: object
            properties:
              day:
                description: UNIX timestamp on midnight of the given day.
                type: string
                pattern: '[0-9]+'
                example: '1668556800'
              accounts:
                description: The counted accounts signup attempts using that email domain within that day.
                type: string
                pattern: '[0-9]+'
                example: '0'
              uses:
                description: The counted IP signup attempts of that email domain within that day.
                type: string
                pattern: '[0-9]+'
                example: '0'
    
    Admin::Ip:
      description: Represents an IP address associated with a user.
      type: object
      properties:
        ip:
          description: The IP address.
          type: string
          example: '192.168.42.1'
        used_at:
          description: The timestamp of when the IP address was last used for this account.
          $ref: '#/components/schemas/DateTime'

    Admin::IpBlock:
      description: Represents an IP address range that cannot be used to sign up.
      type: object
      properties:
        id:
          description: The ID of the DomainBlock in the database.
          $ref: '#/components/schemas/StringId'
        ip:
          description: The IP address range that is not allowed to federate.
          type: string
          example: '8.8.8.8/32'
        severity:
          description: |
            The associated policy with this IP block.

            `sign_up_requires_approval` = Any signup from this IP range will create a pending account
            `sign_up_block` = Any signup from this IP range will be rejected
            `no_access` = Any activity from this IP range will be rejected entirely
          type: string
          enum:
            - sign_up_requires_approval
            - sign_up_block
            - no_access
        comment:
          description: The recorded reason for this IP block.
          type: string
        created_at:
          description: When the IP block was created.
          $ref: '#/components/schemas/DateTime'
        expires_at:
          description: When the IP block will expire.
          nullable: true
          $ref: '#/components/schemas/DateTime'

    Admin::Measure:
      description: Represents quantitative data about the server.
      type: object
      properties:
        key:
          description: The unique keystring for this data item.
          type: string
          example: instance_media_attachments
        unit:
          description: The units associated with this data item’s value, if applicable.
          type: string
          example: bytes
          nullable: true
        total:
          description: The value for this data item.
          type: string
          pattern: '[0-9]+'
          example: '14924935'
        human_value:
          description: A human-readable formatted value for this data item.
          type: string
          nullable: true
        previous_total:
          description: |
            The numeric total associated with the requested measure, in the previous period. 
            Previous period is calculated by subtracting the start_at and end_at dates, 
            then offsetting both start and end dates backwards by the length of the time period.
          nullable: true
          type: string
          pattern: '[0-9]+'
        data:
          description: The data available for the requested measure, split into daily buckets.
          type: array
          items:
            type: object
            properties:
              date:
                description: Midnight on the requested day in the time period.
                $ref: '#/components/schemas/DateTime'
              value:
                description: The numeric value for the requested measure.
                type: string
                pattern: '[0-9]+'
                example: '0'
    
    Admin::Report:
      description: Admin-level information about a filed report.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        action_taken:
          description: Whether an action was taken to resolve this report.
          type: boolean
        action_taken_at:
          description: When an action was taken, if this report is currently resolved.
          $ref: '#/components/schemas/DateTime'
          nullable: true
        category:
          description: |
            The category under which the report is classified.

            `spam` = Malicious, fake, or repetitive content
            `violation` = Violates one or more specific rules
            `other` = The default (catch-all) category
          type: string
          enum:
            - spam
            - violation
            - other
        comment:
          description: An optional reason for reporting.
          type: string
        forwarded:
          description: Whether a report was forwarded to a remote instance.
          type: boolean
        created_at:
          $ref: '#/components/schemas/DateTime'
        updated_at:
          $ref: '#/components/schemas/DateTime'
        account:
          description: The account which filed the report.
          $ref: '#/components/schemas/Admin::Account'
        target_account:
          description: The account being reported.
          $ref: '#/components/schemas/Admin::Account'
        assigned_account:
          description: The account of the moderator assigned to this report.
          $ref: '#/components/schemas/Admin::Account'
          nullable: true
        action_taken_by_account:
          description: The account of the moderator who handled the report.
          $ref: '#/components/schemas/Admin::Account'
          nullable: true
        statuses:
          description: Statuses attached to the report, for context.
          type: array
          items:
            $ref: '#/components/schemas/Status'
        rules:
          description: Rules attached to the report, for context.
          type: array
          items:
            $ref: '#/components/schemas/Rule'

    Account:
      description: |
        Represents a user of Mastodon and their associated profile.
      type: object
      properties:
        id: { $ref: '#/components/schemas/StringId' }
        username: &account_user_name
          type: string
          description: The username of the account, not including domain.
        acct:
          type: string
          example: bob@example.com
          description: |
            The Webfinger account URI. 
            Equal to username for local users, or username@domain for remote users.
        display_name: &account_display_name
          description: The display name to use for the profile.
          type: string
        note: &account_note
          type: string
          description: The profile's bio / description.
        fields:
          description: Additional metadata attached to a profile as name-value pairs.
          type: array
          items: { $ref: '#/components/schemas/AccountField' }

        url:
          type: string
          description: The location of the user's profile page.
          nullable: true
        avatar:
          type: string
          description: An image icon that is shown next to statuses and in the profile.
        avatar_static:
          type: string
          description: |
            A static version of the `avatar`. 
            Equal to `avatar` if its value is a static image; different if `avatar` is an animated GIF.
        header:
          type: string
          description: An image banner that is shown above the profile and in profile cards.
        header_static:
          type: string
          description: |
            A static version of the `header`. 
            Equal to `header` if its value is a static image; different if `header` is an animated GIF.
        followers_count:
          type: integer
          description: The reported followers of this profile.
        following_count:
          type: integer
          description: The reported follows of this profile.
        statuses_count:
          type: integer
          description: How many statuses are attached to this account.
        source:
          $ref: '#/components/schemas/Source'
        moved:
          description: |
            Indicates that the profile is currently inactive and that its user has moved to a new account.
          $ref: '#/components/schemas/Account'
        emojis:
          description: |
            Custom emoji entities to be used when rendering the profile. 
            If none, an empty array will be returned.
          type: array
          items: { $ref: '#/components/schemas/CustomEmoji' }

        created_at: { $ref: '#/components/schemas/DateTime' }
        last_status_at:
          type: string
          format: date
          example: '2022-11-13'
          nullable: true
          description: When the most recent status was posted.

        bot: &account_bot
          type: boolean
          description: |
            A presentational flag.  
            Indicates that the account may perform automated actions, may not be monitored, or identifies as a robot.
        suspended:
          type: boolean
        silenced:
          type: boolean
        noindex:
          type: boolean
        discoverable: &account_discoverable
          type: boolean
          description: Whether the account has opted into discovery features such as the profile directory.
        locked: &account_locked
          type: boolean
          nullable: true
          description: Whether the account manually approves follow requests.
        group:
          type: boolean
          nullable: true
      required:
        - id
        - username
        - acct
        - url

    AccountUpdateCredentialsParams:
      type: object
      properties:
        display_name: *account_display_name
        note: *account_note
        locked: *account_locked
        discoverable: *account_discoverable
        bot: *account_bot
        avatar:
          description: Avatar image encoded using multipart/form-data
          type: string
        header:
          description: Avatar image encoded using multipart/form-data
          type: string
        fields_attributes:
          type: array
          items: { $ref: '#/components/schemas/Field' }
        source: { $ref: '#/components/schemas/SourceParam' }
      example:
        display_name: Jane Doe
        note: The bio
        avatar: ''
        header: ''
        locked: false
        discoverable: true
        bot: false
        fields_attributes:
          - name: Location
            value: Nowhere
          - name: Occupation
            value: Sourcerer
        source:
          privacy: public
          sensitive: false
          language: en

    

    Application:
      description: Represents an application that interfaces with the REST API to access accounts or post statuses.
      type: object
      properties:
        name:
          type: string
          description: The name of your application.
        website:
          type: string
          description: The website associated with your application.
          nullable: true
        vapid_key:
          type: string
          description: |
            Used for Push Streaming API. Returned with POST /api/v1/apps. Equivalent to WebPushSubscription#server_key
        client_id:
          type: string
          description: Client ID key, to be used for obtaining OAuth tokens
          nullable: true
        client_secret:
          type: string
          description: Client secret key, to be used for obtaining OAuth tokens
          nullable: true
      required:
        - name
        - vapid_key

    CustomEmoji:
      description: Represents a custom emoji.
      type: object
      properties:
        shortcode:
          type: string
          description: The name of the custom emoji.
        url:
          type: string
          description: A link to the custom emoji.
        static_url:
          type: string
          nullable: true
          description: A link to a static copy of the custom emoji.
        visible_in_picker:
          type: boolean
          nullable: true
          description: Whether this Emoji should be visible in the picker or unlisted.
        category:
          type: string
          nullable: true
          description: Used for sorting custom emoji in the picker.
    
    DomainBlock:
      description: Represents a domain that is blocked by the instance.
      type: object
      properties:
        domain:
          type: string
          description: The domain which is blocked. This may be obfuscated or partially censored.
        digest:
          type: string
          description: The SHA256 hash digest of the domain string.
        severity:
          description: |
            The level to which the domain is blocked.

            `silence` = Users from this domain will be hidden from timelines, threads, and notifications (unless you follow the user).
            `suspend` = Incoming messages from this domain will be rejected and dropped entirely.
          type: string
          enum:
            - silence
            - suspend
        comment:
          type: string
          description: An optional reason for the domain block.
          nullable: true
      required:
        - domain
        - digest
        - severity
    
    Error:
      type: object
      properties:
        error:
          type: string
          description: The error message.
        error_description:
          type: string
          description: A longer description of the error, mainly provided with the OAuth API.
          nullable: true
      required:
        - error

    ExtendedDescription:
      type: object
      properties:
        content:
          type: string
          description: The rendered HTML content of the extended description.
        updated_at:
          $ref: '#/components/schemas/DateTime'
      required:
        - content
        - updated_at
    
    FamiliarFollowers:
      type: object
      description: Represents a subset of your follows who also follow some other user.
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        accounts:
          description: Accounts you follow that also follow this account.
          type: array
          items:
            $ref: '#/components/schemas/Account'

    Field:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      required:
        - name
        - value
    
    AccountField:
      allOf:
        - $ref: '#/components/schemas/Field'
        - type: object
          properties:
            verified_at:
              type: string
      required:
        - name
        - value

    SourceParam:
      type: object
      properties:
        privacy:
          description: |
            The default post privacy to be used for new statuses.

            public = Public post
            unlisted = Unlisted post
            private = Followers-only post
            direct = Direct post
          type: string
          enum:
            - private
            - public
            - unlisted
            - direct
          nullable: true
        sensitive:
          description: Whether new statuses should be marked sensitive by default.
          type: boolean
          nullable: true
        language:
          description: The default posting language for new statuses.
          type: string
          pattern: '[a-z]{2}'
          nullable: true

    Source:
      description: |
        Represents display or publishing preferences of user's own account.  
        Returned as an additional entity when verifying and updated credentials, as an attribute of Account.
      allOf:
        - $ref: '#/components/schemas/SourceParam'
        - type: object
          properties:
            note:
              description: Profile bio.
              type: string
            fields:
              description: Metadata about the account.
              type: array
              items: { $ref: '#/components/schemas/AccountField' }
            follow_requests_count:
              description: The number of pending follow requests.
              type: integer
              nullable: true

    Credential:
      type: object
      properties:
        role: { $ref: '#/components/schemas/Role' }
        source: { $ref: '#/components/schemas/Source' }

    Context:
      description: Represents the tree around a given status. Used for reconstructing threads of statuses.
      type: object
      properties:
        ancestors:
          type: array
          description: Parents in the thread.
          items:
            $ref: '#/components/schemas/Status'
        descendants:
          type: array
          description: Children in the thread.
          items:
            $ref: '#/components/schemas/Status'
    
    Conversation:
      description: Represents a conversation with "direct message" visibility.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        unread:
          description: Is the conversation currently marked as unread?
          type: boolean
        accounts:
          description: Participants in the conversation.
          type: array
          items:
            $ref: '#/components/schemas/Account'
        last_status:
          nullable: true
          description: The last status in the conversation.
          $ref: '#/components/schemas/Status'

    Role:
      description: Represents a custom user role that grants permissions.
      type: object
      properties:
        id:
          description: The ID of the Role in the database.
          type: integer
        name:
          description: The name of the role.
          type: string
        color:
          description: The hex code assigned to this role. If no hex code is assigned, the string will be empty.
          type: string
        position:
          description: An index for the role's position. The higher the position, the more priority the role has over other
          type: integer
        permissions:
          description: |
            A bitmask that represents the sum of all permissions granted to the role.

            To determine the permissions available to a certain role, convert the permissions 
            attribute to binary and compare from the least significant bit upwards. 
            For convenience (and to prevent the terms from growing too long), 
            permissions will be presented below using hexadecimal values.

            - `0x1` : **Administrator**. Users with this permission bypass all permissions.
            - `0x2` : **Devops**. Allows users to access Sidekiq and pgHero dashboards.
            - `0x4` : **View Audit Log**. Allows users to see history of admin actions.
            - `0x8` : **View Dashboard**. Allows users to access the dashboard and various metrics.
            - `0x10` : **Manage Reports**. Allows users to review reports and perform moderation actions against them.
            - `0x20` : **Manage Federation**. Allows users to block or allow federation with other domains, and control deliverability.
            - `0x40` : **Manage Settings**. Allows users to change site settings.
            - `0x80` : **Manage Blocks**. Allows users to block e-mail providers and IP addresses.
            - `0x100` : **Manage Taxonomies**. Allows users to review trending content and update hashtag settings.
            - `0x200` : **Manage Appeals**. Allows users to review appeals against moderation actions.
            - `0x400` : **Manage Users**. Allows users to view other users' details and perform moderation actions against them.
            - `0x800` : **Manage Invites**. Allows users to browse and deactivate invite links.
            - `0x1000` : **Manage Rules**. Allows users to change server rules.
            - `0x2000` : **Manage Announcements**. Allows users to manage announcements on the server.
            - `0x4000` : **Manage Custom Emojis**. Allows users to manage custom emojis on the server.
            - `0x8000` : **Manage Webhooks**. Allows users to set up webhooks for administrative events.
            - `0x10000` : **Invite Users**. Allows users to invite new people to the server.
            - `0x20000` : **Manage Roles**. Allows users to manage and assign roles below theirs.
            - `0x40000` : **Manage User Access**. Allows users to disable other users' two-factor authentication, change their e-mail address, and reset their password.
            - `0x80000` : **Delete User Data**. Allows users to delete other users' data without delay.
          type: integer
        highlighted:
          description: Whether the role is publicly visible as a badge on user profiles.
          type: boolean
        created_at:
          description: The date that the role was created.
          $ref: '#/components/schemas/DateTime'
        updated_at:
          description: The date that the role was updated.
          $ref: '#/components/schemas/DateTime'
    
    MediaAttachment:
      type: object
      description: Represents a file or media attachment that can be added to a status.
      properties:
        id: { $ref: '#/components/schemas/StringId' }
        type:
          description: |
            The type of the attachment.
            `unknown` = unsupported or unrecognized file type
            `image` = Static image
            `gifv` = Looping, soundless animation
            `video` = Video clip
            `audio` = Audio track
          type: string
          enum:
            - image
            - gifv
            - video
            - unknown
            - audio
        url:
          type: string
          description: The location of the original full-size attachment.
          nullable: true
        preview_url:
          type: string
          description: The location of a scaled-down preview of the attachment.
          nullable: true
        remote_url:
          description: The location of the full-size original attachment on the remote website.
          type: string
          nullable: true
        preview_remote_url:
          type: string
          nullable: true
        text_url:
          type: string
          nullable: true
          description: A shorter URL for the attachment.
          deprecated: true
        meta:
          type: string
          description: |
            Metadata returned by Paperclip.

            May contain subtrees small and original, as well as various other top-level properties.

            More importantly, there may be another topl-level focus Hash object on images as of 2.3.0, 
            with coordinates can be used for smart thumbnail cropping - see Focal points for cropped media thumbnails for more.
        description:
          type: string
          description: Alternate text that describes what is in the media attachment, to be used for the visually impaired or when media attachments do not load.
        blurhash:
          type: string
          description: |
            A hash computed by [the BlurHash algorithm](https://github.com/woltapp/blurhash), 
            for generating colorful preview thumbnails when media has not been downloaded yet.
      required:
        - id
        - type

    Mention:
      type: object
      properties:
        id: { $ref: '#/components/schemas/StringId' }
        username:
          type: string
        url:
          type: string
          nullable: true
        acct:
          type: string

    Notification:
      type: object
      description: Represents a notification of an event relevant to the user.
      properties:
        id: { $ref: '#/components/schemas/StringId' }
        type:
          type: string
          description: |
            The type of event that resulted in the notification.

            `mention` = Someone mentioned you in their status
            `status` = Someone you enabled notifications for has posted a status
            `reblog` = Someone boosted one of your statuses
            `follow` = Someone followed you
            `follow_request` = Someone requested to follow you
            `favourite` = Someone favourited one of your statuses
            `poll` = A poll you have voted in or created has ended
            `update` = A status you interacted with has been edited
            `admin.sign_up` = Someone signed up (optionally sent to admins)
            `admin.report` = A new report has been filed
          enum:
            - mention
            - status
            - reblog
            - follow
            - follow_request
            - favourite
            - poll
            - update
            - admin.sign_up
            - admin.report
        created_at:
          $ref: '#/components/schemas/DateTime'
        account:
          description: The account that performed the action that generated the notification.
          $ref: '#/components/schemas/Account'
        status:
          description: |
            Status that was the object of the notification.
            Attached when type of the notification is 
            `favourite`, `reblog`, `status`, `mention`, `poll`, or `update`.
          $ref: '#/components/schemas/Status'
        report:
          description: |
            Report that was the object of the notification.
            Attached when type of the notification is `admin.report`.
          $ref: '#/components/schemas/Report'

    Tag:
      type: object
      description: Represents a hashtag used within the content of a status.
      properties:
        name:
          description: |
            The value of the hashtag after the # sign.
          type: string
        url:
          description: A link to the hashtag on the instance.
          type: string
        following:
          type: boolean
          description: Whether the current token's authorized user is following this tag.
          nullable: true
        history:
          description: Usage statistics for given days (typically the past week).
          type: array
          nullable: true
          items:
            type: object
            properties:
              day:
                description: UNIX timestamp on midnight of the given day.
                type: string
              uses:
                type: string
                description: The counted usage of the tag within that day.
              accounts:
                description: The total of accounts using the tag within that day.
                type: string

    FeaturedTag:
      type: object
      description: Represents a hashtag that is featured on a profile.
      properties:
        id: { $ref: '#/components/schemas/StringId' }
        name:
          type: string
          description: The name of the hashtag being featured.
        url:
          type: string
          description: A link to all statuses by a user that contain this hashtag.
        statuses_count:
          type: string
          pattern: '[0-9]+'
          description: The number of authored statuses containing this hashtag.
        last_status_at:
          type: string
          format: date
          nullable: true
          description: The timestamp of the last authored status containing this hashtag.
    
    Filter:
      type: object
      description: Represents a user-defined filter for determining which statuses should not be shown to the user.
      properties:
        id: { $ref: '#/components/schemas/StringId' }
        title:
          type: string
          description: A title given by the user to name the filter.
        context:
          description: |
            The contexts in which the filter should be applied.

            `home` = home timeline and lists
            `notifications` = notifications timeline
            `public` = public timelines
            `thread` = expanded thread of a detailed status
            `account` = when viewing a profile
          type: string
          enum:
            - home
            - notifications
            - public
            - thread
            - account
        expires_at:
          type: string
          description: When the filter should no longer be applied.
        filter_action:
          description: |
            The action to be taken when a status matches this filter.

            `warn` = show a warning that identifies the matching filter by `title`, and allow the user to expand the filtered status. This is the default (and unknown values should be treated as equivalent to `warn`).
            `hide` = do not show this status if it is received
          type: string
          enum:
            - warn
            - hide
        keywords:
          description: The keywords grouped under this filter.
          type: array
          items:
            $ref: '#/components/schemas/FilterKeyword'
        statuses:
          description: The statuses grouped under this filter.
          type: array
          items:
            $ref: '#/components/schemas/FilterStatus'

    FilterStatus:
      type: object
      description: Represents a status ID that, if matched, should cause the filter action to be taken.
      properties:
        id: { $ref: '#/components/schemas/StringId' }
        status_id:
          $ref: '#/components/schemas/StringId'
          description: The ID of the filtered Status in the database.
    
    FilterKeyword:
      type: object
      description: Represents a keyword that, if matched, should cause the filter action to be taken.
      properties:
        id: { $ref: '#/components/schemas/StringId' }
        keyword:
          type: string
          description: The phrase to be matched against.
        whole_word:
          type: boolean
          description: |
            Should the filter consider word boundaries?
            See [implementation guidelines for filters](https://docs.joinmastodon.org/api/guidelines/#filters).

    PollVote:
      type: object
      properties:
        id: { $ref: '#/components/schemas/StringId' }
        type:
          type: string
        actor:
          type: string
        to:
          type: string
        object:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
            name:
              type: string
            attributed_to:
              type: string
            in_reply_to:
              type: string
            to:
              type: string

    Poll:
      type: object
      description: Represents a poll attached to a status.
      properties:
        id: { $ref: '#/components/schemas/StringId' }
        expires_at: { $ref: '#/components/schemas/DateTime' }
        expired:
          type: boolean
          description: Is the poll currently expired?
        multiple:
          type: boolean
          description: Does the poll allow multiple-choice answers?
        votes_count:
          type: string
          description: How many votes have been received.
        voters_count:
          type: integer
          description: How many unique accounts have voted on a multiple-choice poll.
        voted:
          type: boolean
          nullable: true
          description: When called with a user token, has the authorized user voted?
        own_votes:
          description: |
            When called with a user token, which options has the authorized user chosen?

            Contains an array of index values for options.
          type: array
          items:
            $ref: '#/components/schemas/PollVote'
        emojis:
          type: array
          items:
            $ref: '#/components/schemas/CustomEmoji'
        options:
          type: object
          description: Possible answers for the poll.
          properties:
            title:
              type: string
              description: The text value of the poll option.
            votes_count:
              description: The total number of received votes for this option.
              type: integer
              nullable: true
      required:
        - id

    Preferences:
      type: object
      description: Represents a user's preferences.
      properties:
        posting:default:visibility:
          description: |
            Default visibility for new posts. Equivalent to CredentialAccount#source[privacy].

            `public` = Public post
            `unlisted` = Unlisted post
            `private` = Followers-only post
            `direct` = Direct post
          type: string
          enum:
            - public
            - unlisted
            - private
            - direct
        posting:default:sensitive:
          type: boolean
          description: Default sensitivity flag for new posts. Equivalent to CredentialAccount#source[sensitive].
        posting:default:language:
          type: string
          nullable: true
          description: |
            Default language for new posts. 
            Equivalent to CredentialAccount#source[language]
            (ISO 639-1 language two-letter code)
          pattern: '[a-z]{2}'
        reading:expand:media:
          type: string
          description: |
            Whether media attachments should be automatically displayed or blurred/hidden.

            `default` = Hide media marked as sensitive
            `show_all` = Always show all media by default, regardless of sensitivity
            `hide_all` = Always hide all media by default, regardless of sensitivity
          enum:
            - default
            - show_all
            - hide_all
        reading:expand:spoilers:
          type: boolean
          description: |
            Whether CWs should be expanded by default.

    PreviewCard:
      type: object
      description: |
        Represents a rich preview card that is generated using OpenGraph tags from a URL.
      properties:
        url:
          type: string
          description: Location of linked resource.
        title:
          type: string
          description: Title of linked resource.
        description:
          type: string
          description: Description of preview.
        type:
          description: |
            The type of the preview card.
            `link` = Link OEmbed
            `photo` = Photo OEmbed
            `video` = Video OEmbed
            `rich` = iframe OEmbed. Not currently accepted, so won't show up in practice.

          type: string
          enum:
            - link
            - photo
            - video
            - rich
        author_name:
          description: The author of the original resource.
          type: string
        author_url:
          type: string
          description: A link to the author of the original resource.
        provider_name:
          type: string
          description: The provider of the original resource.
        provider_url:
          type: string
          description: A link to the provider of the original resource.
        html:
          type: string
          description: HTML to be used for generating the preview card.
        width:
          description: Width of preview, in pixels.
          anyOf:
            - type: string
              pattern: '[0-9]+'
            - type: integer
        height:
          description: Height of preview, in pixels.
          anyOf:
            - type: string
              pattern: '[0-9]+'
            - type: integer
        image:
          type: string
          nullable: true
          description: Preview thumbnail.
        embed_url:
          type: string
          description: Used for photo embeds, instead of custom `html`.
        blurhash:
          type: string
          nullable: true
          description: |
            A hash computed by [the BlurHash algorithm](https://github.com/woltapp/blurhash),
            for generating colorful preview thumbnails when media has not been downloaded yet.

    TrendHistory:
      type: object
      properties:
        day:
          type: string
          pattern: '[0-9]+'
        accounts:
          type: string
          pattern: '[0-9]+'
        uses:
          type: string
          pattern: '[0-9]+'

    PreviewCardLink:
      allOf:
        - $ref: '#/components/schemas/PreviewCard'
        - type: object
          properties:
            history:
              type: array
              items: { $ref: '#/components/schemas/TrendHistory' }

    IdentityProof:
      type: object
      description: Represents a proof from an external identity provider.
      deprecated: true
      properties: {}

    Instance:
      type: object
      description: Represents the software instance of Mastodon running on this domain.
      properties:
        domain:
          description: The domain name of the instance.
          type: string
        title:
          description: The title of the website.
          type: string
        version:
          description: The version of Mastodon installed on the instance.
          type: string
        source_url:
          description: The URL for the source code of the software running on this instance, in keeping with AGPL license requirements.
          type: string
        description:
          description: A short, plain-text description defined by the admin.
          type: string
        usage:
          description: Usage data for this instance.
          type: object
          properties:
            users:
              type: object
              description: Usage data related to users on this instance.
              properties:
                active_month:
                  type: integer
                  description: The number of active users in the past 4 weeks.
        thumbnail:
          description: An image used to represent this instance.
          type: object
          properties:
            url:
              type: string
              description: The URL for the thumbnail image.
            blurhash:
              description: |
                A hash computed by [the BlurHash algorithm](https://github.com/woltapp/blurhash),
                for generating colorful preview thumbnails when media has not been downloaded yet.
              type: string
              nullable: true
            versions:
              type: object
              nullable: true
              properties:
                '@1x':
                  type: string
                  description: The URL for the thumbnail image at 1x resolution.
                '@2x':
                  type: string
                  description: The URL for the thumbnail image at 2x resolution.
          required:
            - url
        languages:
          description: Primary languages of the website and its staff.
          type: array
          items:
            type: string
            pattern: '[a-z]{2}'
            description: (ISO 639-1 two-letter code)
        configuration:
          description: Configured values and limits for this website.
          type: object
          properties:
            polls:
              type: object
              properties:
                max_options:
                  type: integer
                  description: Each poll is allowed to have up to this many options.
                max_characters_per_option:
                  type: integer
                  description: Each poll option is allowed to have this many characters.
                min_expiration:
                  type: integer
                  description: The shortest allowed poll duration, in seconds.
                max_expiration:
                  type: integer
                  description: The longest allowed poll duration, in seconds.
            translation:
              type: object
              description: Hints related to translation.
              properties:
                enabled:
                  type: boolean
                  description: Whether the Translations API is available on this instance.

            media_attachments:
              type: object
              description: Hints for which attachments will be accepted.
              properties:
                supported_mime_types:
                  type: array
                  description: Contains MIME types that can be uploaded.
                  items:
                    type: string
                image_size_limit:
                  type: integer
                  description: The maximum size of any uploaded image, in bytes.
                image_matrix_limit:
                  type: integer
                  description: The maximum number of pixels (width times height) for image uploads.
                video_size_limit:
                  type: integer
                  description: The maximum size of any uploaded video, in bytes.
                video_frame_rate_limit:
                  type: integer
                  description: The maximum frame rate for any uploaded video.
                video_matrix_limit:
                  type: integer
                  description: The maximum number of pixels (width times height) for video uploads.

            accounts:
              type: object
              description: Limits related to accounts.
              properties:
                max_featured_tags:
                  type: integer
                  description: The maximum number of featured tags allowed for each account.
            statuses:
              type: object
              description: Limits related to authoring statuses.
              properties:
                max_characters:
                  type: integer
                  description: The maximum number of allowed characters per status.
                max_media_attachments:
                  type: integer
                  description: The maximum number of media attachments that can be added to a status.
                characters_reserved_per_url:
                  type: integer
                  description: Each URL in a status will be assumed to be exactly this many characters.
            urls:
              type: object
              description: URLs of interest for clients apps.
              properties:
                streaming_api:
                  type: string
                  description: The Websockets URL for connecting to the streaming API.
        registrations:
          description: Information about registering for this website.
          type: object
          properties:
            enabled:
              type: boolean
              description: Whether registrations are enabled.
            approval_required:
              type: boolean
              description: Whether registrations require moderator approval.
            message:
              type: string
              nullable: true
              description: A custom message to be shown when registrations are closed.

        contact:
          description: Hints related to contacting a representative of the website.
          type: object
          properties:
            email:
              type: string
            account:
              description: An account that can be contacted natively over the network regarding inquiries or issues.
              $ref: '#/components/schemas/Account'
        rules:
          description: An itemized list of rules for this website.
          type: array
          items:
            $ref: '#/components/schemas/Rule'

    Status:
      type: object
      properties:
        id: { $ref: '#/components/schemas/StringId' }
        in_reply_to_id:
          $ref: '#/components/schemas/StringId'
          nullable: true
        in_reply_to_account_id:
          $ref: '#/components/schemas/StringId'
          nullable: true
        created_at:
          $ref: '#/components/schemas/DateTime'
        edited_at:
          $ref: '#/components/schemas/DateTime'
          nullable: true
        sensitive:
          type: boolean
        spoiler_text:
          type: string
        visibility:
          type: string
          enum:
            - public
            - unlisted
            - private
            - direct
            - limited
        language:
          type: string
          nullable: true
        uri:
          type: string
          example: 3140471290b4d12608d949fc6550017a0a0d236f6a93d4b36006c69a6a09e7ca
        url:
          type: string
          nullable: true
        text:
          type: string
        content:
          type: string

        replies_count:
          type: integer
        reblogs_count:
          type: integer
        favourites_count:
          type: integer
        favourited:
          type: boolean
        reblogged:
          type: boolean
        muted:
          type: boolean
        bookmarked:
          type: boolean
        pinned:
          type: boolean

        reblog:
          $ref: '#/components/schemas/Status'
          nullable: true
        account:
          $ref: '#/components/schemas/Account'
        media_attachments:
          type: array
          items:
            $ref: '#/components/schemas/MediaAttachment'
        mentions:
          type: array
          items:
            $ref: '#/components/schemas/Mention'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        emojis:
          type: array
          items:
            $ref: '#/components/schemas/CustomEmoji'
        application:
          type: object
          nullable: true
          properties:
            name:
              type: string
            website:
              type: string
        poll:
          nullable: true
          $ref: '#/components/schemas/Poll'
        card:
          nullable: true
          $ref: '#/components/schemas/PreviewCard'

      required:
        - id
        - created_at
        - media_attachments

    Report:
      type: object
      description: Reports filed against users and/or statuses, to be taken action on by moderators.
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        action_taken:
          type: boolean
        action_taken_at:
          $ref: '#/components/schemas/DateTime'
          nullable: true
        category:
          description: |
            The generic reason for the report.

            `spam` = Unwanted or repetitive content
            `violation` = A specific rule was violated
            `other` = Some other reason
          type: string
          enum:
            - other
            - spam
            - violation
        comment:
          type: string
        forwarded:
          type: boolean
          description: Whether the report was forwarded to a remote domain.
        created_at:
          type: string
          format: datetime
        status_ids:
          type: array
          items: { $ref: '#/components/schemas/StringId' }
        rule_ids:
          type: array
          nullable: true
          items: { $ref: '#/components/schemas/StringId' }
        target_account: { $ref: '#/components/schemas/Account' }

    List:
      description: Represents a list of some users that the authenticated user follows.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        title:
          description: The user-defined title of the list.
          type: string
        replies_policy:
          description: |
            `followed` = Show replies to any followed user
            `list` = Show replies to members of the list
            `none` = Show replies to no one
          type: string
          enum:
            - followed
            - list
            - none
    
    Marker:
      type: object
      description: Represents the last read position within a user's timelines.
      properties:
        last_read_id:
          description: The ID of the most recently viewed entity.
          $ref: '#/components/schemas/StringId'
        version:
          description: An incrementing counter, used for locking to prevent write conflicts.
          type: integer
        updated_at:
          $ref: '#/components/schemas/DateTime'
    
    Relationship:
      description: Represents the relationship between accounts, such as following / blocking / muting / etc.
      type: object
      properties:
        id:
          description: The account id.
          $ref: '#/components/schemas/StringId'
        following:
          description: Are you following this user?
          type: boolean
        requested:
          description: Do you have a pending follow request for this user?
          type: boolean
        endorsed:
          description: Are you featuring this user on your profile?
          type: boolean
        muting:
          description: Are you muting this user?
          type: boolean
        muting_notifications:
          description: Are you muting notifications from this user?
          type: boolean
        showing_reblogs:
          description: Are you receiving this user's boosts in your home timeline?
          type: boolean
        notifying:
          description: Have you enabled notifications for this user?
          type: boolean
        languages:
          description: dead attribute defined in REST::RelationshipSerializer
          deprecated: true
          nullable: true
        followed_by:
          description: Are you followed by this user?
          type: boolean
        blocking:
          description: Are you blocking this user?
          type: boolean
        blocked_by:
          description: Is this user blocking you?
          type: boolean
        domain_blocking:
          description: Are you blocking this user's domain?
          type: boolean
        note:
          description: This user's profile bio
          type: string

    Reaction:
      description: Represents an announcement set by an administrator.
      type: object
      properties:
        name:
          description: The emoji used for the reaction. Either a unicode emoji, or a custom emoji's shortcode.
          type: string
        count:
          type: integer
          description: The total number of users who have added this reaction.
        me:
          type: boolean
          description: 'If there is a currently authorized user: Have you added this reaction?'
        url:
          type: string
          description: |
            If the reaction is a custom emoji: A link to the custom emoji.
        static_url:
          description: |
            If the reaction is a custom emoji: A link to a non-animated version of the custom emoji.
          type: string

    Announcement:
      description: Represents an announcement set by an administrator.
      type: object
      properties:
        id:
          description: The announcement id.
          $ref: '#/components/schemas/StringId'
        content:
          description: The text of the announcement.
          type: string
        starts_at:
          description: When the announcement will start.
          type: string
          nullable: true
        ends_at:
          description: When the announcement will end.
          type: string
          nullable: true
        published:
          description: Whether the announcement is currently active.
          type: boolean
        all_day:
          description: Whether the announcement should start and end on dates only instead of datetimes. Will be false if there is no starts_at or ends_at time.
          type: boolean
        published_at:
          description: When the announcement was published.
          $ref: '#/components/schemas/DateTime'
        updated_at:
          description: When the announcement was last updated.
          $ref: '#/components/schemas/DateTime'
        read:
          description: Whether the announcement has been read by the user.
          type: boolean
          nullable: true
        mentions:
          description: Accounts mentioned in the announcement text.
          type: array
          items:
            $ref: '#/components/schemas/Announcement::Account'
        tags:
          description: Tags linked in the announcement text.
          type: array
          items:
            $ref: '#/components/schemas/Status::Tag'
        statuses:
          description: Statuses linked in the announcement text.
          type: array
          items:
            $ref: '#/components/schemas/Announcement::Status'
        emojis:
          description: Custom emoji used in the announcement text.
          type: array
          items: { $ref: '#/components/schemas/CustomEmoji' }
        reactions:
          description: Emoji reactions attached to the announcement.
          type: array
          items: { $ref: '#/components/schemas/Reaction' }

    Announcement::Account:
      type: object
      properties:
        id:
          description: The account ID of the mentioned user.
          $ref: '#/components/schemas/StringId'
        username:
          type: string
          description: The username of the mentioned user.
        url:
          type: string
          description: The location of the mentioned user's profile.
        acct:
          description: |
            The webfinger acct: URI of the mentioned user. Equivalent to username for local users, or `username@domain` for remote users.
          type: string

    Announcement::Status:
      type: object
      properties:
        id: { $ref: '#/components/schemas/StringId' }
        url:
          description: The URL of an attached Status.
          type: string
    
    Status::Tag:
      type: object
      properties:
        id:
          type: string
          pattern: '[0-9]+'
        url:
          type: string
    
    ApplicationRequestBody:
      type: object
      properties:
        client_name:
          type: string
          description: 'A name for your application'
        redirect_uris:
          type: string
          description: |
            Where the user should be redirected after authorization.

            To display the authorization code to the user instead of redirecting to a web page,
            use urn:ietf:wg:oauth:2.0:oob in this parameter.
        scopes:
          type: string
          description: 'Space separated list of scopes. If none is provided, defaults to read.'
        website:
          type: string
          description: 'A URL to the homepage of your app'
      required:
        - client_name
        - redirect_uris

    Rule:
      description: Represents a rule that server users should follow.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        text:
          description: The rule to be followed.
          type: string

    ScheduledStatus:
      description: Represents a status that will be published at a future scheduled date.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        scheduled_at:
          $ref: '#/components/schemas/DateTime'
        params:
          type: object
          description: The parameters to be used when the status is posted.
        media_attachments:
          description: Media that will be attached when the status is posted.
          type: array
          items:
            $ref: '#/components/schemas/MediaAttachment'
    
    StatusEdit:
      description: Represents a revision of a status that has been edited.
      type: object
      properties:
        content:
          description: The content of the status at this revision.
          type: string
        spoiler_text:
          description: The content of the subject or content warning at this revision.
          type: string
        sensitive:
          description: Whether the status was marked sensitive at this revision.
          type: boolean
        created_at:
          description: The timestamp of when the revision was published.
          $ref: '#/components/schemas/DateTime'
        account:
          description: The account that published this revision.
          $ref: '#/components/schemas/Account'
        poll:
          description: |
            The current state of the poll options at this revision.

            Note that edits changing the poll options will be collapsed together into one edit, since this action resets the poll.
        media_attachments:
          description: |
            The current state of the poll options at this revision.

            Note that edits changing the poll options will be collapsed together into one edit, since this action resets the poll.
          type: array
          items:
            $ref: '#/components/schemas/MediaAttachment'
        emojis:
          description: Any custom emoji that are used in the current revision.
          type: array
          items:
            $ref: '#/components/schemas/CustomEmoji'

    StatusSource:
      type: object
      description: Represents a status's source as plain text.
      properties:
        id:
          $ref: '#/components/schemas/StringId'
        text:
          type: string
          description: The plain text used to compose the status.
        spoiler_text:
          type: string
          description: The plain text used to compose the status's subject or content warning.
    
    Suggestion:
      type: object
      properties:
        source:
          description: |
            The reason this account is being suggested.

            `staff` = This account was manually recommended by your administration team
            `past_interactions` = You have interacted with this account previously
            `global` = This account has many reblogs, favourites, and active local followers within the last 30 days
          type: string
          enum:
            - staff
            - past_interactions
            - global

        account:
          $ref: '#/components/schemas/Account'

    Token:
      description: Represents an OAuth token used for authenticating with the API and performing actions.
      type: object
      properties:
        access_token:
          description: An OAuth token to be used for authorization.
          type: string
        token_type:
          type: string
          description: The OAuth token type. Mastodon uses `Bearer` tokens.
        scope:
          type: string
          description: The OAuth scopes granted by this token, space-separated.
        created_at:
          $ref: '#/components/schemas/DateTime'
    
    Search:
      description: Represents the results of a search.
      type: object
      properties:
        accounts:
          description: Accounts which match the given query
          type: array
          items:
            $ref: '#/components/schemas/Account'
        statuses:
          description: Statuses which match the given query
          type: array
          items:
            $ref: '#/components/schemas/Status'
        hashtags:
          description: Hashtags which match the given query
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    
    boolOrStrBool:
      anyOf:
        - type: boolean
        - type: string
          enum:
            - '1'
            - '0'
            - 'true'
            - 'false'
    
    StringId:
      type: string
      pattern: '[0-9]+'
      example: '10999'
    
    DateTime:
      type: string
      format: datetime
      example: '2022-11-13T21:24:59.474Z'

  requestBodies:
    v1AccountsUpdateCredentials:
      required: false
      content:
        application/json:
          schema:
            '$ref': '#/components/schemas/AccountUpdateCredentialsParams'
  callbacks: {}
  parameters: {}
  responses: {}
  examples: {}
  headers:
    'X-RateLimit-Limit':
      description: Number of requests permitted per time period
      schema:
        type: string
    'X-RateLimit-Remaining':
      description: Number of requests you can still make
      schema:
        type: string
    'X-RateLimit-Reset':
      description: Timestamp when your rate limit will reset
      schema:
        type: string

  links: {}
