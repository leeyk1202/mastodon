---
openapi: 3.0.1
info:
  title: API V1
  version: v1
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
security:
- bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "/oauth/authorize"
          tokenUrl: "/oauth/token"
          scopes:
            read: |
              Grants access to read data.
              Requesting read will also grant child scopes shown in the left column of the table below.
            write: |
              Grants access to write data.
              Requesting write will also grant child scopes shown in the right column of the table below.
            follow: "Grants access to manage relationships.  \nRequesting follow will
              also grant the following child scopes, shown in bold in the table:\n\nread:blocks,
              write:blocks\nread:follows, write:follows\nread:mutes, write:mutes\n"
            push: |
              Grants access to [Web Push API subscriptions](https://docs.joinmastodon.org/methods/notifications/push/).
              Added in Mastodon 2.4.0.
            admin:read: |
              - admin:read:accounts
              - admin:read:reports
              Used for moderation API. Added in Mastodon 2.9.1.
            admin:write: |
              - admin:write:accounts
              - admin:write:reports
              Used for moderation API. Added in Mastodon 2.9.1.
            read:accounts: Read accounts
            write:accounts: Write accounts
            read:blocks: Read blocks
            write:blocks: Write blocks
            read:bookmarks: Read bookmarks
            write:bookmarks: Write bookmarks
            write:conversations: Write conversations
            read:favourites: Read favourites
            write:favourites: Write favourites
            read:filters: Read filters
            write:filters: Write filters
            read:follows: Read follows
            write:follows: Write follows
            read:lists: Read lists
            write:lists: Write lists
            write:media: Write media
            read:mutes: Read mutes
            write:mutes: Write mutes
            read:notifications: Read notifications
            write:notifications: Write notifications
            write:reports: Write reports
            read:search: Read search
            read:statuses: Read statuses
            write:statuses: Write statuses
            admin:read:accounts: Admin read accounts
            admin:write:accounts: Admin write accounts
            admin:read:reports: Admin read reports
            admin:write:reports: Admin write reports
  schemas:
    boolOrStrBool:
      anyOf:
      - type: boolean
      - type: string
        enum:
        - '1'
        - '0'
        - 'true'
        - 'false'
    CustomEmoji:
      type: object
      properties:
        shortcode:
          type: string
        url:
          type: string
        static_url:
          type: string
          nullable: true
        visible_in_picker:
          type: boolean
          nullable: true
        category:
          type: string
          nullable: true
    Field:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      required:
      - name
      - value
    AccountField:
      allOf:
      - "$ref": "#/components/schemas/Field"
      - type: object
        properties:
          verified_at:
            type: string
      required:
      - name
      - value
    SourceParam:
      type: object
      properties:
        privacy:
          description: |
            The default post privacy to be used for new statuses.

            public = Public post
            unlisted = Unlisted post
            private = Followers-only post
            direct = Direct post
          type: string
          enum:
          - private
          - public
          - unlisted
          - direct
          nullable: true
        sensitive:
          description: Whether new statuses should be marked sensitive by default.
          type: boolean
          nullable: true
        language:
          description: The default posting language for new statuses.
          type: string
          pattern: "[a-z]{2}"
          nullable: true
    Source:
      description: "Represents display or publishing preferences of user's own account.
        \ \nReturned as an additional entity when verifying and updated credentials,
        as an attribute of Account.\n"
      allOf:
      - "$ref": "#/components/schemas/SourceParam"
      - type: object
        properties:
          note:
            description: Profile bio.
            type: string
          fields:
            description: Metadata about the account.
            type: array
            items:
              "$ref": "#/components/schemas/AccountField"
          follow_requests_count:
            description: The number of pending follow requests.
            type: integer
            nullable: true
    Credential:
      type: object
      properties:
        role:
          "$ref": "#/components/schemas/Role"
        source:
          "$ref": "#/components/schemas/Source"
    Account:
      type: object
      properties:
        id:
          type: string
          pattern: "[0-9]+"
          example: '10999'
        username:
          type: string
          description: The username of the account, not including domain.
        acct:
          type: string
          example: bob@example.com
          description: "The Webfinger account URI. \nEqual to username for local users,
            or username@domain for remote users.\n"
        display_name:
          description: The display name to use for the profile.
          type: string
        note:
          type: string
          description: The profile's bio / description.
        fields:
          description: Additional metadata attached to a profile as name-value pairs.
          type: array
          items:
            "$ref": "#/components/schemas/AccountField"
        url:
          type: string
          description: The location of the user's profile page.
          nullable: true
        avatar:
          type: string
          description: An image icon that is shown next to statuses and in the profile.
        avatar_static:
          type: string
          description: "A static version of the `avatar`. \nEqual to `avatar` if its
            value is a static image; different if `avatar` is an animated GIF.\n"
        header:
          type: string
          description: An image banner that is shown above the profile and in profile
            cards.
        header_static:
          type: string
          description: "A static version of the `header`. \nEqual to `header` if its
            value is a static image; different if `header` is an animated GIF.\n"
        followers_count:
          type: integer
          description: The reported followers of this profile.
        following_count:
          type: integer
          description: The reported follows of this profile.
        statuses_count:
          type: integer
          description: How many statuses are attached to this account.
        source:
          "$ref": "#/components/schemas/Source"
        moved:
          description: 'Indicates that the profile is currently inactive and that
            its user has moved to a new account.

            '
          "$ref": "#/components/schemas/Account"
        emojis:
          description: "Custom emoji entities to be used when rendering the profile.
            \nIf none, an empty array will be returned.\n"
          type: array
          items:
            "$ref": "#/components/schemas/CustomEmoji"
        created_at:
          type: string
          format: datetime
          example: '2022-11-13T21:24:59.474Z'
        last_status_at:
          type: string
          format: date
          example: '2022-11-13'
          nullable: true
          description: When the most recent status was posted.
        bot:
          type: boolean
          description: "A presentational flag.  \nIndicates that the account may perform
            automated actions, may not be monitored, or identifies as a robot.\n"
        suspended:
          type: boolean
        silenced:
          type: boolean
        noindex:
          type: boolean
        discoverable:
          type: boolean
          description: Whether the account has opted into discovery features such
            as the profile directory.
        locked:
          type: boolean
          nullable: true
          description: Whether the account manually approves follow requests.
        group:
          type: boolean
          nullable: true
      required:
      - id
      - username
      - acct
      - url
    AccountUpdateCredentialsParams:
      type: object
      properties:
        display_name:
          description: The display name to use for the profile.
          type: string
        note:
          type: string
          description: The profile's bio / description.
        locked:
          type: boolean
          nullable: true
          description: Whether the account manually approves follow requests.
        discoverable:
          type: boolean
          description: Whether the account has opted into discovery features such
            as the profile directory.
        bot:
          type: boolean
          description: "A presentational flag.  \nIndicates that the account may perform
            automated actions, may not be monitored, or identifies as a robot.\n"
        avatar:
          description: Avatar image encoded using multipart/form-data
          type: string
        header:
          description: Avatar image encoded using multipart/form-data
          type: string
        fields_attributes:
          type: array
          items:
            "$ref": "#/components/schemas/Field"
        source:
          "$ref": "#/components/schemas/SourceParam"
      example:
        display_name: Jane Doe
        note: The bio
        avatar: ''
        header: ''
        locked: false
        discoverable: true
        bot: false
        fields_attributes:
        - name: Location
          value: Nowhere
        - name: Occupation
          value: Sourcerer
        source:
          privacy: public
          sensitive: false
          language: en
    MediaAttachment:
      type: object
      properties:
        id:
          type: string
          pattern: "[0-9]+"
          example: '10999'
        type:
          type: string
          enum:
          - image
          - gifv
          - video
          - unknown
          - audio
        url:
          type: string
          nullable: true
        preview_url:
          type: string
          nullable: true
        remote_url:
          type: string
          nullable: true
        preview_remote_url:
          type: string
          nullable: true
        text_url:
          type: string
          nullable: true
        meta:
          type: string
        description:
          type: string
        blurhash:
          type: string
      required:
      - id
      - type
    Mention:
      type: object
      properties:
        id:
          type: string
          pattern: "[0-9]+"
          example: '10999'
        username:
          type: string
        url:
          type: string
          nullable: true
        acct:
          type: string
    Tag:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        following:
          type: boolean
          nullable: true
        history:
          type: array
          nullable: true
          items:
            type: object
    FeaturedTag:
      type: object
      properties:
        id:
          type: string
          pattern: "[0-9]+"
          example: '1'
        name:
          type: string
        url:
          type: string
        statuses_count:
          type: string
          pattern: "[0-9]+"
        last_status_at:
          type: string
          format: date
          nullable: true
    PollVote:
      type: object
      properties:
        id:
          type: string
          pattern: "[0-9]+"
          example: '10999'
        type:
          type: string
        actor:
          type: string
        to:
          type: string
        object:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
            name:
              type: string
            attributed_to:
              type: string
            in_reply_to:
              type: string
            to:
              type: string
    Poll:
      type: object
      properties:
        id:
          type: string
        expires_at:
          type: string
          format: datetime
        expired:
          type: boolean
        multiple:
          type: string
        votes_count:
          type: string
        voters_count:
          type: integer
        voted:
          type: boolean
          nullable: true
        own_votes:
          type: array
          items:
            "$ref": "#/components/schemas/PollVote"
        emojis:
          type: array
          items:
            "$ref": "#/components/schemas/CustomEmoji"
        options:
          type: object
          properties:
            title:
              type: string
            votes_count:
              type: integer
      required:
      - id
    PreviewCard:
      type: object
      properties:
        url:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
          - link
          - photo
          - video
          - rich
        author_name:
          type: string
        author_url:
          type: string
        provider_name:
          type: string
        provider_url:
          type: string
        html:
          type: string
        width:
          type: string
        height:
          type: string
        image:
          type: string
          nullable: true
        embed_url:
          type: string
        blurhash:
          type: string
          nullable: true
    Status:
      type: object
      properties:
        id:
          type: string
          pattern: "[0-9]+"
          example: '10999'
        in_reply_to_id:
          type: string
          pattern: "[0-9]+"
          example: '10999'
          nullable: true
        in_reply_to_account_id:
          type: string
          pattern: "[0-9]+"
          example: '10999'
          nullable: true
        created_at:
          type: string
          format: datetime
          example: '2022-11-13T21:24:59.474Z'
        edited_at:
          type: string
          format: datetime
          example: '2022-11-13T21:24:59.474Z'
          nullable: true
        sensitive:
          type: boolean
        spoiler_text:
          type: string
        visibility:
          type: string
          enum:
          - public
          - unlisted
          - private
          - direct
          - limited
        language:
          type: string
          nullable: true
        uri:
          type: string
          example: 3140471290b4d12608d949fc6550017a0a0d236f6a93d4b36006c69a6a09e7ca
        url:
          type: string
          nullable: true
        text:
          type: string
        content:
          type: string
        replies_count:
          type: integer
        reblogs_count:
          type: integer
        favourites_count:
          type: integer
        favourited:
          type: boolean
        reblogged:
          type: boolean
        muted:
          type: boolean
        bookmarked:
          type: boolean
        pinned:
          type: boolean
        reblog:
          "$ref": "#/components/schemas/Status"
          nullable: true
        account:
          "$ref": "#/components/schemas/Account"
        media_attachments:
          type: array
          items:
            "$ref": "#/components/schemas/MediaAttachment"
        mentions:
          type: array
          items:
            "$ref": "#/components/schemas/Mention"
        tags:
          type: array
          items:
            "$ref": "#/components/schemas/Tag"
        emojis:
          type: array
          items:
            "$ref": "#/components/schemas/CustomEmoji"
        application:
          type: object
          nullable: true
          properties:
            name:
              type: string
            website:
              type: string
        poll:
          nullable: true
          "$ref": "#/components/schemas/Poll"
        card:
          nullable: true
          "$ref": "#/components/schemas/PreviewCard"
      required:
      - id
      - created_at
      - media_attachments
    Report:
      type: object
      properties:
        id:
          type: string
          pattern: "[0-9]+"
          example: '1'
        action_taken:
          type: boolean
        action_taken_at:
          type: string
          format: datetime
          nullable: true
        category:
          type: string
          enum:
          - other
          - spam
          - violation
        comment:
          type: string
        forwarded:
          type: boolean
        created_at:
          type: string
          format: datetime
        status_ids:
          type: array
          items:
            type: string
            pattern: "[0-9]+"
        rule_ids:
          type: array
          nullable: true
          items:
            type: string
            pattern: "[0-9]+"
        target_account:
          "$ref": "#/components/schemas/Account"
    Role:
      type: object
      properties:
        id:
          type: string
          pattern: "[0-9]+"
          example: '1'
        name:
          type: string
        permissions:
          type: string
        color:
          type: string
        highlighted:
          type: boolean
    List:
      description: Represents a list of some users that the authenticated user follows.
      type: object
      properties:
        id:
          type: string
          pattern: "[0-9]+"
        title:
          description: The user-defined title of the list.
          type: string
        replies_policy:
          description: |
            followed = Show replies to any followed user
            list = Show replies to members of the list
            none = Show replies to no one
          type: string
          enum:
          - followed
          - list
          - none
    Relationship:
      description: Represents the relationship between accounts, such as following
        / blocking / muting / etc.
      type: object
      properties:
        id:
          description: The account id.
          type: string
          pattern: "[0-9]+"
        following:
          description: Are you following this user?
          type: boolean
        requested:
          description: Do you have a pending follow request for this user?
          type: boolean
        endorsed:
          description: Are you featuring this user on your profile?
          type: boolean
        muting:
          description: Are you muting this user?
          type: boolean
        muting_notifications:
          description: Are you muting notifications from this user?
          type: boolean
        showing_reblogs:
          description: Are you receiving this user's boosts in your home timeline?
          type: boolean
        notifying:
          description: Have you enabled notifications for this user?
          type: boolean
        languages:
          description: dead attribute defined in REST::RelationshipSerializer
          deprecated: true
          nullable: true
        followed_by:
          description: Are you followed by this user?
          type: boolean
        blocking:
          description: Are you blocking this user?
          type: boolean
        blocked_by:
          description: Is this user blocking you?
          type: boolean
        domain_blocking:
          description: Are you blocking this user's domain?
          type: boolean
        note:
          description: This user's profile bio
          type: string
    Reaction:
      description: Represents an announcement set by an administrator.
      type: object
      properties:
        name:
          type: string
        me:
          type: boolean
        url:
          type: string
        static_url:
          type: string
    Announcement:
      description: Represents an announcement set by an administrator.
      type: object
      properties:
        id:
          description: The announcement id.
          type: string
          pattern: "[0-9]+"
        content:
          description: ''
          type: string
        starts_at:
          description: ''
          type: string
          nullable: true
        ends_at:
          description: ''
          type: string
          nullable: true
        all_day:
          description: ''
          type: boolean
        published_at:
          description: ''
          type: string
        updated_at:
          description: ''
          type: string
        read:
          description: Whether the announcement has been read by the user.
          type: boolean
        mentions:
          type: array
          items:
            type: object
        tags:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                pattern: "[0-9]+"
              url:
                type: string
        statuses:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                pattern: "[0-9]+"
              url:
                type: string
        reactions:
          type: array
          items:
            "$ref": "#/components/schemas/Reaction"
    ApplicationRequestBody:
      type: object
      properties:
        client_name:
          type: string
          description: A name for your application
        redirect_uris:
          type: string
          description: |
            Where the user should be redirected after authorization.

            To display the authorization code to the user instead of redirecting to a web page,
            use urn:ietf:wg:oauth:2.0:oob in this parameter.
        scopes:
          type: string
          description: Space separated list of scopes. If none is provided, defaults
            to read.
        website:
          type: string
          description: A URL to the homepage of your app
      required:
      - client_name
      - redirect_uris
    Application:
      type: object
      properties:
        id:
          description: The application id.
          type: string
          pattern: "[0-9]+"
        name:
          type: string
        website:
          type: string
          nullable: true
        redirect_uri:
          type: string
        client_id:
          type: string
        client_secret:
          type: string
        vapid_key:
          type: string
  requestBodies:
    v1AccountsUpdateCredentials:
      required: false
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/AccountUpdateCredentialsParams"
  callbacks: {}
  parameters: {}
  responses: {}
  examples: {}
  headers:
    X-RateLimit-Limit:
      description: Number of requests permitted per time period
      schema:
        type: string
    X-RateLimit-Remaining:
      description: Number of requests you can still make
      schema:
        type: string
    X-RateLimit-Reset:
      description: Timestamp when your rate limit will reset
      schema:
        type: string
  links: {}
paths:
  "/api/v1/accounts/verify_credentials":
    get:
      summary: show credential
      tags:
      - Api
      - V1
      - Accounts
      - Credentials
      operationId: v1AccountsCredentialsShowCredential
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109344988017914228'
                    username: dan_abshire0
                    acct: dan_abshire0
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-15T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@dan_abshire0
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    source:
                      privacy: public
                      sensitive: false
                      language:
                      note: ''
                      fields: []
                      follow_requests_count: 0
                    emojis: []
                    fields: []
                    role:
                      id: "-99"
                      name: ''
                      permissions: '65536'
                      color: ''
                      highlighted: false
              schema:
                type: object
                allOf:
                - "$ref": "#/components/schemas/Account"
                - "$ref": "#/components/schemas/Credential"
  "/api/v1/accounts/update_credentials":
    patch:
      summary: update credential
      tags:
      - Api
      - V1
      - Accounts
      - Credentials
      operationId: v1AccountsCredentialsUpdateCredential
      security:
      - bearerAuth: []
      - oauth:
        - write
        - write:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109344988023118318'
                    username: shawn1
                    acct: shawn1
                    display_name: Changed
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-15T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@shawn1
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    source:
                      privacy: public
                      sensitive: false
                      language:
                      note: ''
                      fields: []
                      follow_requests_count: 0
                    emojis: []
                    fields: []
                    role:
                      id: "-99"
                      name: ''
                      permissions: '65536'
                      color: ''
                      highlighted: false
              schema:
                type: object
                allOf:
                - "$ref": "#/components/schemas/Account"
                - "$ref": "#/components/schemas/Credential"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/requestBodies/v1AccountsUpdateCredentials"
  "/api/v1/accounts/familiar_followers":
    get:
      summary: list familiar_followers
      tags:
      - Api
      - V1
      - Accounts
      - FamiliarFollowers
      operationId: v1AccountsFamiliarfollowersListFamiliarFollower
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:follows
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: id[]
        in: query
        schema:
          type: string
      responses:
        '200':
          description: no familiar follows
          content:
            application/json:
              examples:
                lists_familiar_follows:
                  value:
                  - id: '109344988031871153'
                    accounts:
                    - id: '109344988031871152'
                      username: roxane3
                      acct: roxane3
                      display_name: ''
                      locked: false
                      bot: false
                      discoverable: true
                      group: false
                      created_at: '2022-11-15T00:00:00.000Z'
                      note: ''
                      url: https://cb6e6126.ngrok.io/@roxane3
                      avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      header: https://cb6e6126.ngrok.io/headers/original/missing.png
                      header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                      followers_count: 1
                      following_count: 1
                      statuses_count: 0
                      last_status_at:
                      noindex: false
                      emojis: []
                      fields: []
                no_familiar_follows:
                  value:
                  - id: '109344988041727734'
                    accounts: []
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      pattern: "[0-9]+"
                    accounts:
                      type: array
                      items:
                        "$ref": "#/components/schemas/Account"
  "/api/v1/accounts/{account_id}/featured_tags":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    get:
      summary: list featured_tags
      tags:
      - Api
      - V1
      - Accounts
      - FeaturedTags
      operationId: v1AccountsFeaturedtagsListFeaturedTag
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '17'
                    name: test_featured_tag
                    url: https://cb6e6126.ngrok.io/@calvin_schmidt8/tagged/test_featured_tag
                    statuses_count: '0'
                    last_status_at:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/FeaturedTag"
  "/api/v1/accounts/{account_id}/followers":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    get:
      summary: list follower_accounts
      tags:
      - Api
      - V1
      - Accounts
      - FollowerAccounts
      operationId: v1AccountsFolloweraccountsListFollowerAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: Maximum number of results to return. Defaults to 40.
        schema:
          type: integer
      - name: max_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109344988057704735'
                    username: tamika_kunze12
                    acct: tamika_kunze12
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-15T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@tamika_kunze12
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 1
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
                  - id: '109344988057704733'
                    username: chante_franecki10
                    acct: chante_franecki10
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-15T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@chante_franecki10
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 1
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Account"
  "/api/v1/accounts/{account_id}/following":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    get:
      summary: list following_accounts
      tags:
      - Api
      - V1
      - Accounts
      - FollowingAccounts
      operationId: v1AccountsFollowingaccountsListFollowingAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: Maximum number of results to return. Defaults to 40.
        schema:
          type: integer
      - name: max_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109344988073541499'
                    username: gavin17
                    acct: gavin17
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-15T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@gavin17
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 1
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
                  - id: '109344988073541498'
                    username: senaida_windler16
                    acct: senaida_windler16
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-15T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@senaida_windler16
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 1
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Account"
  "/api/v1/accounts/{account_id}/identity_proofs":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    get:
      summary: list identity_proofs
      tags:
      - Api
      - V1
      - Accounts
      - IdentityProofs
      operationId: v1AccountsIdentityproofsListIdentityProof
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:account
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
              schema:
                type: array
  "/api/v1/accounts/{account_id}/lists":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    get:
      summary: list lists
      tags:
      - Api
      - V1
      - Accounts
      - Lists
      operationId: v1AccountsListsListList
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:lists
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '16'
                    title: TestList
                    replies_policy: list
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/List"
  "/api/v1/accounts/lookup":
    get:
      summary: show lookup
      tags:
      - Api
      - V1
      - Accounts
      - Lookup
      description: Allows converting a username@domain into a local ID quickly (unlike
        search, it does not resolve anything, and as such, is available without an
        API token)
      operationId: v1AccountsLookupShowLookup
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: acct
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109344988115539482'
                    username: tester
                    acct: tester@nothere.com
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-15T00:00:00.000Z'
                    note: ''
                    url:
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    emojis: []
                    fields: []
              schema:
                "$ref": "#/components/schemas/Account"
  "/api/v1/accounts/{account_id}/note":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    post:
      summary: create note
      tags:
      - Api
      - V1
      - Accounts
      - Notes
      operationId: v1AccountsNotesCreateNote
      security:
      - bearerAuth: []
      - oauth:
        - write
        - write:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109344988131421511'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: testing comment
              schema:
                "$ref": "#/components/schemas/Relationship"
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
  "/api/v1/accounts/{account_id}/pin":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    post:
      summary: create pin
      tags:
      - Api
      - V1
      - Accounts
      - Pins
      operationId: v1AccountsPinsCreatePin
      security:
      - bearerAuth: []
      - oauth:
        - write
        - write:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109344988141865412'
                    following: true
                    showing_reblogs: true
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: true
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{account_id}/unpin":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    post:
      summary: delete pin
      tags:
      - Api
      - V1
      - Accounts
      - Pins
      operationId: v1AccountsPinsDeletePin
      security:
      - bearerAuth: []
      - oauth:
        - write
        - write:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109344988150244685'
                    following: true
                    showing_reblogs: true
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/relationships":
    get:
      summary: list relationships
      tags:
      - Api
      - V1
      - Accounts
      - Relationships
      operationId: v1AccountsRelationshipsListRelationship
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:follows
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: query
        description: account_ids
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109344988165500728'
                    following: true
                    showing_reblogs: true
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/search":
    get:
      summary: show search
      tags:
      - Api
      - V1
      - Accounts
      - Search
      operationId: v1AccountsSearchShowSearch
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: q
        in: query
        required: true
        description: What to search for
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: Maximum number of results. Defaults to 40.
        schema:
          type: integer
      - name: resolve
        in: query
        required: false
        description: Attempt WebFinger lookup. Defaults to false. Use this when q
          is an exact address.
        schema:
          type: string
      - name: following
        in: query
        required: false
        description: Only who the user is following. Defaults to false.
        schema:
          type: boolean
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109344988199420311'
                    username: account3
                    acct: account3
                    display_name: account no3
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-15T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@account3
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Account"
  "/api/v1/accounts/{account_id}/statuses":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    get:
      summary: list statuses
      tags:
      - Api
      - V1
      - Accounts
      - Statuses
      operationId: v1AccountsStatusesListStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:statuses
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109344988206318084'
                    created_at: '2022-11-15T00:28:30.096Z'
                    in_reply_to_id:
                    in_reply_to_account_id:
                    sensitive: false
                    spoiler_text: ''
                    visibility: public
                    language: en
                    uri: 7bd49e3735c93fd38474157f13915a813529f7580fef28bc465aee491235b75a
                    url:
                    replies_count: 0
                    reblogs_count: 0
                    favourites_count: 0
                    edited_at: '2022-11-15T00:28:30.094Z'
                    favourited: false
                    reblogged: false
                    muted: false
                    bookmarked: false
                    content: Lorem ipsum dolor sit amet
                    filtered: []
                    reblog:
                    account:
                      id: '109344988206311027'
                      username: bob
                      acct: bob@example.com
                      display_name: ''
                      locked: false
                      bot: false
                      discoverable: true
                      group: false
                      created_at: '2022-11-15T00:00:00.000Z'
                      note: ''
                      url:
                      avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      header: https://cb6e6126.ngrok.io/headers/original/missing.png
                      header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                      followers_count: 0
                      following_count: 0
                      statuses_count: 2
                      last_status_at: '2022-11-15'
                      emojis: []
                      fields: []
                    media_attachments: []
                    mentions:
                    - id: '109344988206311028'
                      username: jane
                      url:
                      acct: jane@example.com
                    tags: []
                    emojis: []
                    card:
                    poll:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Status"
  "/api/v1/accounts/{id}/follow":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: follow account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsFollowAccount
      description: Follow the given account. Can also be used to update whether to
        show reblogs or enable notifications.
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:follows
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: follow already following
          content:
            application/json:
              examples:
                follow_not_following:
                  value:
                    id: '109344988221466091'
                    following: true
                    showing_reblogs: true
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
                follow_already_following:
                  value:
                    id: '109344988232079054'
                    following: true
                    showing_reblogs: true
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reblogs:
                  type: boolean
                  description: Receive this account's reblogs in home timeline? Defaults
                    to true.
                notify:
                  type: boolean
                  description: Receive notifications when this account posts a status?
                    Defaults to false.
  "/api/v1/accounts/{id}/unfollow":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unfollow account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsUnfollowAccount
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:follows
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: unfollow not following
          content:
            application/json:
              examples:
                unfollow_following:
                  value:
                    id: '109344988238070775'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
                unfollow_not_following:
                  value:
                    id: '109344988250339876'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{id}/remove_from_followers":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: remove_from_followers account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsRemoveFromFollowersAccount
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:follows
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109344988289612903'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{id}/block":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: block account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsBlockAccount
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:blocks
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109344988296402531'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: true
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{id}/unblock":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unblock account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsUnblockAccount
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:blocks
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109344988306302591'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{id}/mute":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: mute account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsMuteAccount
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:mutes
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109344988312310738'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: true
                    muting_notifications: true
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{id}/unmute":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unmute account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsUnmuteAccount
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:mutes
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109344988318529581'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsShowAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109344988323974079'
                    username: ellis_cummings54
                    acct: ellis_cummings54
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-15T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@ellis_cummings54
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/admin/accounts/{account_id}/action":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    post:
      summary: create account_action
      tags:
      - Api
      - V1
      - Admin
      - AccountActions
      operationId: v1AdminAccountactionsCreateAccountAction
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/accounts/{id}/enable":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: enable account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsEnableAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/accounts/{id}/unsensitive":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unsensitive account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsUnsensitiveAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/accounts/{id}/unsilence":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unsilence account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsUnsilenceAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/accounts/{id}/unsuspend":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unsuspend account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsUnsuspendAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/accounts/{id}/approve":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: approve account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsApproveAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/accounts/{id}/reject":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: reject account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsRejectAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/accounts":
    get:
      summary: list accounts
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsListAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/accounts/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsShowAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsDeleteAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/canonical_email_blocks/test":
    post:
      summary: test canonical_email_block
      tags:
      - Api
      - V1
      - Admin
      - CanonicalEmailBlocks
      operationId: v1AdminCanonicalemailblocksTestCanonicalEmailBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/admin/canonical_email_blocks":
    get:
      summary: list canonical_email_blocks
      tags:
      - Api
      - V1
      - Admin
      - CanonicalEmailBlocks
      operationId: v1AdminCanonicalemailblocksListCanonicalEmailBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
    post:
      summary: create canonical_email_block
      tags:
      - Api
      - V1
      - Admin
      - CanonicalEmailBlocks
      operationId: v1AdminCanonicalemailblocksCreateCanonicalEmailBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/canonical_email_blocks/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show canonical_email_block
      tags:
      - Api
      - V1
      - Admin
      - CanonicalEmailBlocks
      operationId: v1AdminCanonicalemailblocksShowCanonicalEmailBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete canonical_email_block
      tags:
      - Api
      - V1
      - Admin
      - CanonicalEmailBlocks
      operationId: v1AdminCanonicalemailblocksDeleteCanonicalEmailBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/dimensions":
    post:
      summary: create dimension
      tags:
      - Api
      - V1
      - Admin
      - Dimensions
      operationId: v1AdminDimensionsCreateDimension
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/domain_allows":
    get:
      summary: list domain_allows
      tags:
      - Api
      - V1
      - Admin
      - DomainAllows
      operationId: v1AdminDomainallowsListDomainAllow
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
    post:
      summary: create domain_allow
      tags:
      - Api
      - V1
      - Admin
      - DomainAllows
      operationId: v1AdminDomainallowsCreateDomainAllow
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/domain_allows/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show domain_allow
      tags:
      - Api
      - V1
      - Admin
      - DomainAllows
      operationId: v1AdminDomainallowsShowDomainAllow
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete domain_allow
      tags:
      - Api
      - V1
      - Admin
      - DomainAllows
      operationId: v1AdminDomainallowsDeleteDomainAllow
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/domain_blocks":
    get:
      summary: list domain_blocks
      tags:
      - Api
      - V1
      - Admin
      - DomainBlocks
      operationId: v1AdminDomainblocksListDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
    post:
      summary: create domain_block
      tags:
      - Api
      - V1
      - Admin
      - DomainBlocks
      operationId: v1AdminDomainblocksCreateDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/domain_blocks/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show domain_block
      tags:
      - Api
      - V1
      - Admin
      - DomainBlocks
      operationId: v1AdminDomainblocksShowDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update domain_block
      tags:
      - Api
      - V1
      - Admin
      - DomainBlocks
      operationId: v1AdminDomainblocksUpdateDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update domain_block
      tags:
      - Api
      - V1
      - Admin
      - DomainBlocks
      operationId: v1AdminDomainblocksUpdateDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete domain_block
      tags:
      - Api
      - V1
      - Admin
      - DomainBlocks
      operationId: v1AdminDomainblocksDeleteDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/email_domain_blocks":
    get:
      summary: list email_domain_blocks
      tags:
      - Api
      - V1
      - Admin
      - EmailDomainBlocks
      operationId: v1AdminEmaildomainblocksListEmailDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
    post:
      summary: create email_domain_block
      tags:
      - Api
      - V1
      - Admin
      - EmailDomainBlocks
      operationId: v1AdminEmaildomainblocksCreateEmailDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/email_domain_blocks/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show email_domain_block
      tags:
      - Api
      - V1
      - Admin
      - EmailDomainBlocks
      operationId: v1AdminEmaildomainblocksShowEmailDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete email_domain_block
      tags:
      - Api
      - V1
      - Admin
      - EmailDomainBlocks
      operationId: v1AdminEmaildomainblocksDeleteEmailDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/ip_blocks":
    get:
      summary: list ip_blocks
      tags:
      - Api
      - V1
      - Admin
      - IpBlocks
      operationId: v1AdminIpblocksListIpBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
    post:
      summary: create ip_block
      tags:
      - Api
      - V1
      - Admin
      - IpBlocks
      operationId: v1AdminIpblocksCreateIpBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/ip_blocks/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show ip_block
      tags:
      - Api
      - V1
      - Admin
      - IpBlocks
      operationId: v1AdminIpblocksShowIpBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update ip_block
      tags:
      - Api
      - V1
      - Admin
      - IpBlocks
      operationId: v1AdminIpblocksUpdateIpBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update ip_block
      tags:
      - Api
      - V1
      - Admin
      - IpBlocks
      operationId: v1AdminIpblocksUpdateIpBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete ip_block
      tags:
      - Api
      - V1
      - Admin
      - IpBlocks
      operationId: v1AdminIpblocksDeleteIpBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/measures":
    post:
      summary: create measure
      tags:
      - Api
      - V1
      - Admin
      - Measures
      operationId: v1AdminMeasuresCreateMeasure
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/reports/{id}/assign_to_self":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: assign_to_self report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsAssignToSelfReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/reports/{id}/unassign":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unassign report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsUnassignReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/reports/{id}/reopen":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: reopen report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsReopenReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/reports/{id}/resolve":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: resolve report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsResolveReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/reports":
    get:
      summary: list reports
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsListReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/reports/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsShowReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsUpdateReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsUpdateReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/retention":
    post:
      summary: create retention
      tags:
      - Api
      - V1
      - Admin
      - Retention
      operationId: v1AdminRetentionCreateRetention
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/trends/links":
    get:
      summary: list links
      tags:
      - Api
      - V1
      - Admin
      - Trends
      - Links
      operationId: v1AdminTrendsLinksListLink
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/admin/trends/statuses":
    get:
      summary: list statuses
      tags:
      - Api
      - V1
      - Admin
      - Trends
      - Statuses
      operationId: v1AdminTrendsStatusesListStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/admin/trends/tags":
    get:
      summary: list tags
      tags:
      - Api
      - V1
      - Admin
      - Trends
      - Tags
      operationId: v1AdminTrendsTagsListTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/announcements/{announcement_id}/reactions/{id}":
    parameters:
    - name: announcement_id
      in: path
      description: announcement_id
      required: true
      schema:
        type: string
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    patch:
      summary: update reaction
      tags:
      - Api
      - V1
      - Announcements
      - Reactions
      operationId: v1AnnouncementsReactionsUpdateReaction
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update reaction
      tags:
      - Api
      - V1
      - Announcements
      - Reactions
      operationId: v1AnnouncementsReactionsUpdateReaction
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete reaction
      tags:
      - Api
      - V1
      - Announcements
      - Reactions
      operationId: v1AnnouncementsReactionsDeleteReaction
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/announcements/{id}/dismiss":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: dismiss announcement
      tags:
      - Api
      - V1
      - Announcements
      operationId: v1AnnouncementsDismissAnnouncement
      security:
      - bearerAuth: []
      - oauth:
        - write
        - write:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
  "/api/v1/announcements":
    get:
      summary: list announcements
      tags:
      - Api
      - V1
      - Announcements
      operationId: v1AnnouncementsListAnnouncement
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '26'
                    content: "<p>Assumenda qui cumque. Facere minus accusamus.</p>"
                    starts_at:
                    ends_at:
                    all_day: false
                    published_at: '2022-11-15T00:28:36.445Z'
                    updated_at: '2022-11-15T00:28:36.445Z'
                    read: false
                    mentions: []
                    statuses: []
                    tags: []
                    emojis: []
                    reactions: []
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Announcement"
  "/api/v1/apps/verify_credentials":
    get:
      summary: show credential
      tags:
      - Api
      - V1
      - Apps
      - Credentials
      operationId: v1AppsCredentialsShowCredential
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/apps":
    post:
      summary: create app
      tags:
      - Api
      - V1
      - Apps
      operationId: v1AppsCreateApp
      description: Create a new application to obtain OAuth2 credentials.
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '32'
                    name: testclient
                    website:
                    redirect_uri: urn:ietf:wg:oauth:2.0:oob
                    client_id: RrmMEdPVwj01TrNTw9bTqBxZDBkx3BBs2XeHku7pMJw
                    client_secret: bEtUHs0E4a9iYbXVeYV1nE8W-T7jcHvACXXKkoYgAG0
                    vapid_key: BGUyMI925QEuOKuSGN1FSA8UK8Fbh5gEluDwZtsKmxHtDP6b6wKvL8mIH2_Va6itP3VRPTNz2b-IxhaxyPRHSWQ=
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ApplicationRequestBody"
        required: true
  "/api/v1/blocks":
    get:
      summary: list blocks
      tags:
      - Api
      - V1
      - Blocks
      operationId: v1BlocksListBlock
      description: View your blocks. See also accounts/:id/{block,unblock}
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - read
        - read:blocks
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: Maximum number of results to return. Defaults to 40.
        schema:
          type: integer
      - name: max_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109344988642425408'
                    username: rickey_keeling114
                    acct: rickey_keeling114
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-15T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@rickey_keeling114
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
                  - id: '109344988642425407'
                    username: osvaldo_boehm113
                    acct: osvaldo_boehm113
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-15T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@osvaldo_boehm113
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Account"
  "/api/v1/bookmarks":
    get:
      summary: list bookmarks
      tags:
      - Api
      - V1
      - Bookmarks
      operationId: v1BookmarksListBookmark
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:bookmarks
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: Maximum number of results to return. Defaults to 40.
        schema:
          type: integer
      - name: max_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109344988652485201'
                    created_at: '2022-11-15T00:28:36.956Z'
                    in_reply_to_id:
                    in_reply_to_account_id:
                    sensitive: false
                    spoiler_text: ''
                    visibility: public
                    language:
                    uri: https://cb6e6126.ngrok.io/users/michal_volkman116/statuses/109344988652485201
                    url: https://cb6e6126.ngrok.io/@michal_volkman116/109344988652485201
                    replies_count: 0
                    reblogs_count: 0
                    favourites_count: 0
                    edited_at:
                    favourited: false
                    reblogged: false
                    muted: false
                    bookmarked: true
                    content: "<p>Lorem ipsum dolor sit amet</p>"
                    filtered: []
                    reblog:
                    application:
                    account:
                      id: '109344988652491854'
                      username: michal_volkman116
                      acct: michal_volkman116
                      display_name: ''
                      locked: false
                      bot: false
                      discoverable: true
                      group: false
                      created_at: '2022-11-15T00:00:00.000Z'
                      note: ''
                      url: https://cb6e6126.ngrok.io/@michal_volkman116
                      avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      header: https://cb6e6126.ngrok.io/headers/original/missing.png
                      header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                      followers_count: 1
                      following_count: 0
                      statuses_count: 1
                      last_status_at: '2022-11-15'
                      noindex: false
                      emojis: []
                      fields: []
                    media_attachments: []
                    mentions: []
                    tags: []
                    emojis: []
                    card:
                    poll:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Status"
  "/api/v1/conversations/{id}/read":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: read conversation
      tags:
      - Api
      - V1
      - Conversations
      operationId: v1ConversationsReadConversation
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/conversations":
    get:
      summary: list conversations
      tags:
      - Api
      - V1
      - Conversations
      operationId: v1ConversationsListConversation
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/conversations/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    delete:
      summary: delete conversation
      tags:
      - Api
      - V1
      - Conversations
      operationId: v1ConversationsDeleteConversation
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/custom_emojis":
    get:
      summary: list custom_emojis
      tags:
      - Api
      - V1
      - CustomEmojis
      operationId: v1CustomemojisListCustomEmoji
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/directory":
    get:
      summary: show directory
      tags:
      - Api
      - V1
      - Directories
      operationId: v1DirectoriesShowDirectory
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109344988681312871'
                    username: sydney_mraz121
                    acct: sydney_mraz121
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-15T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@sydney_mraz121
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
  "/api/v1/domain_blocks":
    get:
      summary: show domain_block
      tags:
      - Api
      - V1
      - DomainBlocks
      operationId: v1DomainblocksShowDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
    delete:
      summary: delete domain_block
      tags:
      - Api
      - V1
      - DomainBlocks
      operationId: v1DomainblocksDeleteDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
    post:
      summary: create domain_block
      tags:
      - Api
      - V1
      - DomainBlocks
      operationId: v1DomainblocksCreateDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: Domain can''t be blank'
  "/api/v1/emails/confirmations":
    post:
      summary: create confirmation
      tags:
      - Api
      - V1
      - Emails
      - Confirmations
      operationId: v1EmailsConfirmationsCreateConfirmation
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This method is only available while the e-mail is awaiting
                      confirmation
  "/api/v1/endorsements":
    get:
      summary: list endorsements
      tags:
      - Api
      - V1
      - Endorsements
      operationId: v1EndorsementsListEndorsement
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/favourites":
    get:
      summary: list favourites
      tags:
      - Api
      - V1
      - Favourites
      operationId: v1FavouritesListFavourite
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/featured_tags/suggestions":
    get:
      summary: list suggestions
      tags:
      - Api
      - V1
      - FeaturedTags
      - Suggestions
      operationId: v1FeaturedtagsSuggestionsListSuggestion
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/featured_tags":
    get:
      summary: list featured_tags
      tags:
      - Api
      - V1
      - FeaturedTags
      operationId: v1FeaturedtagsListFeaturedTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
    post:
      summary: create featured_tag
      tags:
      - Api
      - V1
      - FeaturedTags
      operationId: v1FeaturedtagsCreateFeaturedTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/featured_tags/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    delete:
      summary: delete featured_tag
      tags:
      - Api
      - V1
      - FeaturedTags
      operationId: v1FeaturedtagsDeleteFeaturedTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/filters":
    get:
      summary: list filters
      tags:
      - Api
      - V1
      - Filters
      operationId: v1FiltersListFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
    post:
      summary: create filter
      tags:
      - Api
      - V1
      - Filters
      operationId: v1FiltersCreateFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: Title can''t be blank, Context can''t
                      be blank, Context None or invalid context supplied'
  "/api/v1/filters/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show filter
      tags:
      - Api
      - V1
      - Filters
      operationId: v1FiltersShowFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update filter
      tags:
      - Api
      - V1
      - Filters
      operationId: v1FiltersUpdateFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update filter
      tags:
      - Api
      - V1
      - Filters
      operationId: v1FiltersUpdateFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete filter
      tags:
      - Api
      - V1
      - Filters
      operationId: v1FiltersDeleteFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/follow_requests/{id}/authorize":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: authorize follow_request
      tags:
      - Api
      - V1
      - FollowRequests
      operationId: v1FollowrequestsAuthorizeFollowRequest
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/follow_requests/{id}/reject":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: reject follow_request
      tags:
      - Api
      - V1
      - FollowRequests
      operationId: v1FollowrequestsRejectFollowRequest
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/follow_requests":
    get:
      summary: list follow_requests
      tags:
      - Api
      - V1
      - FollowRequests
      operationId: v1FollowrequestsListFollowRequest
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/followed_tags":
    get:
      summary: list followed_tags
      tags:
      - Api
      - V1
      - FollowedTags
      operationId: v1FollowedtagsListFollowedTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/instance/activity":
    get:
      summary: show activity
      tags:
      - Api
      - V1
      - Instances
      - Activity
      operationId: v1InstancesActivityShowActivity
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - week: '1668472118'
                    statuses: '0'
                    logins: '1'
                    registrations: '0'
                  - week: '1667867318'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1667262518'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1666657718'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1666052918'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1665448118'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1664843318'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1664238518'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1663633718'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1663028918'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1662424118'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1661819318'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
  "/api/v1/instance/domain_blocks":
    get:
      summary: list domain_blocks
      tags:
      - Api
      - V1
      - Instances
      - DomainBlocks
      operationId: v1InstancesDomainblocksListDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/instance/extended_description":
    get:
      summary: show extended_description
      tags:
      - Api
      - V1
      - Instances
      - ExtendedDescriptions
      operationId: v1InstancesExtendeddescriptionsShowExtendedDescription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    updated_at:
                    content: ''
  "/api/v1/instance/peers":
    get:
      summary: list peers
      tags:
      - Api
      - V1
      - Instances
      - Peers
      operationId: v1InstancesPeersListPeer
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/instance/privacy_policy":
    get:
      summary: show privacy_policy
      tags:
      - Api
      - V1
      - Instances
      - PrivacyPolicies
      operationId: v1InstancesPrivacypoliciesShowPrivacyPolicy
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    updated_at: '2022-10-07T00:00:00+00:00'
                    content: |
                      <p>This privacy policy describes how cb6e6126.ngrok.io (&quot;cb6e6126.ngrok.io&quot;, &quot;we&quot;, &quot;us&quot;) collects, protects and uses the personally identifiable information you may provide through the cb6e6126.ngrok.io website or its API. The policy also describes the choices available to you regarding our use of your personal information and how you can access and update this information. This policy does not apply to the practices of companies that cb6e6126.ngrok.io does not own or control, or to individuals that cb6e6126.ngrok.io does not employ or manage.</p>

                      <h1>What information do we collect?</h1>

                      <ul>
                      <li><strong>Basic account information</strong>: If you register on this server, you may be asked to enter a username, an e-mail address and a password. You may also enter additional profile information such as a display name and biography, and upload a profile picture and header image. The username, display name, biography, profile picture and header image are always listed publicly.</li>
                      <li><strong>Posts, following and other public information</strong>: The list of people you follow is listed publicly, the same is true for your followers. When you submit a message, the date and time is stored as well as the application you submitted the message from. Messages may contain media attachments, such as pictures and videos. Public and unlisted posts are available publicly. When you feature a post on your profile, that is also publicly available information. Your posts are delivered to your followers, in some cases it means they are delivered to different servers and copies are stored there. When you delete posts, this is likewise delivered to your followers. The action of reblogging or favouriting another post is always public.</li>
                      <li><strong>Direct and followers-only posts</strong>: All posts are stored and processed on the server. Followers-only posts are delivered to your followers and users who are mentioned in them, and direct posts are delivered only to users mentioned in them. In some cases it means they are delivered to different servers and copies are stored there. We make a good faith effort to limit the access to those posts only to authorized persons, but other servers may fail to do so. Therefore it&#39;s important to review servers your followers belong to. You may toggle an option to approve and reject new followers manually in the settings. <strong>Please keep in mind that the operators of the server and any receiving server may view such messages</strong>, and that recipients may screenshot, copy or otherwise re-share them. <strong>Do not share any sensitive information over Mastodon.</strong></li>
                      <li><strong>IPs and other metadata</strong>: When you log in, we record the IP address you log in from, as well as the name of your browser application. All the logged in sessions are available for your review and revocation in the settings. The latest IP address used is stored for up to 12 months. We also may retain server logs which include the IP address of every request to our server.</li>
                      </ul>

                      <h1>What do we use your information for?</h1>

                      <p>Any of the information we collect from you may be used in the following ways:</p>

                      <ul>
                      <li>To provide the core functionality of Mastodon. You can only interact with other people&#39;s content and post your own content when you are logged in. For example, you may follow other people to view their combined posts in your own personalized home timeline.</li>
                      <li>To aid moderation of the community, for example comparing your IP address with other known ones to determine ban evasion or other violations.</li>
                      <li>The email address you provide may be used to send you information, notifications about other people interacting with your content or sending you messages, and to respond to inquiries, and/or other requests or questions.</li>
                      </ul>

                      <h1>How do we protect your information?</h1>

                      <p>We implement a variety of security measures to maintain the safety of your personal information when you enter, submit, or access your personal information. Among other things, your browser session, as well as the traffic between your applications and the API, are secured with SSL, and your password is hashed using a strong one-way algorithm. You may enable two-factor authentication to further secure access to your account.</p>

                      <h1>What is our data retention policy?</h1>

                      <p>We will make a good faith effort to:</p>

                      <ul>
                      <li>Retain server logs containing the IP address of all requests to this server, in so far as such logs are kept, no more than 90 days.</li>
                      <li>Retain the IP addresses associated with registered users no more than 12 months.</li>
                      </ul>

                      <p>You can request and download an archive of your content, including your posts, media attachments, profile picture, and header image.</p>

                      <p>You may irreversibly delete your account at any time.</p>

                      <h1>Do we use cookies?</h1>

                      <p>Yes. Cookies are small files that a site or its service provider transfers to your computer&#39;s hard drive through your Web browser (if you allow). These cookies enable the site to recognize your browser and, if you have a registered account, associate it with your registered account.</p>

                      <p>We use cookies to understand and save your preferences for future visits.</p>

                      <h1>Do we disclose any information to outside parties?</h1>

                      <p>We do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. This does not include trusted third parties who assist us in operating our site, conducting our business, or servicing you, so long as those parties agree to keep this information confidential. We may also release your information when we believe release is appropriate to comply with the law, enforce our site policies, or protect ours or others rights, property, or safety.</p>

                      <p>Your public content may be downloaded by other servers in the network. Your public and followers-only posts are delivered to the servers where your followers reside, and direct messages are delivered to the servers of the recipients, in so far as those followers or recipients reside on a different server than this.</p>

                      <p>When you authorize an application to use your account, depending on the scope of permissions you approve, it may access your public profile information, your following list, your followers, your lists, all your posts, and your favourites. Applications can never access your e-mail address or password.</p>

                      <h1>Site usage by children</h1>

                      <p>If this server is in the EU or the EEA: Our site, products and services are all directed to people who are at least 16 years old. If you are under the age of 16, per the requirements of the GDPR (General Data Protection Regulation) do not use this site.</p>

                      <p>If this server is in the USA: Our site, products and services are all directed to people who are at least 13 years old. If you are under the age of 13, per the requirements of COPPA (Children&#39;s Online Privacy Protection Act) do not use this site.</p>

                      <p>Law requirements can be different if this server is in another jurisdiction.</p>

                      <hr>

                      <p>This document is CC-BY-SA. Originally adapted from the <a href="https://github.com/discourse/discourse">Discourse privacy policy</a>.</p>
  "/api/v1/instance/rules":
    get:
      summary: list rules
      tags:
      - Api
      - V1
      - Instances
      - Rules
      operationId: v1InstancesRulesListRule
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/instance":
    get:
      summary: show instance
      tags:
      - Api
      - V1
      - Instances
      operationId: v1InstancesShowInstance
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    uri: cb6e6126.ngrok.io
                    title: Mastodon
                    short_description: ''
                    description: ''
                    email: ''
                    version: 4.0.1
                    urls:
                      streaming_api: ws://localhost:4000
                    stats:
                      user_count: 1
                      status_count: 0
                      domain_count: 0
                    thumbnail: https://cb6e6126.ngrok.io/packs-test/media/images/preview-6399aebd96ccf025654e2977454f168f.png
                    languages:
                    - en
                    registrations: true
                    approval_required: false
                    invites_enabled: true
                    configuration:
                      accounts:
                        max_featured_tags: 10
                      statuses:
                        max_characters: 500
                        max_media_attachments: 4
                        characters_reserved_per_url: 23
                      media_attachments:
                        supported_mime_types:
                        - image/jpeg
                        - image/png
                        - image/gif
                        - image/heic
                        - image/heif
                        - image/webp
                        - image/avif
                        - video/webm
                        - video/mp4
                        - video/quicktime
                        - video/ogg
                        - audio/wave
                        - audio/wav
                        - audio/x-wav
                        - audio/x-pn-wave
                        - audio/vnd.wave
                        - audio/ogg
                        - audio/vorbis
                        - audio/mpeg
                        - audio/mp3
                        - audio/webm
                        - audio/flac
                        - audio/aac
                        - audio/m4a
                        - audio/x-m4a
                        - audio/mp4
                        - audio/3gpp
                        - video/x-ms-asf
                        image_size_limit: 10485760
                        image_matrix_limit: 16777216
                        video_size_limit: 41943040
                        video_frame_rate_limit: 60
                        video_matrix_limit: 2304000
                      polls:
                        max_options: 4
                        max_characters_per_option: 50
                        min_expiration: 300
                        max_expiration: 2629746
                    contact_account:
                    rules: []
  "/api/v1/lists/{list_id}/accounts":
    parameters:
    - name: list_id
      in: path
      description: list_id
      required: true
      schema:
        type: string
    get:
      summary: show account
      tags:
      - Api
      - V1
      - Lists
      - Accounts
      operationId: v1ListsAccountsShowAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete account
      tags:
      - Api
      - V1
      - Lists
      - Accounts
      operationId: v1ListsAccountsDeleteAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    post:
      summary: create account
      tags:
      - Api
      - V1
      - Lists
      - Accounts
      operationId: v1ListsAccountsCreateAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/lists":
    get:
      summary: list lists
      tags:
      - Api
      - V1
      - Lists
      operationId: v1ListsListList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
    post:
      summary: create list
      tags:
      - Api
      - V1
      - Lists
      operationId: v1ListsCreateList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: Title can''t be blank'
  "/api/v1/lists/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show list
      tags:
      - Api
      - V1
      - Lists
      operationId: v1ListsShowList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update list
      tags:
      - Api
      - V1
      - Lists
      operationId: v1ListsUpdateList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update list
      tags:
      - Api
      - V1
      - Lists
      operationId: v1ListsUpdateList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete list
      tags:
      - Api
      - V1
      - Lists
      operationId: v1ListsDeleteList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/markers":
    get:
      summary: list markers
      tags:
      - Api
      - V1
      - Markers
      operationId: v1MarkersListMarker
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
    post:
      summary: create marker
      tags:
      - Api
      - V1
      - Markers
      operationId: v1MarkersCreateMarker
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
  "/api/v1/media":
    post:
      summary: create medium
      tags:
      - Api
      - V1
      - Media
      operationId: v1MediaCreateMedium
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: File can''t be blank'
  "/api/v1/media/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show medium
      tags:
      - Api
      - V1
      - Media
      operationId: v1MediaShowMedium
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update medium
      tags:
      - Api
      - V1
      - Media
      operationId: v1MediaUpdateMedium
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update medium
      tags:
      - Api
      - V1
      - Media
      operationId: v1MediaUpdateMedium
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/mutes":
    get:
      summary: list mutes
      tags:
      - Api
      - V1
      - Mutes
      operationId: v1MutesListMute
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/notifications/clear":
    post:
      summary: clear notification
      tags:
      - Api
      - V1
      - Notifications
      operationId: v1NotificationsClearNotification
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
  "/api/v1/notifications/{id}/dismiss":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: dismiss notification
      tags:
      - Api
      - V1
      - Notifications
      operationId: v1NotificationsDismissNotification
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/notifications":
    get:
      summary: list notifications
      tags:
      - Api
      - V1
      - Notifications
      operationId: v1NotificationsListNotification
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/notifications/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show notification
      tags:
      - Api
      - V1
      - Notifications
      operationId: v1NotificationsShowNotification
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/polls/{poll_id}/votes":
    parameters:
    - name: poll_id
      in: path
      description: poll_id
      required: true
      schema:
        type: string
    post:
      summary: create vote
      tags:
      - Api
      - V1
      - Polls
      - Votes
      operationId: v1PollsVotesCreateVote
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/polls":
    post:
      summary: create poll
      tags:
      - Api
      - V1
      - Polls
      operationId: v1PollsCreatePoll
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/polls/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show poll
      tags:
      - Api
      - V1
      - Polls
      operationId: v1PollsShowPoll
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/preferences":
    get:
      summary: list preferences
      tags:
      - Api
      - V1
      - Preferences
      operationId: v1PreferencesListPreference
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    posting:default:visibility: public
                    posting:default:sensitive: false
                    posting:default:language: en
                    reading:expand:media: default
                    reading:expand:spoilers: false
  "/api/v1/push/subscription":
    get:
      summary: show subscription
      tags:
      - Api
      - V1
      - Push
      - Subscriptions
      operationId: v1PushSubscriptionsShowSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Not Found
    patch:
      summary: update subscription
      tags:
      - Api
      - V1
      - Push
      - Subscriptions
      operationId: v1PushSubscriptionsUpdateSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Not Found
    put:
      summary: update subscription
      tags:
      - Api
      - V1
      - Push
      - Subscriptions
      operationId: v1PushSubscriptionsUpdateSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Not Found
    delete:
      summary: delete subscription
      tags:
      - Api
      - V1
      - Push
      - Subscriptions
      operationId: v1PushSubscriptionsDeleteSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
    post:
      summary: create subscription
      tags:
      - Api
      - V1
      - Push
      - Subscriptions
      operationId: v1PushSubscriptionsCreateSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: |-
                      param is missing or the value is empty: subscription
                      Did you mean?  subscription
                                     action
                                     controller
  "/api/v1/reports":
    post:
      summary: create report
      tags:
      - Api
      - V1
      - Reports
      operationId: v1ReportsCreateReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '31'
                    action_taken: false
                    action_taken_at:
                    category: other
                    comment: reasons
                    forwarded: false
                    created_at: '2022-11-15T00:28:40.922Z'
                    status_ids:
                    - '109344988912307390'
                    rule_ids:
                    target_account:
                      id: '109344988912331554'
                      username: len_wyman178
                      acct: len_wyman178
                      display_name: ''
                      locked: false
                      bot: false
                      discoverable: true
                      group: false
                      created_at: '2022-11-15T00:00:00.000Z'
                      note: ''
                      url: https://cb6e6126.ngrok.io/@len_wyman178
                      avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      header: https://cb6e6126.ngrok.io/headers/original/missing.png
                      header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                      followers_count: 0
                      following_count: 0
                      statuses_count: 1
                      last_status_at: '2022-11-15'
                      noindex: false
                      emojis: []
                      fields: []
              schema:
                type: object
                "$ref": "#/components/schemas/Report"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status_ids:
                  type: array
                  items:
                    type: integer
                account_id:
                  type: integer
                comment:
                  type: string
                category:
                  type: string
                  nullable: true
                rule_ids:
                  type: array
                  items:
                    type: string
                  nullable: true
                forward:
                  type: boolean
                  nullable: true
              required:
              - status_ids
              - account_id
  "/api/v1/scheduled_statuses":
    get:
      summary: list scheduled_statuses
      tags:
      - Api
      - V1
      - ScheduledStatuses
      operationId: v1ScheduledstatusesListScheduledStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/scheduled_statuses/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show scheduled_status
      tags:
      - Api
      - V1
      - ScheduledStatuses
      operationId: v1ScheduledstatusesShowScheduledStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update scheduled_status
      tags:
      - Api
      - V1
      - ScheduledStatuses
      operationId: v1ScheduledstatusesUpdateScheduledStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update scheduled_status
      tags:
      - Api
      - V1
      - ScheduledStatuses
      operationId: v1ScheduledstatusesUpdateScheduledStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete scheduled_status
      tags:
      - Api
      - V1
      - ScheduledStatuses
      operationId: v1ScheduledstatusesDeleteScheduledStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/bookmark":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: create bookmark
      tags:
      - Api
      - V1
      - Statuses
      - Bookmarks
      operationId: v1StatusesBookmarksCreateBookmark
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/unbookmark":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: delete bookmark
      tags:
      - Api
      - V1
      - Statuses
      - Bookmarks
      operationId: v1StatusesBookmarksDeleteBookmark
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/favourited_by":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    get:
      summary: list favourited_by_accounts
      tags:
      - Api
      - V1
      - Statuses
      - FavouritedByAccounts
      operationId: v1StatusesFavouritedbyaccountsListFavouritedByAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/favourite":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: create favourite
      tags:
      - Api
      - V1
      - Statuses
      - Favourites
      operationId: v1StatusesFavouritesCreateFavourite
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/unfavourite":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: delete favourite
      tags:
      - Api
      - V1
      - Statuses
      - Favourites
      operationId: v1StatusesFavouritesDeleteFavourite
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/history":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    get:
      summary: show history
      tags:
      - Api
      - V1
      - Statuses
      - Histories
      operationId: v1StatusesHistoriesShowHistory
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/mute":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: create mute
      tags:
      - Api
      - V1
      - Statuses
      - Mutes
      operationId: v1StatusesMutesCreateMute
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/unmute":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: delete mute
      tags:
      - Api
      - V1
      - Statuses
      - Mutes
      operationId: v1StatusesMutesDeleteMute
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/pin":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: create pin
      tags:
      - Api
      - V1
      - Statuses
      - Pins
      operationId: v1StatusesPinsCreatePin
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/unpin":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: delete pin
      tags:
      - Api
      - V1
      - Statuses
      - Pins
      operationId: v1StatusesPinsDeletePin
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/reblogged_by":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    get:
      summary: list reblogged_by_accounts
      tags:
      - Api
      - V1
      - Statuses
      - RebloggedByAccounts
      operationId: v1StatusesRebloggedbyaccountsListRebloggedByAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/reblog":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: create reblog
      tags:
      - Api
      - V1
      - Statuses
      - Reblogs
      operationId: v1StatusesReblogsCreateReblog
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/unreblog":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: delete reblog
      tags:
      - Api
      - V1
      - Statuses
      - Reblogs
      operationId: v1StatusesReblogsDeleteReblog
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/source":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    get:
      summary: show source
      tags:
      - Api
      - V1
      - Statuses
      - Sources
      operationId: v1StatusesSourcesShowSource
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/translate":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: create translation
      tags:
      - Api
      - V1
      - Statuses
      - Translations
      operationId: v1StatusesTranslationsCreateTranslation
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{id}/context":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: context status
      tags:
      - Api
      - V1
      - Statuses
      operationId: v1StatusesContextStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses":
    post:
      summary: create status
      tags:
      - Api
      - V1
      - Statuses
      operationId: v1StatusesCreateStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: Text can''t be blank'
  "/api/v1/statuses/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show status
      tags:
      - Api
      - V1
      - Statuses
      operationId: v1StatusesShowStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update status
      tags:
      - Api
      - V1
      - Statuses
      operationId: v1StatusesUpdateStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update status
      tags:
      - Api
      - V1
      - Statuses
      operationId: v1StatusesUpdateStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete status
      tags:
      - Api
      - V1
      - Statuses
      operationId: v1StatusesDeleteStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/streaming":
    get:
      summary: list streamings
      tags:
      - Api
      - V1
      - Streaming
      operationId: v1StreamingListStreaming
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/suggestions":
    get:
      summary: list suggestions
      tags:
      - Api
      - V1
      - Suggestions
      operationId: v1SuggestionsListSuggestion
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/suggestions/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    delete:
      summary: delete suggestion
      tags:
      - Api
      - V1
      - Suggestions
      operationId: v1SuggestionsDeleteSuggestion
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
  "/api/v1/tags/{id}/follow":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: follow tag
      tags:
      - Api
      - V1
      - Tags
      operationId: v1TagsFollowTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Not Found
  "/api/v1/tags/{id}/unfollow":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unfollow tag
      tags:
      - Api
      - V1
      - Tags
      operationId: v1TagsUnfollowTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Not Found
  "/api/v1/tags/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show tag
      tags:
      - Api
      - V1
      - Tags
      operationId: v1TagsShowTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Not Found
  "/api/v1/timelines/home":
    get:
      summary: show home
      tags:
      - Api
      - V1
      - Timelines
      - Home
      operationId: v1TimelinesHomeShowHome
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/timelines/list/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show list
      tags:
      - Api
      - V1
      - Timelines
      - List
      operationId: v1TimelinesListShowList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/timelines/public":
    get:
      summary: show public
      tags:
      - Api
      - V1
      - Timelines
      - Public
      operationId: v1TimelinesPublicShowPublic
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/timelines/tag/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show tag
      tags:
      - Api
      - V1
      - Timelines
      - Tag
      operationId: v1TimelinesTagShowTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/trends/links":
    get:
      summary: list links
      tags:
      - Api
      - V1
      - Trends
      - Links
      operationId: v1TrendsLinksListLink
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/trends/statuses":
    get:
      summary: list statuses
      tags:
      - Api
      - V1
      - Trends
      - Statuses
      operationId: v1TrendsStatusesListStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/trends":
    get:
      summary: list tags
      tags:
      - Api
      - V1
      - Trends
      - Tags
      operationId: v1TrendsTagsListTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/trends/tags":
    get:
      summary: list tags
      tags:
      - Api
      - V1
      - Trends
      - Tags
      operationId: v1TrendsTagsListTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v2/admin/accounts":
    get:
      summary: list accounts
      tags:
      - Api
      - V2
      - Admin
      - Accounts
      operationId: v2AdminAccountsListAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v2/filters/{filter_id}/keywords":
    parameters:
    - name: filter_id
      in: path
      description: filter_id
      required: true
      schema:
        type: string
    get:
      summary: list keywords
      tags:
      - Api
      - V2
      - Filters
      - Keywords
      operationId: v2FiltersKeywordsListKeyword
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    post:
      summary: create keyword
      tags:
      - Api
      - V2
      - Filters
      - Keywords
      operationId: v2FiltersKeywordsCreateKeyword
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v2/filters/keywords/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show keyword
      tags:
      - Api
      - V2
      - Filters
      - Keywords
      operationId: v2FiltersKeywordsShowKeyword
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update keyword
      tags:
      - Api
      - V2
      - Filters
      - Keywords
      operationId: v2FiltersKeywordsUpdateKeyword
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update keyword
      tags:
      - Api
      - V2
      - Filters
      - Keywords
      operationId: v2FiltersKeywordsUpdateKeyword
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete keyword
      tags:
      - Api
      - V2
      - Filters
      - Keywords
      operationId: v2FiltersKeywordsDeleteKeyword
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v2/filters/{filter_id}/statuses":
    parameters:
    - name: filter_id
      in: path
      description: filter_id
      required: true
      schema:
        type: string
    get:
      summary: list statuses
      tags:
      - Api
      - V2
      - Filters
      - Statuses
      operationId: v2FiltersStatusesListStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    post:
      summary: create status
      tags:
      - Api
      - V2
      - Filters
      - Statuses
      operationId: v2FiltersStatusesCreateStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v2/filters/statuses/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show status
      tags:
      - Api
      - V2
      - Filters
      - Statuses
      operationId: v2FiltersStatusesShowStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete status
      tags:
      - Api
      - V2
      - Filters
      - Statuses
      operationId: v2FiltersStatusesDeleteStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v2/filters":
    get:
      summary: list filters
      tags:
      - Api
      - V2
      - Filters
      operationId: v2FiltersListFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
    post:
      summary: create filter
      tags:
      - Api
      - V2
      - Filters
      operationId: v2FiltersCreateFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: Title can''t be blank, Context can''t
                      be blank, Context None or invalid context supplied'
  "/api/v2/filters/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show filter
      tags:
      - Api
      - V2
      - Filters
      operationId: v2FiltersShowFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update filter
      tags:
      - Api
      - V2
      - Filters
      operationId: v2FiltersUpdateFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update filter
      tags:
      - Api
      - V2
      - Filters
      operationId: v2FiltersUpdateFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete filter
      tags:
      - Api
      - V2
      - Filters
      operationId: v2FiltersDeleteFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v2/instance":
    get:
      summary: show instance
      tags:
      - Api
      - V2
      - Instances
      operationId: v2InstancesShowInstance
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    domain: cb6e6126.ngrok.io
                    title: Mastodon
                    version: 4.0.1
                    source_url: https://github.com/mastodon/mastodon
                    description: ''
                    usage:
                      users:
                        active_month: 0
                    thumbnail:
                      url: https://cb6e6126.ngrok.io/packs-test/media/images/preview-6399aebd96ccf025654e2977454f168f.png
                    languages:
                    - en
                    configuration:
                      urls:
                        streaming: ws://localhost:4000
                      accounts:
                        max_featured_tags: 10
                      statuses:
                        max_characters: 500
                        max_media_attachments: 4
                        characters_reserved_per_url: 23
                      media_attachments:
                        supported_mime_types:
                        - image/jpeg
                        - image/png
                        - image/gif
                        - image/heic
                        - image/heif
                        - image/webp
                        - image/avif
                        - video/webm
                        - video/mp4
                        - video/quicktime
                        - video/ogg
                        - audio/wave
                        - audio/wav
                        - audio/x-wav
                        - audio/x-pn-wave
                        - audio/vnd.wave
                        - audio/ogg
                        - audio/vorbis
                        - audio/mpeg
                        - audio/mp3
                        - audio/webm
                        - audio/flac
                        - audio/aac
                        - audio/m4a
                        - audio/x-m4a
                        - audio/mp4
                        - audio/3gpp
                        - video/x-ms-asf
                        image_size_limit: 10485760
                        image_matrix_limit: 16777216
                        video_size_limit: 41943040
                        video_frame_rate_limit: 60
                        video_matrix_limit: 2304000
                      polls:
                        max_options: 4
                        max_characters_per_option: 50
                        min_expiration: 300
                        max_expiration: 2629746
                      translation:
                        enabled: false
                    registrations:
                      enabled: true
                      approval_required: false
                      message:
                    contact:
                      email: ''
                      account:
                    rules: []
  "/api/v2/media":
    post:
      summary: create medium
      tags:
      - Api
      - V2
      - Media
      operationId: v2MediaCreateMedium
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: File can''t be blank'
  "/api/v2/search":
    get:
      summary: list searches
      tags:
      - Api
      - V2
      - Search
      operationId: v2SearchListSearch
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: |-
                      param is missing or the value is empty: q
                      Did you mean?  search
                                     action
                                     controller
  "/api/v2/suggestions":
    get:
      summary: list suggestions
      tags:
      - Api
      - V2
      - Suggestions
      operationId: v2SuggestionsListSuggestion
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/web/embed":
    post:
      summary: create embed
      tags:
      - Api
      - Web
      - Embeds
      operationId: webEmbedsCreateEmbed
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/web/push_subscriptions/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    put:
      summary: update push_subscription
      tags:
      - Api
      - Web
      - PushSubscriptions
      operationId: webPushsubscriptionsUpdatePushSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/web/push_subscriptions":
    post:
      summary: create push_subscription
      tags:
      - Api
      - Web
      - PushSubscriptions
      operationId: webPushsubscriptionsCreatePushSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/web/settings":
    patch:
      summary: update setting
      tags:
      - Api
      - Web
      - Settings
      operationId: webSettingsUpdateSetting
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
    put:
      summary: update setting
      tags:
      - Api
      - Web
      - Settings
      operationId: webSettingsUpdateSetting
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
