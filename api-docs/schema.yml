---
openapi: 3.1.0
info:
  title: API V1
  version: v1
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
security:
- bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "/oauth/authorize"
          tokenUrl: "/oauth/token"
          scopes:
            read: |
              Grants access to read data.
              Requesting read will also grant child scopes shown in the left column of the table below.
            write: |
              Grants access to write data.
              Requesting write will also grant child scopes shown in the right column of the table below.
            follow: "Grants access to manage relationships.  \nRequesting follow will
              also grant the following child scopes, shown in bold in the table:\n\nread:blocks,
              write:blocks\nread:follows, write:follows\nread:mutes, write:mutes\n"
            push: |
              Grants access to [Web Push API subscriptions](https://docs.joinmastodon.org/methods/notifications/push/).
              Added in Mastodon 2.4.0.
            admin:read: |
              - admin:read:accounts
              - admin:read:reports
              Used for moderation API. Added in Mastodon 2.9.1.
            admin:write: |
              - admin:write:accounts
              - admin:write:reports
              Used for moderation API. Added in Mastodon 2.9.1.
            read:accounts: Read accounts
            write:accounts: Write accounts
            read:blocks: Read blocks
            write:blocks: Write blocks
            read:bookmarks: Read bookmarks
            write:bookmarks: Write bookmarks
            write:conversations: Write conversations
            read:favourites: Read favourites
            write:favourites: Write favourites
            read:filters: Read filters
            write:filters: Write filters
            read:follows: Read follows
            write:follows: Write follows
            read:lists: Read lists
            write:lists: Write lists
            write:media: Write media
            read:mutes: Read mutes
            write:mutes: Write mutes
            read:notifications: Read notifications
            write:notifications: Write notifications
            write:reports: Write reports
            read:search: Read search
            read:statuses: Read statuses
            write:statuses: Write statuses
            admin:read:accounts: Admin read accounts
            admin:write:accounts: Admin write accounts
            admin:read:reports: Admin read reports
            admin:write:reports: Admin write reports
  schemas:
    Admin::Account:
      type: object
      description: Admin-level information about a given account.
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        username:
          type: string
          description: The username of the account, not including domain.
        domain:
          description: The domain of the account, if it is remote.
          nullable: true
          type: string
        created_at:
          "$ref": "#/components/schemas/DateTime"
        email:
          description: The email address associated with the account.
          type: string
        ip:
          description: The IP address last used to login to this account.
          type: string
          nullable: true
        ips:
          description: All known IP addresses associated with this account.
          type: array
          items:
            type: string
        locale:
          description: "The locale of the account.  \nISO 639 Part 1 two-letter language
            code\n"
          pattern: "[a-z]{2}"
          type: string
        invite_request:
          description: The reason given when requesting an invite (for instances that
            require manual approval of registrations)
          type: string
          nullable: true
        role:
          description: The current role of the account.
          "$ref": "#/components/schemas/Role"
        confirmed:
          description: Whether the account has confirmed their email address.
          type: boolean
        approved:
          description: Whether the account is currently approved.
          type: boolean
        disabled:
          description: Whether the account is currently disabled.
          type: boolean
        silenced:
          description: Whether the account is currently silenced.
          type: boolean
        suspended:
          description: Whether the account is currently suspended.
          type: boolean
        account:
          description: User-level information about the account.
          "$ref": "#/components/schemas/Account"
        created_by_application_id:
          description: The ID of the Application that created this account, if applicable.
          "$ref": "#/components/schemas/StringId"
        invited_by_account_id:
          description: The ID of the Account that invited this user, if applicable.
          "$ref": "#/components/schemas/StringId"
    Admin::CanonicalEmailBlock:
      description: Represents a canonical email block (hashed).
      type: object
      properties:
        id:
          description: The ID of the email block in the database.
          type: string
          example: '2'
        canonical_email_hash:
          description: The SHA256 hash of the canonical email address.
          type: string
          example: b344e55d11b3fc25d0d53194e0475838bf17e9be67ce3e6469956222d9a34f9c
    Admin::CohortData:
      description: Retention data for users who registered during the given period.
      type: object
      properties:
        date:
          description: The timestamp for the start of the bucket, at midnight.
          type: string
          format: datetime
        rate:
          description: The percentage rate of users who registered in the specified
            `period` and were active for the given `date` bucket.
          type: number
        value:
          description: How many users registered in the specified `period` and were
            active for the given `date` bucket.
          type: integer
    Admin::Cohort:
      description: Represents a retention metric.
      type: object
      properties:
        period:
          description: The timestamp for the start of the period, at midnight.
        frequency:
          description: |
            The size of the bucket for the returned data.
            - `'day'` : Daily buckets
            - `'month'` : Monthly buckets
          type: string
          enum:
          - day
          - month
        data:
          description: Retention data for users who registered during the given period.
          type: array
          items:
            "$ref": "#/components/schemas/Admin::CohortData"
    Admin::Dimension::Data:
      description: The data available for the requested dimension.
      type: object
      properties:
        key:
          description: The unique keystring for this data item.
          type: string
          example: postgresql
        human_key:
          description: A human-readable key for this data item.
          type: string
          example: PostgreSQL
        value:
          description: The value for this data item.
          type: string
          example: '14924935'
        unit:
          description: The units associated with this data item's value, if applicable.
          type: string
          example: bytes
        human_value:
          description: A human-readable formatted value for this data item.
          type: string
          example: 14.2 MB
    Admin::Dimension:
      description: Represents qualitative data about the server.
      type: object
      properties:
        key:
          description: The unique keystring for the requested dimension.
          type: string
          example: space_usage
        data:
          description: The data available for the requested dimension.
          type: array
          items:
            "$ref": "#/components/schemas/Admin::Dimension::Data"
    Admin::DomainAllow:
      description: Represents a domain allowed to federate.
      type: object
      properties:
        id:
          description: The ID of the DomainAllow in the database.
          "$ref": "#/components/schemas/StringId"
        domain:
          description: The domain that is allowed to federate.
          type: string
          example: mastodon.social
        created_at:
          description: When the domain was allowed to federate.
          "$ref": "#/components/schemas/DateTime"
    Admin::DomainBlock:
      description: Represents a domain limited from federating.
      type: object
      properties:
        id:
          description: The ID of the DomainBlock in the database.
          "$ref": "#/components/schemas/StringId"
        domain:
          description: The domain that is not allowed to federate.
          type: string
          example: example.com
        created_at:
          description: When the domain was blocked from federating.
          "$ref": "#/components/schemas/DateTime"
        severity:
          description: |
            The policy to be applied by this domain block.

            `silence` = Account statuses from this domain will be hidden by default
            `suspend` = All incoming data from this domain will be rejected
            `noop` = Do nothing. Allows for rejecting media or reports
          type: string
          enum:
          - silence
          - suspend
          - noop
        reject_media:
          description: Whether to reject media attachments from this domain
          type: boolean
        reject_reports:
          description: Whether to reject reports from this domain
          type: boolean
        private_comment:
          type: string
          nullable: true
        public_comment:
          type: string
          nullable: true
        obfuscate:
          description: Whether to obfuscate public displays of this domain block
          type: boolean
    Admin::EmailDomainBlock:
      description: Represents an email domain that cannot be used to sign up.
      type: object
      properties:
        id:
          description: The ID of the DomainBlock in the database.
          "$ref": "#/components/schemas/StringId"
        domain:
          description: The email domain that is not allowed to be used for signups.
          type: string
          example: foo.com
        created_at:
          description: When the email domain was disallowed from signups.
          "$ref": "#/components/schemas/DateTime"
        history:
          description: Usage statistics for given days (typically the past week).
          type: array
          items:
            type: object
            properties:
              day:
                description: UNIX timestamp on midnight of the given day.
                type: string
                pattern: "[0-9]+"
                example: '1668556800'
              accounts:
                description: The counted accounts signup attempts using that email
                  domain within that day.
                type: string
                pattern: "[0-9]+"
                example: '0'
              uses:
                description: The counted IP signup attempts of that email domain within
                  that day.
                type: string
                pattern: "[0-9]+"
                example: '0'
    Admin::Ip:
      description: Represents an IP address associated with a user.
      type: object
      properties:
        ip:
          description: The IP address.
          type: string
          example: 192.168.42.1
        used_at:
          description: The timestamp of when the IP address was last used for this
            account.
          "$ref": "#/components/schemas/DateTime"
    Admin::IpBlock:
      description: Represents an IP address range that cannot be used to sign up.
      type: object
      properties:
        id:
          description: The ID of the DomainBlock in the database.
          "$ref": "#/components/schemas/StringId"
        ip:
          description: The IP address range that is not allowed to federate.
          type: string
          example: 8.8.8.8/32
        severity:
          description: |
            The associated policy with this IP block.

            `sign_up_requires_approval` = Any signup from this IP range will create a pending account
            `sign_up_block` = Any signup from this IP range will be rejected
            `no_access` = Any activity from this IP range will be rejected entirely
          type: string
          enum:
          - sign_up_requires_approval
          - sign_up_block
          - no_access
        comment:
          description: The recorded reason for this IP block.
          type: string
        created_at:
          description: When the IP block was created.
          "$ref": "#/components/schemas/DateTime"
        expires_at:
          description: When the IP block will expire.
          nullable: true
          "$ref": "#/components/schemas/DateTime"
    Admin::Measure:
      description: Represents quantitative data about the server.
      type: object
      properties:
        key:
          description: The unique keystring for this data item.
          type: string
          example: instance_media_attachments
        unit:
          description: The units associated with this data item’s value, if applicable.
          type: string
          example: bytes
          nullable: true
        total:
          description: The value for this data item.
          type: string
          pattern: "[0-9]+"
          example: '14924935'
        human_value:
          description: A human-readable formatted value for this data item.
          type: string
          nullable: true
        previous_total:
          description: "The numeric total associated with the requested measure, in
            the previous period. \nPrevious period is calculated by subtracting the
            start_at and end_at dates, \nthen offsetting both start and end dates
            backwards by the length of the time period.\n"
          nullable: true
          type: string
          pattern: "[0-9]+"
        data:
          description: The data available for the requested measure, split into daily
            buckets.
          type: array
          items:
            type: object
            properties:
              date:
                description: Midnight on the requested day in the time period.
                "$ref": "#/components/schemas/DateTime"
              value:
                description: The numeric value for the requested measure.
                type: string
                pattern: "[0-9]+"
                example: '0'
    Admin::Report:
      description: Admin-level information about a filed report.
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        action_taken:
          description: Whether an action was taken to resolve this report.
          type: boolean
        action_taken_at:
          description: When an action was taken, if this report is currently resolved.
          "$ref": "#/components/schemas/DateTime"
          nullable: true
        category:
          description: |
            The category under which the report is classified.

            `spam` = Malicious, fake, or repetitive content
            `violation` = Violates one or more specific rules
            `other` = The default (catch-all) category
          type: string
          enum:
          - spam
          - violation
          - other
        comment:
          description: An optional reason for reporting.
          type: string
        forwarded:
          description: Whether a report was forwarded to a remote instance.
          type: boolean
        created_at:
          "$ref": "#/components/schemas/DateTime"
        updated_at:
          "$ref": "#/components/schemas/DateTime"
        account:
          description: The account which filed the report.
          "$ref": "#/components/schemas/Admin::Account"
        target_account:
          description: The account being reported.
          "$ref": "#/components/schemas/Admin::Account"
        assigned_account:
          description: The account of the moderator assigned to this report.
          "$ref": "#/components/schemas/Admin::Account"
          nullable: true
        action_taken_by_account:
          description: The account of the moderator who handled the report.
          "$ref": "#/components/schemas/Admin::Account"
          nullable: true
        statuses:
          description: Statuses attached to the report, for context.
          type: array
          items:
            "$ref": "#/components/schemas/Status"
        rules:
          description: Rules attached to the report, for context.
          type: array
          items:
            "$ref": "#/components/schemas/Rule"
    Account:
      description: 'Represents a user of Mastodon and their associated profile.

        '
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        username:
          type: string
          description: The username of the account, not including domain.
        acct:
          type: string
          example: bob@example.com
          description: "The Webfinger account URI. \nEqual to username for local users,
            or username@domain for remote users.\n"
        display_name:
          description: The display name to use for the profile.
          type: string
        note:
          type: string
          description: The profile's bio / description.
        fields:
          description: Additional metadata attached to a profile as name-value pairs.
          type: array
          items:
            "$ref": "#/components/schemas/AccountField"
        url:
          type: string
          description: The location of the user's profile page.
          nullable: true
        avatar:
          type: string
          description: An image icon that is shown next to statuses and in the profile.
        avatar_static:
          type: string
          description: "A static version of the `avatar`. \nEqual to `avatar` if its
            value is a static image; different if `avatar` is an animated GIF.\n"
        header:
          type: string
          description: An image banner that is shown above the profile and in profile
            cards.
        header_static:
          type: string
          description: "A static version of the `header`. \nEqual to `header` if its
            value is a static image; different if `header` is an animated GIF.\n"
        followers_count:
          type: integer
          description: The reported followers of this profile.
        following_count:
          type: integer
          description: The reported follows of this profile.
        statuses_count:
          type: integer
          description: How many statuses are attached to this account.
        source:
          "$ref": "#/components/schemas/Source"
        moved:
          description: 'Indicates that the profile is currently inactive and that
            its user has moved to a new account.

            '
          "$ref": "#/components/schemas/Account"
        emojis:
          description: "Custom emoji entities to be used when rendering the profile.
            \nIf none, an empty array will be returned.\n"
          type: array
          items:
            "$ref": "#/components/schemas/CustomEmoji"
        created_at:
          "$ref": "#/components/schemas/DateTime"
        last_status_at:
          type: string
          format: date
          example: '2022-11-13'
          nullable: true
          description: When the most recent status was posted.
        bot:
          type: boolean
          description: "A presentational flag.  \nIndicates that the account may perform
            automated actions, may not be monitored, or identifies as a robot.\n"
        suspended:
          type: boolean
        silenced:
          type: boolean
        noindex:
          type: boolean
        discoverable:
          type: boolean
          description: Whether the account has opted into discovery features such
            as the profile directory.
        locked:
          type: boolean
          nullable: true
          description: Whether the account manually approves follow requests.
        group:
          type: boolean
          nullable: true
      required:
      - id
      - username
      - acct
      - url
    AccountUpdateCredentialsParams:
      type: object
      properties:
        display_name:
          description: The display name to use for the profile.
          type: string
        note:
          type: string
          description: The profile's bio / description.
        locked:
          type: boolean
          nullable: true
          description: Whether the account manually approves follow requests.
        discoverable:
          type: boolean
          description: Whether the account has opted into discovery features such
            as the profile directory.
        bot:
          type: boolean
          description: "A presentational flag.  \nIndicates that the account may perform
            automated actions, may not be monitored, or identifies as a robot.\n"
        avatar:
          description: Avatar image encoded using multipart/form-data
          type: string
        header:
          description: Avatar image encoded using multipart/form-data
          type: string
        fields_attributes:
          type: array
          items:
            "$ref": "#/components/schemas/Field"
        source:
          "$ref": "#/components/schemas/SourceParam"
      example:
        display_name: Jane Doe
        note: The bio
        avatar: ''
        header: ''
        locked: false
        discoverable: true
        bot: false
        fields_attributes:
        - name: Location
          value: Nowhere
        - name: Occupation
          value: Sourcerer
        source:
          privacy: public
          sensitive: false
          language: en
    Application:
      description: Represents an application that interfaces with the REST API to
        access accounts or post statuses.
      type: object
      properties:
        name:
          type: string
          description: The name of your application.
        website:
          type: string
          description: The website associated with your application.
          nullable: true
        vapid_key:
          type: string
          description: 'Used for Push Streaming API. Returned with POST /api/v1/apps.
            Equivalent to WebPushSubscription#server_key

            '
        client_id:
          type: string
          description: Client ID key, to be used for obtaining OAuth tokens
          nullable: true
        client_secret:
          type: string
          description: Client secret key, to be used for obtaining OAuth tokens
          nullable: true
      required:
      - name
      - vapid_key
    CustomEmoji:
      description: Represents a custom emoji.
      type: object
      properties:
        shortcode:
          type: string
          description: The name of the custom emoji.
        url:
          type: string
          description: A link to the custom emoji.
        static_url:
          type: string
          nullable: true
          description: A link to a static copy of the custom emoji.
        visible_in_picker:
          type: boolean
          nullable: true
          description: Whether this Emoji should be visible in the picker or unlisted.
        category:
          type: string
          nullable: true
          description: Used for sorting custom emoji in the picker.
    DomainBlock:
      description: Represents a domain that is blocked by the instance.
      type: object
      properties:
        domain:
          type: string
          description: The domain which is blocked. This may be obfuscated or partially
            censored.
        digest:
          type: string
          description: The SHA256 hash digest of the domain string.
        severity:
          description: |
            The level to which the domain is blocked.

            `silence` = Users from this domain will be hidden from timelines, threads, and notifications (unless you follow the user).
            `suspend` = Incoming messages from this domain will be rejected and dropped entirely.
          type: string
          enum:
          - silence
          - suspend
        comment:
          type: string
          description: An optional reason for the domain block.
          nullable: true
      required:
      - domain
      - digest
      - severity
    Error:
      type: object
      properties:
        error:
          type: string
          description: The error message.
        error_description:
          type: string
          description: A longer description of the error, mainly provided with the
            OAuth API.
          nullable: true
      required:
      - error
    ExtendedDescription:
      type: object
      properties:
        content:
          type: string
          description: The rendered HTML content of the extended description.
        updated_at:
          "$ref": "#/components/schemas/DateTime"
      required:
      - content
      - updated_at
    FamiliarFollowers:
      type: object
      description: Represents a subset of your follows who also follow some other
        user.
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        accounts:
          description: Accounts you follow that also follow this account.
          type: array
          items:
            "$ref": "#/components/schemas/Account"
    Field:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      required:
      - name
      - value
    AccountField:
      allOf:
      - "$ref": "#/components/schemas/Field"
      - type: object
        properties:
          verified_at:
            type: string
      required:
      - name
      - value
    SourceParam:
      type: object
      properties:
        privacy:
          description: |
            The default post privacy to be used for new statuses.

            public = Public post
            unlisted = Unlisted post
            private = Followers-only post
            direct = Direct post
          type: string
          enum:
          - private
          - public
          - unlisted
          - direct
          nullable: true
        sensitive:
          description: Whether new statuses should be marked sensitive by default.
          type: boolean
          nullable: true
        language:
          description: The default posting language for new statuses.
          type: string
          pattern: "[a-z]{2}"
          nullable: true
    Source:
      description: "Represents display or publishing preferences of user's own account.
        \ \nReturned as an additional entity when verifying and updated credentials,
        as an attribute of Account.\n"
      allOf:
      - "$ref": "#/components/schemas/SourceParam"
      - type: object
        properties:
          note:
            description: Profile bio.
            type: string
          fields:
            description: Metadata about the account.
            type: array
            items:
              "$ref": "#/components/schemas/AccountField"
          follow_requests_count:
            description: The number of pending follow requests.
            type: integer
            nullable: true
    Credential:
      type: object
      properties:
        role:
          "$ref": "#/components/schemas/Role"
        source:
          "$ref": "#/components/schemas/Source"
    Context:
      description: Represents the tree around a given status. Used for reconstructing
        threads of statuses.
      type: object
      properties:
        ancestors:
          type: array
          description: Parents in the thread.
          items:
            "$ref": "#/components/schemas/Status"
        descendants:
          type: array
          description: Children in the thread.
          items:
            "$ref": "#/components/schemas/Status"
    Conversation:
      description: Represents a conversation with "direct message" visibility.
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        unread:
          description: Is the conversation currently marked as unread?
          type: boolean
        accounts:
          description: Participants in the conversation.
          type: array
          items:
            "$ref": "#/components/schemas/Account"
        last_status:
          nullable: true
          description: The last status in the conversation.
          "$ref": "#/components/schemas/Status"
    Role:
      description: Represents a custom user role that grants permissions.
      type: object
      properties:
        id:
          description: The ID of the Role in the database.
          type: integer
        name:
          description: The name of the role.
          type: string
        color:
          description: The hex code assigned to this role. If no hex code is assigned,
            the string will be empty.
          type: string
        position:
          description: An index for the role's position. The higher the position,
            the more priority the role has over other
          type: integer
        permissions:
          description: "A bitmask that represents the sum of all permissions granted
            to the role.\n\nTo determine the permissions available to a certain role,
            convert the permissions \nattribute to binary and compare from the least
            significant bit upwards. \nFor convenience (and to prevent the terms from
            growing too long), \npermissions will be presented below using hexadecimal
            values.\n\n- `0x1` : **Administrator**. Users with this permission bypass
            all permissions.\n- `0x2` : **Devops**. Allows users to access Sidekiq
            and pgHero dashboards.\n- `0x4` : **View Audit Log**. Allows users to
            see history of admin actions.\n- `0x8` : **View Dashboard**. Allows users
            to access the dashboard and various metrics.\n- `0x10` : **Manage Reports**.
            Allows users to review reports and perform moderation actions against
            them.\n- `0x20` : **Manage Federation**. Allows users to block or allow
            federation with other domains, and control deliverability.\n- `0x40` :
            **Manage Settings**. Allows users to change site settings.\n- `0x80` :
            **Manage Blocks**. Allows users to block e-mail providers and IP addresses.\n-
            `0x100` : **Manage Taxonomies**. Allows users to review trending content
            and update hashtag settings.\n- `0x200` : **Manage Appeals**. Allows users
            to review appeals against moderation actions.\n- `0x400` : **Manage Users**.
            Allows users to view other users' details and perform moderation actions
            against them.\n- `0x800` : **Manage Invites**. Allows users to browse
            and deactivate invite links.\n- `0x1000` : **Manage Rules**. Allows users
            to change server rules.\n- `0x2000` : **Manage Announcements**. Allows
            users to manage announcements on the server.\n- `0x4000` : **Manage Custom
            Emojis**. Allows users to manage custom emojis on the server.\n- `0x8000`
            : **Manage Webhooks**. Allows users to set up webhooks for administrative
            events.\n- `0x10000` : **Invite Users**. Allows users to invite new people
            to the server.\n- `0x20000` : **Manage Roles**. Allows users to manage
            and assign roles below theirs.\n- `0x40000` : **Manage User Access**.
            Allows users to disable other users' two-factor authentication, change
            their e-mail address, and reset their password.\n- `0x80000` : **Delete
            User Data**. Allows users to delete other users' data without delay.\n"
          type: integer
        highlighted:
          description: Whether the role is publicly visible as a badge on user profiles.
          type: boolean
        created_at:
          description: The date that the role was created.
          "$ref": "#/components/schemas/DateTime"
        updated_at:
          description: The date that the role was updated.
          "$ref": "#/components/schemas/DateTime"
    MediaAttachment:
      type: object
      description: Represents a file or media attachment that can be added to a status.
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        type:
          description: |
            The type of the attachment.
            `unknown` = unsupported or unrecognized file type
            `image` = Static image
            `gifv` = Looping, soundless animation
            `video` = Video clip
            `audio` = Audio track
          type: string
          enum:
          - image
          - gifv
          - video
          - unknown
          - audio
        url:
          type: string
          description: The location of the original full-size attachment.
          nullable: true
        preview_url:
          type: string
          description: The location of a scaled-down preview of the attachment.
          nullable: true
        remote_url:
          description: The location of the full-size original attachment on the remote
            website.
          type: string
          nullable: true
        preview_remote_url:
          type: string
          nullable: true
        text_url:
          type: string
          nullable: true
          description: A shorter URL for the attachment.
          deprecated: true
        meta:
          type: string
          description: "Metadata returned by Paperclip.\n\nMay contain subtrees small
            and original, as well as various other top-level properties.\n\nMore importantly,
            there may be another topl-level focus Hash object on images as of 2.3.0,
            \nwith coordinates can be used for smart thumbnail cropping - see Focal
            points for cropped media thumbnails for more.\n"
        description:
          type: string
          description: Alternate text that describes what is in the media attachment,
            to be used for the visually impaired or when media attachments do not
            load.
        blurhash:
          type: string
          description: "A hash computed by [the BlurHash algorithm](https://github.com/woltapp/blurhash),
            \nfor generating colorful preview thumbnails when media has not been downloaded
            yet.\n"
      required:
      - id
      - type
    Mention:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        username:
          type: string
        url:
          type: string
          nullable: true
        acct:
          type: string
    Notification:
      type: object
      description: Represents a notification of an event relevant to the user.
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        type:
          type: string
          description: |
            The type of event that resulted in the notification.

            `mention` = Someone mentioned you in their status
            `status` = Someone you enabled notifications for has posted a status
            `reblog` = Someone boosted one of your statuses
            `follow` = Someone followed you
            `follow_request` = Someone requested to follow you
            `favourite` = Someone favourited one of your statuses
            `poll` = A poll you have voted in or created has ended
            `update` = A status you interacted with has been edited
            `admin.sign_up` = Someone signed up (optionally sent to admins)
            `admin.report` = A new report has been filed
          enum:
          - mention
          - status
          - reblog
          - follow
          - follow_request
          - favourite
          - poll
          - update
          - admin.sign_up
          - admin.report
        created_at:
          "$ref": "#/components/schemas/DateTime"
        account:
          description: The account that performed the action that generated the notification.
          "$ref": "#/components/schemas/Account"
        status:
          description: "Status that was the object of the notification.\nAttached
            when type of the notification is \n`favourite`, `reblog`, `status`, `mention`,
            `poll`, or `update`.\n"
          "$ref": "#/components/schemas/Status"
        report:
          description: |
            Report that was the object of the notification.
            Attached when type of the notification is `admin.report`.
          "$ref": "#/components/schemas/Report"
    Tag:
      type: object
      description: Represents a hashtag used within the content of a status.
      properties:
        name:
          description: 'The value of the hashtag after the # sign.

            '
          type: string
        url:
          description: A link to the hashtag on the instance.
          type: string
        following:
          type: boolean
          description: Whether the current token's authorized user is following this
            tag.
          nullable: true
        history:
          description: Usage statistics for given days (typically the past week).
          type: array
          nullable: true
          items:
            type: object
            properties:
              day:
                description: UNIX timestamp on midnight of the given day.
                type: string
              uses:
                type: string
                description: The counted usage of the tag within that day.
              accounts:
                description: The total of accounts using the tag within that day.
                type: string
    FeaturedTag:
      type: object
      description: Represents a hashtag that is featured on a profile.
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        name:
          type: string
          description: The name of the hashtag being featured.
        url:
          type: string
          description: A link to all statuses by a user that contain this hashtag.
        statuses_count:
          type: string
          pattern: "[0-9]+"
          description: The number of authored statuses containing this hashtag.
        last_status_at:
          type: string
          format: date
          nullable: true
          description: The timestamp of the last authored status containing this hashtag.
    Filter:
      type: object
      description: Represents a user-defined filter for determining which statuses
        should not be shown to the user.
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        title:
          type: string
          description: A title given by the user to name the filter.
        context:
          description: |
            The contexts in which the filter should be applied.

            `home` = home timeline and lists
            `notifications` = notifications timeline
            `public` = public timelines
            `thread` = expanded thread of a detailed status
            `account` = when viewing a profile
          type: string
          enum:
          - home
          - notifications
          - public
          - thread
          - account
        expires_at:
          type: string
          description: When the filter should no longer be applied.
        filter_action:
          description: |
            The action to be taken when a status matches this filter.

            `warn` = show a warning that identifies the matching filter by `title`, and allow the user to expand the filtered status. This is the default (and unknown values should be treated as equivalent to `warn`).
            `hide` = do not show this status if it is received
          type: string
          enum:
          - warn
          - hide
        keywords:
          description: The keywords grouped under this filter.
          type: array
          items:
            "$ref": "#/components/schemas/FilterKeyword"
        statuses:
          description: The statuses grouped under this filter.
          type: array
          items:
            "$ref": "#/components/schemas/FilterStatus"
    FilterStatus:
      type: object
      description: Represents a status ID that, if matched, should cause the filter
        action to be taken.
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        status_id:
          "$ref": "#/components/schemas/StringId"
          description: The ID of the filtered Status in the database.
    FilterKeyword:
      type: object
      description: Represents a keyword that, if matched, should cause the filter
        action to be taken.
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        keyword:
          type: string
          description: The phrase to be matched against.
        whole_word:
          type: boolean
          description: |
            Should the filter consider word boundaries?
            See [implementation guidelines for filters](https://docs.joinmastodon.org/api/guidelines/#filters).
    PollVote:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        type:
          type: string
        actor:
          type: string
        to:
          type: string
        object:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
            name:
              type: string
            attributed_to:
              type: string
            in_reply_to:
              type: string
            to:
              type: string
    Poll:
      type: object
      description: Represents a poll attached to a status.
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        expires_at:
          "$ref": "#/components/schemas/DateTime"
        expired:
          type: boolean
          description: Is the poll currently expired?
        multiple:
          type: boolean
          description: Does the poll allow multiple-choice answers?
        votes_count:
          type: string
          description: How many votes have been received.
        voters_count:
          type: integer
          description: How many unique accounts have voted on a multiple-choice poll.
        voted:
          type: boolean
          nullable: true
          description: When called with a user token, has the authorized user voted?
        own_votes:
          description: |
            When called with a user token, which options has the authorized user chosen?

            Contains an array of index values for options.
          type: array
          items:
            "$ref": "#/components/schemas/PollVote"
        emojis:
          type: array
          items:
            "$ref": "#/components/schemas/CustomEmoji"
        options:
          type: object
          description: Possible answers for the poll.
          properties:
            title:
              type: string
              description: The text value of the poll option.
            votes_count:
              description: The total number of received votes for this option.
              type: integer
              nullable: true
      required:
      - id
    Preferences:
      type: object
      description: Represents a user's preferences.
      properties:
        posting:default:visibility:
          description: |
            Default visibility for new posts. Equivalent to CredentialAccount#source[privacy].

            `public` = Public post
            `unlisted` = Unlisted post
            `private` = Followers-only post
            `direct` = Direct post
          type: string
          enum:
          - public
          - unlisted
          - private
          - direct
        posting:default:sensitive:
          type: boolean
          description: Default sensitivity flag for new posts. Equivalent to CredentialAccount#source[sensitive].
        posting:default:language:
          type: string
          nullable: true
          description: "Default language for new posts. \nEquivalent to CredentialAccount#source[language]\n(ISO
            639-1 language two-letter code)\n"
          pattern: "[a-z]{2}"
        reading:expand:media:
          type: string
          description: |
            Whether media attachments should be automatically displayed or blurred/hidden.

            `default` = Hide media marked as sensitive
            `show_all` = Always show all media by default, regardless of sensitivity
            `hide_all` = Always hide all media by default, regardless of sensitivity
          enum:
          - default
          - show_all
          - hide_all
        reading:expand:spoilers:
          type: boolean
          description: 'Whether CWs should be expanded by default.

            '
    PreviewCard:
      type: object
      description: 'Represents a rich preview card that is generated using OpenGraph
        tags from a URL.

        '
      properties:
        url:
          type: string
          description: Location of linked resource.
        title:
          type: string
          description: Title of linked resource.
        description:
          type: string
          description: Description of preview.
        type:
          description: |
            The type of the preview card.
            `link` = Link OEmbed
            `photo` = Photo OEmbed
            `video` = Video OEmbed
            `rich` = iframe OEmbed. Not currently accepted, so won't show up in practice.
          type: string
          enum:
          - link
          - photo
          - video
          - rich
        author_name:
          description: The author of the original resource.
          type: string
        author_url:
          type: string
          description: A link to the author of the original resource.
        provider_name:
          type: string
          description: The provider of the original resource.
        provider_url:
          type: string
          description: A link to the provider of the original resource.
        html:
          type: string
          description: HTML to be used for generating the preview card.
        width:
          description: Width of preview, in pixels.
          anyOf:
          - type: string
            pattern: "[0-9]+"
          - type: integer
        height:
          description: Height of preview, in pixels.
          anyOf:
          - type: string
            pattern: "[0-9]+"
          - type: integer
        image:
          type: string
          nullable: true
          description: Preview thumbnail.
        embed_url:
          type: string
          description: Used for photo embeds, instead of custom `html`.
        blurhash:
          type: string
          nullable: true
          description: |
            A hash computed by [the BlurHash algorithm](https://github.com/woltapp/blurhash),
            for generating colorful preview thumbnails when media has not been downloaded yet.
    TrendHistory:
      type: object
      properties:
        day:
          type: string
          pattern: "[0-9]+"
        accounts:
          type: string
          pattern: "[0-9]+"
        uses:
          type: string
          pattern: "[0-9]+"
    PreviewCardLink:
      allOf:
      - "$ref": "#/components/schemas/PreviewCard"
      - type: object
        properties:
          history:
            type: array
            items:
              "$ref": "#/components/schemas/TrendHistory"
    IdentityProof:
      type: object
      description: Represents a proof from an external identity provider.
      deprecated: true
      properties: {}
    Instance:
      type: object
      description: Represents the software instance of Mastodon running on this domain.
      properties:
        domain:
          description: The domain name of the instance.
          type: string
        title:
          description: The title of the website.
          type: string
        version:
          description: The version of Mastodon installed on the instance.
          type: string
        source_url:
          description: The URL for the source code of the software running on this
            instance, in keeping with AGPL license requirements.
          type: string
        description:
          description: A short, plain-text description defined by the admin.
          type: string
        usage:
          description: Usage data for this instance.
          type: object
          properties:
            users:
              type: object
              description: Usage data related to users on this instance.
              properties:
                active_month:
                  type: integer
                  description: The number of active users in the past 4 weeks.
        thumbnail:
          description: An image used to represent this instance.
          type: object
          properties:
            url:
              type: string
              description: The URL for the thumbnail image.
            blurhash:
              description: |
                A hash computed by [the BlurHash algorithm](https://github.com/woltapp/blurhash),
                for generating colorful preview thumbnails when media has not been downloaded yet.
              type: string
              nullable: true
            versions:
              type: object
              nullable: true
              properties:
                "@1x":
                  type: string
                  description: The URL for the thumbnail image at 1x resolution.
                "@2x":
                  type: string
                  description: The URL for the thumbnail image at 2x resolution.
          required:
          - url
        languages:
          description: Primary languages of the website and its staff.
          type: array
          items:
            type: string
            pattern: "[a-z]{2}"
            description: "(ISO 639-1 two-letter code)"
        configuration:
          description: Configured values and limits for this website.
          type: object
          properties:
            polls:
              type: object
              properties:
                max_options:
                  type: integer
                  description: Each poll is allowed to have up to this many options.
                max_characters_per_option:
                  type: integer
                  description: Each poll option is allowed to have this many characters.
                min_expiration:
                  type: integer
                  description: The shortest allowed poll duration, in seconds.
                max_expiration:
                  type: integer
                  description: The longest allowed poll duration, in seconds.
            translation:
              type: object
              description: Hints related to translation.
              properties:
                enabled:
                  type: boolean
                  description: Whether the Translations API is available on this instance.
            media_attachments:
              type: object
              description: Hints for which attachments will be accepted.
              properties:
                supported_mime_types:
                  type: array
                  description: Contains MIME types that can be uploaded.
                  items:
                    type: string
                image_size_limit:
                  type: integer
                  description: The maximum size of any uploaded image, in bytes.
                image_matrix_limit:
                  type: integer
                  description: The maximum number of pixels (width times height) for
                    image uploads.
                video_size_limit:
                  type: integer
                  description: The maximum size of any uploaded video, in bytes.
                video_frame_rate_limit:
                  type: integer
                  description: The maximum frame rate for any uploaded video.
                video_matrix_limit:
                  type: integer
                  description: The maximum number of pixels (width times height) for
                    video uploads.
            accounts:
              type: object
              description: Limits related to accounts.
              properties:
                max_featured_tags:
                  type: integer
                  description: The maximum number of featured tags allowed for each
                    account.
            statuses:
              type: object
              description: Limits related to authoring statuses.
              properties:
                max_characters:
                  type: integer
                  description: The maximum number of allowed characters per status.
                max_media_attachments:
                  type: integer
                  description: The maximum number of media attachments that can be
                    added to a status.
                characters_reserved_per_url:
                  type: integer
                  description: Each URL in a status will be assumed to be exactly
                    this many characters.
            urls:
              type: object
              description: URLs of interest for clients apps.
              properties:
                streaming_api:
                  type: string
                  description: The Websockets URL for connecting to the streaming
                    API.
        registrations:
          description: Information about registering for this website.
          type: object
          properties:
            enabled:
              type: boolean
              description: Whether registrations are enabled.
            approval_required:
              type: boolean
              description: Whether registrations require moderator approval.
            message:
              type: string
              nullable: true
              description: A custom message to be shown when registrations are closed.
        contact:
          description: Hints related to contacting a representative of the website.
          type: object
          properties:
            email:
              type: string
            account:
              description: An account that can be contacted natively over the network
                regarding inquiries or issues.
              "$ref": "#/components/schemas/Account"
        rules:
          description: An itemized list of rules for this website.
          type: array
          items:
            "$ref": "#/components/schemas/Rule"
    Status:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        in_reply_to_id:
          "$ref": "#/components/schemas/StringId"
          nullable: true
        in_reply_to_account_id:
          "$ref": "#/components/schemas/StringId"
          nullable: true
        created_at:
          "$ref": "#/components/schemas/DateTime"
        edited_at:
          "$ref": "#/components/schemas/DateTime"
          nullable: true
        sensitive:
          type: boolean
        spoiler_text:
          type: string
        visibility:
          type: string
          enum:
          - public
          - unlisted
          - private
          - direct
          - limited
        language:
          type: string
          nullable: true
        uri:
          type: string
          example: 3140471290b4d12608d949fc6550017a0a0d236f6a93d4b36006c69a6a09e7ca
        url:
          type: string
          nullable: true
        text:
          type: string
        content:
          type: string
        replies_count:
          type: integer
        reblogs_count:
          type: integer
        favourites_count:
          type: integer
        favourited:
          type: boolean
        reblogged:
          type: boolean
        muted:
          type: boolean
        bookmarked:
          type: boolean
        pinned:
          type: boolean
        reblog:
          "$ref": "#/components/schemas/Status"
          nullable: true
        account:
          "$ref": "#/components/schemas/Account"
        media_attachments:
          type: array
          items:
            "$ref": "#/components/schemas/MediaAttachment"
        mentions:
          type: array
          items:
            "$ref": "#/components/schemas/Mention"
        tags:
          type: array
          items:
            "$ref": "#/components/schemas/Tag"
        emojis:
          type: array
          items:
            "$ref": "#/components/schemas/CustomEmoji"
        application:
          type: object
          nullable: true
          properties:
            name:
              type: string
            website:
              type: string
        poll:
          nullable: true
          "$ref": "#/components/schemas/Poll"
        card:
          nullable: true
          "$ref": "#/components/schemas/PreviewCard"
      required:
      - id
      - created_at
      - media_attachments
    Report:
      type: object
      description: Reports filed against users and/or statuses, to be taken action
        on by moderators.
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        action_taken:
          type: boolean
        action_taken_at:
          "$ref": "#/components/schemas/DateTime"
          nullable: true
        category:
          description: |
            The generic reason for the report.

            `spam` = Unwanted or repetitive content
            `violation` = A specific rule was violated
            `other` = Some other reason
          type: string
          enum:
          - other
          - spam
          - violation
        comment:
          type: string
        forwarded:
          type: boolean
          description: Whether the report was forwarded to a remote domain.
        created_at:
          type: string
          format: datetime
        status_ids:
          type: array
          items:
            "$ref": "#/components/schemas/StringId"
        rule_ids:
          type: array
          nullable: true
          items:
            "$ref": "#/components/schemas/StringId"
        target_account:
          "$ref": "#/components/schemas/Account"
    List:
      description: Represents a list of some users that the authenticated user follows.
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        title:
          description: The user-defined title of the list.
          type: string
        replies_policy:
          description: |
            `followed` = Show replies to any followed user
            `list` = Show replies to members of the list
            `none` = Show replies to no one
          type: string
          enum:
          - followed
          - list
          - none
    Marker:
      type: object
      description: Represents the last read position within a user's timelines.
      properties:
        last_read_id:
          description: The ID of the most recently viewed entity.
          "$ref": "#/components/schemas/StringId"
        version:
          description: An incrementing counter, used for locking to prevent write
            conflicts.
          type: integer
        updated_at:
          "$ref": "#/components/schemas/DateTime"
    Relationship:
      description: Represents the relationship between accounts, such as following
        / blocking / muting / etc.
      type: object
      properties:
        id:
          description: The account id.
          "$ref": "#/components/schemas/StringId"
        following:
          description: Are you following this user?
          type: boolean
        requested:
          description: Do you have a pending follow request for this user?
          type: boolean
        endorsed:
          description: Are you featuring this user on your profile?
          type: boolean
        muting:
          description: Are you muting this user?
          type: boolean
        muting_notifications:
          description: Are you muting notifications from this user?
          type: boolean
        showing_reblogs:
          description: Are you receiving this user's boosts in your home timeline?
          type: boolean
        notifying:
          description: Have you enabled notifications for this user?
          type: boolean
        languages:
          description: dead attribute defined in REST::RelationshipSerializer
          deprecated: true
          nullable: true
        followed_by:
          description: Are you followed by this user?
          type: boolean
        blocking:
          description: Are you blocking this user?
          type: boolean
        blocked_by:
          description: Is this user blocking you?
          type: boolean
        domain_blocking:
          description: Are you blocking this user's domain?
          type: boolean
        note:
          description: This user's profile bio
          type: string
    Reaction:
      description: Represents an announcement set by an administrator.
      type: object
      properties:
        name:
          description: The emoji used for the reaction. Either a unicode emoji, or
            a custom emoji's shortcode.
          type: string
        count:
          type: integer
          description: The total number of users who have added this reaction.
        me:
          type: boolean
          description: 'If there is a currently authorized user: Have you added this
            reaction?'
        url:
          type: string
          description: 'If the reaction is a custom emoji: A link to the custom emoji.

            '
        static_url:
          description: 'If the reaction is a custom emoji: A link to a non-animated
            version of the custom emoji.

            '
          type: string
    Announcement:
      description: Represents an announcement set by an administrator.
      type: object
      properties:
        id:
          description: The announcement id.
          "$ref": "#/components/schemas/StringId"
        content:
          description: The text of the announcement.
          type: string
        starts_at:
          description: When the announcement will start.
          type: string
          nullable: true
        ends_at:
          description: When the announcement will end.
          type: string
          nullable: true
        published:
          description: Whether the announcement is currently active.
          type: boolean
        all_day:
          description: Whether the announcement should start and end on dates only
            instead of datetimes. Will be false if there is no starts_at or ends_at
            time.
          type: boolean
        published_at:
          description: When the announcement was published.
          "$ref": "#/components/schemas/DateTime"
        updated_at:
          description: When the announcement was last updated.
          "$ref": "#/components/schemas/DateTime"
        read:
          description: Whether the announcement has been read by the user.
          type: boolean
          nullable: true
        mentions:
          description: Accounts mentioned in the announcement text.
          type: array
          items:
            "$ref": "#/components/schemas/Announcement::Account"
        tags:
          description: Tags linked in the announcement text.
          type: array
          items:
            "$ref": "#/components/schemas/Status::Tag"
        statuses:
          description: Statuses linked in the announcement text.
          type: array
          items:
            "$ref": "#/components/schemas/Announcement::Status"
        emojis:
          description: Custom emoji used in the announcement text.
          type: array
          items:
            "$ref": "#/components/schemas/CustomEmoji"
        reactions:
          description: Emoji reactions attached to the announcement.
          type: array
          items:
            "$ref": "#/components/schemas/Reaction"
    Announcement::Account:
      type: object
      properties:
        id:
          description: The account ID of the mentioned user.
          "$ref": "#/components/schemas/StringId"
        username:
          type: string
          description: The username of the mentioned user.
        url:
          type: string
          description: The location of the mentioned user's profile.
        acct:
          description: 'The webfinger acct: URI of the mentioned user. Equivalent
            to username for local users, or `username@domain` for remote users.

            '
          type: string
    Announcement::Status:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        url:
          description: The URL of an attached Status.
          type: string
    Status::Tag:
      type: object
      properties:
        id:
          type: string
          pattern: "[0-9]+"
        url:
          type: string
    ApplicationRequestBody:
      type: object
      properties:
        client_name:
          type: string
          description: A name for your application
        redirect_uris:
          type: string
          description: |
            Where the user should be redirected after authorization.

            To display the authorization code to the user instead of redirecting to a web page,
            use urn:ietf:wg:oauth:2.0:oob in this parameter.
        scopes:
          type: string
          description: Space separated list of scopes. If none is provided, defaults
            to read.
        website:
          type: string
          description: A URL to the homepage of your app
      required:
      - client_name
      - redirect_uris
    Rule:
      description: Represents a rule that server users should follow.
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        text:
          description: The rule to be followed.
          type: string
    ScheduledStatus:
      description: Represents a status that will be published at a future scheduled
        date.
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        scheduled_at:
          "$ref": "#/components/schemas/DateTime"
        params:
          type: object
          description: The parameters to be used when the status is posted.
        media_attachments:
          description: Media that will be attached when the status is posted.
          type: array
          items:
            "$ref": "#/components/schemas/MediaAttachment"
    StatusEdit:
      description: Represents a revision of a status that has been edited.
      type: object
      properties:
        content:
          description: The content of the status at this revision.
          type: string
        spoiler_text:
          description: The content of the subject or content warning at this revision.
          type: string
        sensitive:
          description: Whether the status was marked sensitive at this revision.
          type: boolean
        created_at:
          description: The timestamp of when the revision was published.
          "$ref": "#/components/schemas/DateTime"
        account:
          description: The account that published this revision.
          "$ref": "#/components/schemas/Account"
        poll:
          description: |
            The current state of the poll options at this revision.

            Note that edits changing the poll options will be collapsed together into one edit, since this action resets the poll.
        media_attachments:
          description: |
            The current state of the poll options at this revision.

            Note that edits changing the poll options will be collapsed together into one edit, since this action resets the poll.
          type: array
          items:
            "$ref": "#/components/schemas/MediaAttachment"
        emojis:
          description: Any custom emoji that are used in the current revision.
          type: array
          items:
            "$ref": "#/components/schemas/CustomEmoji"
    StatusSource:
      type: object
      description: Represents a status's source as plain text.
      properties:
        id:
          "$ref": "#/components/schemas/StringId"
        text:
          type: string
          description: The plain text used to compose the status.
        spoiler_text:
          type: string
          description: The plain text used to compose the status's subject or content
            warning.
    Suggestion:
      type: object
      properties:
        source:
          description: |
            The reason this account is being suggested.

            `staff` = This account was manually recommended by your administration team
            `past_interactions` = You have interacted with this account previously
            `global` = This account has many reblogs, favourites, and active local followers within the last 30 days
          type: string
          enum:
          - staff
          - past_interactions
          - global
        account:
          "$ref": "#/components/schemas/Account"
    Token:
      description: Represents an OAuth token used for authenticating with the API
        and performing actions.
      type: object
      properties:
        access_token:
          description: An OAuth token to be used for authorization.
          type: string
        token_type:
          type: string
          description: The OAuth token type. Mastodon uses `Bearer` tokens.
        scope:
          type: string
          description: The OAuth scopes granted by this token, space-separated.
        created_at:
          "$ref": "#/components/schemas/DateTime"
    Search:
      description: Represents the results of a search.
      type: object
      properties:
        accounts:
          description: Accounts which match the given query
          type: array
          items:
            "$ref": "#/components/schemas/Account"
        statuses:
          description: Statuses which match the given query
          type: array
          items:
            "$ref": "#/components/schemas/Status"
        hashtags:
          description: Hashtags which match the given query
          type: array
          items:
            "$ref": "#/components/schemas/Tag"
    boolOrStrBool:
      anyOf:
      - type: boolean
      - type: string
        enum:
        - '1'
        - '0'
        - 'true'
        - 'false'
    StringId:
      type: string
      pattern: "[0-9]+"
      example: '10999'
    DateTime:
      type: string
      format: datetime
      example: '2022-11-13T21:24:59.474Z'
  requestBodies:
    v1AccountsUpdateCredentials:
      required: false
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/AccountUpdateCredentialsParams"
  callbacks: {}
  parameters: {}
  responses: {}
  examples: {}
  headers:
    X-RateLimit-Limit:
      description: Number of requests permitted per time period
      schema:
        type: string
    X-RateLimit-Remaining:
      description: Number of requests you can still make
      schema:
        type: string
    X-RateLimit-Reset:
      description: Timestamp when your rate limit will reset
      schema:
        type: string
  links: {}
paths:
  "/api/v1/accounts/verify_credentials":
    get:
      summary: show credential
      tags:
      - Api
      - V1
      - Accounts
      - Credentials
      operationId: v1AccountsCredentialsShowCredential
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109430029432571681'
                    username: kirby_kertzmann0
                    acct: kirby_kertzmann0
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-30T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@kirby_kertzmann0
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    source:
                      privacy: public
                      sensitive: false
                      language:
                      note: ''
                      fields: []
                      follow_requests_count: 0
                    emojis: []
                    fields: []
                    role:
                      id: "-99"
                      name: ''
                      permissions: '65536'
                      color: ''
                      highlighted: false
              schema:
                type: object
                allOf:
                - "$ref": "#/components/schemas/Account"
                - "$ref": "#/components/schemas/Credential"
  "/api/v1/accounts/update_credentials":
    patch:
      summary: update credential
      tags:
      - Api
      - V1
      - Accounts
      - Credentials
      operationId: v1AccountsCredentialsUpdateCredential
      security:
      - bearerAuth: []
      - oauth:
        - write
        - write:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109430029437361816'
                    username: fermin_rutherford1
                    acct: fermin_rutherford1
                    display_name: Changed
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-30T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@fermin_rutherford1
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    source:
                      privacy: public
                      sensitive: false
                      language:
                      note: ''
                      fields: []
                      follow_requests_count: 0
                    emojis: []
                    fields: []
                    role:
                      id: "-99"
                      name: ''
                      permissions: '65536'
                      color: ''
                      highlighted: false
              schema:
                type: object
                allOf:
                - "$ref": "#/components/schemas/Account"
                - "$ref": "#/components/schemas/Credential"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/requestBodies/v1AccountsUpdateCredentials"
  "/api/v1/accounts/familiar_followers":
    get:
      summary: list familiar_followers
      tags:
      - Api
      - V1
      - Accounts
      - FamiliarFollowers
      operationId: v1AccountsFamiliarfollowersListFamiliarFollower
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:follows
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: id[]
        in: query
        schema:
          type: string
      responses:
        '200':
          description: no familiar follows
          content:
            application/json:
              examples:
                lists_familiar_follows:
                  value:
                  - id: '109430029443120147'
                    accounts:
                    - id: '109430029443120146'
                      username: merissa3
                      acct: merissa3
                      display_name: ''
                      locked: false
                      bot: false
                      discoverable: true
                      group: false
                      created_at: '2022-11-30T00:00:00.000Z'
                      note: ''
                      url: https://cb6e6126.ngrok.io/@merissa3
                      avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      header: https://cb6e6126.ngrok.io/headers/original/missing.png
                      header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                      followers_count: 1
                      following_count: 1
                      statuses_count: 0
                      last_status_at:
                      noindex: false
                      emojis: []
                      fields: []
                no_familiar_follows:
                  value:
                  - id: '109430029449858875'
                    accounts: []
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      pattern: "[0-9]+"
                    accounts:
                      type: array
                      items:
                        "$ref": "#/components/schemas/Account"
  "/api/v1/accounts/{account_id}/featured_tags":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    get:
      summary: list featured_tags
      tags:
      - Api
      - V1
      - Accounts
      - FeaturedTags
      operationId: v1AccountsFeaturedtagsListFeaturedTag
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '2'
                    name: test_featured_tag
                    url: https://cb6e6126.ngrok.io/@roberto_batz8/tagged/test_featured_tag
                    statuses_count: '0'
                    last_status_at:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/FeaturedTag"
  "/api/v1/accounts/{account_id}/followers":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    get:
      summary: list follower_accounts
      tags:
      - Api
      - V1
      - Accounts
      - FollowerAccounts
      operationId: v1AccountsFolloweraccountsListFollowerAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: Maximum number of results to return. Defaults to 40.
        schema:
          type: integer
      - name: max_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109430029460373216'
                    username: jody_anderson12
                    acct: jody_anderson12
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-30T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@jody_anderson12
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 1
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
                  - id: '109430029460373214'
                    username: maisha10
                    acct: maisha10
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-30T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@maisha10
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 1
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Account"
  "/api/v1/accounts/{account_id}/following":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    get:
      summary: list following_accounts
      tags:
      - Api
      - V1
      - Accounts
      - FollowingAccounts
      operationId: v1AccountsFollowingaccountsListFollowingAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: Maximum number of results to return. Defaults to 40.
        schema:
          type: integer
      - name: max_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109430029469496712'
                    username: anissa_nikolaus17
                    acct: anissa_nikolaus17
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-30T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@anissa_nikolaus17
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 1
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
                  - id: '109430029469496711'
                    username: wilson16
                    acct: wilson16
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-30T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@wilson16
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 1
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Account"
  "/api/v1/accounts/{account_id}/identity_proofs":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    get:
      summary: list identity_proofs
      tags:
      - Api
      - V1
      - Accounts
      - IdentityProofs
      operationId: v1AccountsIdentityproofsListIdentityProof
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:account
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
              schema:
                type: array
  "/api/v1/accounts/{account_id}/lists":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    get:
      summary: list lists
      tags:
      - Api
      - V1
      - Accounts
      - Lists
      operationId: v1AccountsListsListList
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:lists
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '2'
                    title: TestList
                    replies_policy: list
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/List"
  "/api/v1/accounts/lookup":
    get:
      summary: show lookup
      tags:
      - Api
      - V1
      - Accounts
      - Lookup
      description: Allows converting a username@domain into a local ID quickly (unlike
        search, it does not resolve anything, and as such, is available without an
        API token)
      operationId: v1AccountsLookupShowLookup
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: acct
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109430029482479106'
                    username: tester
                    acct: tester@nothere.com
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-30T00:00:00.000Z'
                    note: ''
                    url:
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    emojis: []
                    fields: []
              schema:
                "$ref": "#/components/schemas/Account"
  "/api/v1/accounts/{account_id}/note":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    post:
      summary: create note
      tags:
      - Api
      - V1
      - Accounts
      - Notes
      operationId: v1AccountsNotesCreateNote
      security:
      - bearerAuth: []
      - oauth:
        - write
        - write:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109430029487130718'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: testing comment
              schema:
                "$ref": "#/components/schemas/Relationship"
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
  "/api/v1/accounts/{account_id}/pin":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    post:
      summary: create pin
      tags:
      - Api
      - V1
      - Accounts
      - Pins
      operationId: v1AccountsPinsCreatePin
      security:
      - bearerAuth: []
      - oauth:
        - write
        - write:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109430029491870229'
                    following: true
                    showing_reblogs: true
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: true
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{account_id}/unpin":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    post:
      summary: delete pin
      tags:
      - Api
      - V1
      - Accounts
      - Pins
      operationId: v1AccountsPinsDeletePin
      security:
      - bearerAuth: []
      - oauth:
        - write
        - write:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109430029496120225'
                    following: true
                    showing_reblogs: true
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/relationships":
    get:
      summary: list relationships
      tags:
      - Api
      - V1
      - Accounts
      - Relationships
      operationId: v1AccountsRelationshipsListRelationship
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:follows
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: query
        description: account_ids
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109430029500108917'
                    following: true
                    showing_reblogs: true
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/search":
    get:
      summary: show search
      tags:
      - Api
      - V1
      - Accounts
      - Search
      operationId: v1AccountsSearchShowSearch
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: q
        in: query
        required: true
        description: What to search for
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: Maximum number of results. Defaults to 40.
        schema:
          type: integer
      - name: resolve
        in: query
        required: false
        description: Attempt WebFinger lookup. Defaults to false. Use this when q
          is an exact address.
        schema:
          type: string
      - name: following
        in: query
        required: false
        description: Only who the user is following. Defaults to false.
        schema:
          type: boolean
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109430029506792591'
                    username: account3
                    acct: account3
                    display_name: account no3
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-30T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@account3
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Account"
  "/api/v1/accounts/{account_id}/statuses":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    get:
      summary: list statuses
      tags:
      - Api
      - V1
      - Accounts
      - Statuses
      operationId: v1AccountsStatusesListStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:statuses
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109430029512963165'
                    created_at: '2022-11-30T00:55:37.454Z'
                    in_reply_to_id:
                    in_reply_to_account_id:
                    sensitive: false
                    spoiler_text: ''
                    visibility: public
                    language: en
                    uri: 3ba8f11a4654e5ea687eb7c987e25964267a3501e36630db5c9e1a7321d085bb
                    url:
                    replies_count: 0
                    reblogs_count: 0
                    favourites_count: 0
                    edited_at: '2022-11-30T00:55:37.451Z'
                    favourited: false
                    reblogged: false
                    muted: false
                    bookmarked: false
                    content: Lorem ipsum dolor sit amet
                    filtered: []
                    reblog:
                    account:
                      id: '109430029512963968'
                      username: bob
                      acct: bob@example.com
                      display_name: ''
                      locked: false
                      bot: false
                      discoverable: true
                      group: false
                      created_at: '2022-11-30T00:00:00.000Z'
                      note: ''
                      url:
                      avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      header: https://cb6e6126.ngrok.io/headers/original/missing.png
                      header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                      followers_count: 0
                      following_count: 0
                      statuses_count: 2
                      last_status_at: '2022-11-30'
                      emojis: []
                      fields: []
                    media_attachments: []
                    mentions:
                    - id: '109430029512963969'
                      username: jane
                      url:
                      acct: jane@example.com
                    tags: []
                    emojis: []
                    card:
                    poll:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Status"
  "/api/v1/accounts/{id}/follow":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: follow account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsFollowAccount
      description: Follow the given account. Can also be used to update whether to
        show reblogs or enable notifications.
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:follows
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: follow already following
          content:
            application/json:
              examples:
                follow_not_following:
                  value:
                    id: '109430029524761564'
                    following: true
                    showing_reblogs: true
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
                follow_already_following:
                  value:
                    id: '109430029533099781'
                    following: true
                    showing_reblogs: true
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reblogs:
                  type: boolean
                  description: Receive this account's reblogs in home timeline? Defaults
                    to true.
                notify:
                  type: boolean
                  description: Receive notifications when this account posts a status?
                    Defaults to false.
  "/api/v1/accounts/{id}/unfollow":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unfollow account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsUnfollowAccount
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:follows
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: unfollow not following
          content:
            application/json:
              examples:
                unfollow_following:
                  value:
                    id: '109430029536721349'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
                unfollow_not_following:
                  value:
                    id: '109430029540702200'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{id}/remove_from_followers":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: remove_from_followers account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsRemoveFromFollowersAccount
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:follows
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109430029565478497'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{id}/block":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: block account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsBlockAccount
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:blocks
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109430029569672150'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: true
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{id}/unblock":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unblock account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsUnblockAccount
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:blocks
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109430029574859616'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{id}/mute":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: mute account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsMuteAccount
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:mutes
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109430029578390233'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: true
                    muting_notifications: true
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{id}/unmute":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unmute account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsUnmuteAccount
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - write
        - write:mutes
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109430029583624797'
                    following: false
                    showing_reblogs: false
                    notifying: false
                    languages:
                    followed_by: false
                    blocking: false
                    blocked_by: false
                    muting: false
                    muting_notifications: false
                    requested: false
                    domain_blocking: false
                    endorsed: false
                    note: ''
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/accounts/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show account
      tags:
      - Api
      - V1
      - Accounts
      operationId: v1AccountsShowAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '109430029587880417'
                    username: werner_fritsch54
                    acct: werner_fritsch54
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-30T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@werner_fritsch54
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
              schema:
                "$ref": "#/components/schemas/Relationship"
  "/api/v1/admin/accounts/{account_id}/action":
    parameters:
    - name: account_id
      in: path
      description: account_id
      required: true
      schema:
        type: string
    post:
      summary: create account_action
      tags:
      - Api
      - V1
      - Admin
      - AccountActions
      operationId: v1AdminAccountactionsCreateAccountAction
      description: Perform an action against an account and log this action in the
        moderation history.
      security:
      - bearerAuth: []
      - oauth:
        - admin:write
        - admin:write:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: disable successful
          content:
            application/json:
              examples:
                disable_successful:
                  value: {}
              schema:
                type: object
        '403':
          description: not permitted
          content:
            application/json:
              examples:
                not_permitted:
                  value:
                    error: This action is not allowed
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: account not found
          content:
            application/json:
              examples:
                account_not_found:
                  value:
                    error: Record not found
              schema:
                type: object
                properties:
                  error:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  description: 'Type of action to be taken. Enumerable oneOf: none
                    disable silence suspend'
                  type: string
                  enum:
                  - none
                  - disable
                  - silence
                  - suspend
                report_id:
                  type: string
                  description: ID of an associated report that caused this action
                    to be taken
                warning_preset_id:
                  type: string
                  description: ID of a preset warning
                text:
                  type: string
                  description: Additional text for clarification of why this action
                    was taken
                send_email_notification:
                  type: boolean
                  description: Whether an email should be sent to the user with the
                    above information.
              example:
                type: disable
                text: test action
                warning_preset_id: '13'
                report_id: '11'
                send_email_notification: false
        required: true
  "/api/v1/admin/accounts/{id}/enable":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: enable account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsEnableAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/accounts/{id}/unsensitive":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unsensitive account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsUnsensitiveAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/accounts/{id}/unsilence":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unsilence account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsUnsilenceAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/accounts/{id}/unsuspend":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unsuspend account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsUnsuspendAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/accounts/{id}/approve":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: approve account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsApproveAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/accounts/{id}/reject":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: reject account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsRejectAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/accounts":
    get:
      summary: list accounts
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsListAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/accounts/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsShowAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete account
      tags:
      - Api
      - V1
      - Admin
      - Accounts
      operationId: v1AdminAccountsDeleteAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/canonical_email_blocks/test":
    post:
      summary: test canonical_email_block
      tags:
      - Api
      - V1
      - Admin
      - CanonicalEmailBlocks
      operationId: v1AdminCanonicalemailblocksTestCanonicalEmailBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/admin/canonical_email_blocks":
    get:
      summary: list canonical_email_blocks
      tags:
      - Api
      - V1
      - Admin
      - CanonicalEmailBlocks
      operationId: v1AdminCanonicalemailblocksListCanonicalEmailBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
    post:
      summary: create canonical_email_block
      tags:
      - Api
      - V1
      - Admin
      - CanonicalEmailBlocks
      operationId: v1AdminCanonicalemailblocksCreateCanonicalEmailBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/canonical_email_blocks/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show canonical_email_block
      tags:
      - Api
      - V1
      - Admin
      - CanonicalEmailBlocks
      operationId: v1AdminCanonicalemailblocksShowCanonicalEmailBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete canonical_email_block
      tags:
      - Api
      - V1
      - Admin
      - CanonicalEmailBlocks
      operationId: v1AdminCanonicalemailblocksDeleteCanonicalEmailBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/dimensions":
    post:
      summary: create dimension
      tags:
      - Api
      - V1
      - Admin
      - Dimensions
      operationId: v1AdminDimensionsCreateDimension
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/domain_allows":
    get:
      summary: list domain_allows
      tags:
      - Api
      - V1
      - Admin
      - DomainAllows
      operationId: v1AdminDomainallowsListDomainAllow
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
    post:
      summary: create domain_allow
      tags:
      - Api
      - V1
      - Admin
      - DomainAllows
      operationId: v1AdminDomainallowsCreateDomainAllow
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/domain_allows/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show domain_allow
      tags:
      - Api
      - V1
      - Admin
      - DomainAllows
      operationId: v1AdminDomainallowsShowDomainAllow
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete domain_allow
      tags:
      - Api
      - V1
      - Admin
      - DomainAllows
      operationId: v1AdminDomainallowsDeleteDomainAllow
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/domain_blocks":
    get:
      summary: list domain_blocks
      tags:
      - Api
      - V1
      - Admin
      - DomainBlocks
      operationId: v1AdminDomainblocksListDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
    post:
      summary: create domain_block
      tags:
      - Api
      - V1
      - Admin
      - DomainBlocks
      operationId: v1AdminDomainblocksCreateDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/domain_blocks/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show domain_block
      tags:
      - Api
      - V1
      - Admin
      - DomainBlocks
      operationId: v1AdminDomainblocksShowDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update domain_block
      tags:
      - Api
      - V1
      - Admin
      - DomainBlocks
      operationId: v1AdminDomainblocksUpdateDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update domain_block
      tags:
      - Api
      - V1
      - Admin
      - DomainBlocks
      operationId: v1AdminDomainblocksUpdateDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete domain_block
      tags:
      - Api
      - V1
      - Admin
      - DomainBlocks
      operationId: v1AdminDomainblocksDeleteDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/email_domain_blocks":
    get:
      summary: list email_domain_blocks
      tags:
      - Api
      - V1
      - Admin
      - EmailDomainBlocks
      operationId: v1AdminEmaildomainblocksListEmailDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
    post:
      summary: create email_domain_block
      tags:
      - Api
      - V1
      - Admin
      - EmailDomainBlocks
      operationId: v1AdminEmaildomainblocksCreateEmailDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/email_domain_blocks/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show email_domain_block
      tags:
      - Api
      - V1
      - Admin
      - EmailDomainBlocks
      operationId: v1AdminEmaildomainblocksShowEmailDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete email_domain_block
      tags:
      - Api
      - V1
      - Admin
      - EmailDomainBlocks
      operationId: v1AdminEmaildomainblocksDeleteEmailDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/ip_blocks":
    get:
      summary: list ip_blocks
      tags:
      - Api
      - V1
      - Admin
      - IpBlocks
      operationId: v1AdminIpblocksListIpBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
    post:
      summary: create ip_block
      tags:
      - Api
      - V1
      - Admin
      - IpBlocks
      operationId: v1AdminIpblocksCreateIpBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/ip_blocks/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show ip_block
      tags:
      - Api
      - V1
      - Admin
      - IpBlocks
      operationId: v1AdminIpblocksShowIpBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update ip_block
      tags:
      - Api
      - V1
      - Admin
      - IpBlocks
      operationId: v1AdminIpblocksUpdateIpBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update ip_block
      tags:
      - Api
      - V1
      - Admin
      - IpBlocks
      operationId: v1AdminIpblocksUpdateIpBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete ip_block
      tags:
      - Api
      - V1
      - Admin
      - IpBlocks
      operationId: v1AdminIpblocksDeleteIpBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/measures":
    post:
      summary: create measure
      tags:
      - Api
      - V1
      - Admin
      - Measures
      operationId: v1AdminMeasuresCreateMeasure
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/reports/{id}/assign_to_self":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: assign_to_self report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsAssignToSelfReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/reports/{id}/unassign":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unassign report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsUnassignReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/reports/{id}/reopen":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: reopen report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsReopenReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/reports/{id}/resolve":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: resolve report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsResolveReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/reports":
    get:
      summary: list reports
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsListReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/reports/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsShowReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsUpdateReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update report
      tags:
      - Api
      - V1
      - Admin
      - Reports
      operationId: v1AdminReportsUpdateReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/admin/retention":
    post:
      summary: create retention
      tags:
      - Api
      - V1
      - Admin
      - Retention
      operationId: v1AdminRetentionCreateRetention
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v1/admin/trends/links":
    get:
      summary: list links
      tags:
      - Api
      - V1
      - Admin
      - Trends
      - Links
      operationId: v1AdminTrendsLinksListLink
      security:
      - bearerAuth: []
      - oauth:
        - admin:read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: Maximum number of results to return. Defaults to 40.
        schema:
          type: integer
      - name: max_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: offset
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - url: http://roob.net/marylin
                    title: Voluptas id sint voluptates.
                    description: Voluptatem officia nemo. Explicabo doloribus eos.
                      Qui quo ea.
                    type: link
                    author_name: ''
                    author_url: ''
                    provider_name: ''
                    provider_url: ''
                    html: ''
                    width: 400
                    height: 267
                    image: https://cb6e6126.ngrok.io/system/cache/preview_cards/images/000/000/013/original/d96664374ada233c.jpg
                    embed_url: ''
                    blurhash: UDK-USu6.9t3-@K7obn#0:-;%1nOM|-.E2IU
                    history:
                    - day: '1669766400'
                      accounts: '0'
                      uses: '0'
                    - day: '1669680000'
                      accounts: '0'
                      uses: '0'
                    - day: '1669593600'
                      accounts: '0'
                      uses: '0'
                    - day: '1669507200'
                      accounts: '0'
                      uses: '0'
                    - day: '1669420800'
                      accounts: '0'
                      uses: '0'
                    - day: '1669334400'
                      accounts: '0'
                      uses: '0'
                    - day: '1669248000'
                      accounts: '0'
                      uses: '0'
                  - url: http://towne.info/susanna
                    title: Recusandae atque odio eum.
                    description: Eos illo dolorem. Minus exercitationem sunt. Sequi
                      blanditiis nihil.
                    type: link
                    author_name: ''
                    author_url: ''
                    provider_name: ''
                    provider_url: ''
                    html: ''
                    width: 400
                    height: 267
                    image: https://cb6e6126.ngrok.io/system/cache/preview_cards/images/000/000/012/original/17bf90c12dadfab3.jpg
                    embed_url: ''
                    blurhash: UDK-USu6.9t3-@K7obn#0:-;%1nOM|-.E2IU
                    history:
                    - day: '1669766400'
                      accounts: '0'
                      uses: '0'
                    - day: '1669680000'
                      accounts: '0'
                      uses: '0'
                    - day: '1669593600'
                      accounts: '0'
                      uses: '0'
                    - day: '1669507200'
                      accounts: '0'
                      uses: '0'
                    - day: '1669420800'
                      accounts: '0'
                      uses: '0'
                    - day: '1669334400'
                      accounts: '0'
                      uses: '0'
                    - day: '1669248000'
                      accounts: '0'
                      uses: '0'
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PreviewCardLink"
  "/api/v1/admin/trends/statuses":
    get:
      summary: list statuses
      tags:
      - Api
      - V1
      - Admin
      - Trends
      - Statuses
      operationId: v1AdminTrendsStatusesListStatus
      security:
      - bearerAuth: []
      - oauth:
        - admin:read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: Maximum number of results to return. Defaults to 40.
        schema:
          type: integer
      - name: max_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: offset
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109430029774322417'
                    created_at: '2022-11-30T00:55:41.467Z'
                    in_reply_to_id:
                    in_reply_to_account_id:
                    sensitive: false
                    spoiler_text: ''
                    visibility: public
                    language: en
                    uri: https://cb6e6126.ngrok.io/users/dwayne_west106/statuses/109430029774322417
                    url: https://cb6e6126.ngrok.io/@dwayne_west106/109430029774322417
                    replies_count: 0
                    reblogs_count: 0
                    favourites_count: 0
                    edited_at:
                    favourited: false
                    reblogged: false
                    muted: false
                    bookmarked: false
                    content: "<p>Lorem ipsum dolor sit amet</p>"
                    filtered: []
                    reblog:
                    application:
                    account:
                      id: '109430029774340964'
                      username: dwayne_west106
                      acct: dwayne_west106
                      display_name: ''
                      locked: false
                      bot: false
                      discoverable: true
                      group: false
                      created_at: '2022-11-30T00:00:00.000Z'
                      note: ''
                      url: https://cb6e6126.ngrok.io/@dwayne_west106
                      avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      header: https://cb6e6126.ngrok.io/headers/original/missing.png
                      header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                      followers_count: 0
                      following_count: 0
                      statuses_count: 1
                      last_status_at: '2022-11-30'
                      noindex: false
                      emojis: []
                      fields: []
                    media_attachments: []
                    mentions: []
                    tags: []
                    emojis: []
                    card:
                    poll:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Status"
  "/api/v1/admin/trends/tags":
    get:
      summary: list tags
      tags:
      - Api
      - V1
      - Admin
      - Trends
      - Tags
      operationId: v1AdminTrendsTagsListTag
      security:
      - bearerAuth: []
      - oauth:
        - admin:read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: Maximum number of results to return. Defaults to 40.
        schema:
          type: integer
      - name: max_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: offset
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Tag"
  "/api/v1/announcements/{announcement_id}/reactions/{id}":
    parameters:
    - name: announcement_id
      in: path
      description: announcement_id
      required: true
      schema:
        type: string
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    patch:
      summary: update reaction
      tags:
      - Api
      - V1
      - Announcements
      - Reactions
      operationId: v1AnnouncementsReactionsUpdateReaction
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update reaction
      tags:
      - Api
      - V1
      - Announcements
      - Reactions
      operationId: v1AnnouncementsReactionsUpdateReaction
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete reaction
      tags:
      - Api
      - V1
      - Announcements
      - Reactions
      operationId: v1AnnouncementsReactionsDeleteReaction
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/announcements/{id}/dismiss":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: dismiss announcement
      tags:
      - Api
      - V1
      - Announcements
      operationId: v1AnnouncementsDismissAnnouncement
      security:
      - bearerAuth: []
      - oauth:
        - write
        - write:accounts
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
  "/api/v1/announcements":
    get:
      summary: list announcements
      tags:
      - Api
      - V1
      - Announcements
      operationId: v1AnnouncementsListAnnouncement
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '4'
                    content: "<p>Odio unde omnis. Ad molestiae ex.</p>"
                    starts_at:
                    ends_at:
                    all_day: false
                    published_at: '2022-11-30T00:55:41.921Z'
                    updated_at: '2022-11-30T00:55:41.921Z'
                    read: false
                    mentions: []
                    statuses: []
                    tags: []
                    emojis: []
                    reactions: []
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Announcement"
  "/api/v1/apps/verify_credentials":
    get:
      summary: show credential
      tags:
      - Api
      - V1
      - Apps
      - Credentials
      operationId: v1AppsCredentialsShowCredential
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/apps":
    post:
      summary: create app
      tags:
      - Api
      - V1
      - Apps
      operationId: v1AppsCreateApp
      description: Create a new application to obtain OAuth2 credentials.
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '5'
                    name: testclient
                    website:
                    redirect_uri: urn:ietf:wg:oauth:2.0:oob
                    client_id: 37-gMynJKEmgxTo3FI5W-JVBArjxrIMEuqaKzJ_S9MQ
                    client_secret: eU0wh0ok08wDWocUaf-26N92E3i9Zo9vfGHYyXHC6Nw
                    vapid_key: BHpQYY1IGC_yMKWHrffEzKpP3nfFEmURwxQbh7dch-xRHwDFl7aTcOpRBjwq0tCpP9h5AgqgcHLcCDG6YTCciUo=
              schema:
                "$ref": "#/components/schemas/Application"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ApplicationRequestBody"
        required: true
  "/api/v1/blocks":
    get:
      summary: list blocks
      tags:
      - Api
      - V1
      - Blocks
      operationId: v1BlocksListBlock
      description: View your blocks. See also accounts/:id/{block,unblock}
      security:
      - bearerAuth: []
      - oauth:
        - follow
        - read
        - read:blocks
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: Maximum number of results to return. Defaults to 40.
        schema:
          type: integer
      - name: max_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109430029812653464'
                    username: wendell_oberbrunner120
                    acct: wendell_oberbrunner120
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-30T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@wendell_oberbrunner120
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
                  - id: '109430029812653463'
                    username: janine119
                    acct: janine119
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-30T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@janine119
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Account"
  "/api/v1/bookmarks":
    get:
      summary: list bookmarks
      tags:
      - Api
      - V1
      - Bookmarks
      operationId: v1BookmarksListBookmark
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:bookmarks
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: false
        description: Maximum number of results to return. Defaults to 40.
        schema:
          type: integer
      - name: max_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: min_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      - name: since_id
        in: query
        required: false
        description: Internal parameter. Use HTTP Link header for pagination.
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109430029818257682'
                    created_at: '2022-11-30T00:55:42.140Z'
                    in_reply_to_id:
                    in_reply_to_account_id:
                    sensitive: false
                    spoiler_text: ''
                    visibility: public
                    language:
                    uri: https://cb6e6126.ngrok.io/users/denver_green122/statuses/109430029818257682
                    url: https://cb6e6126.ngrok.io/@denver_green122/109430029818257682
                    replies_count: 0
                    reblogs_count: 0
                    favourites_count: 0
                    edited_at:
                    favourited: false
                    reblogged: false
                    muted: false
                    bookmarked: true
                    content: "<p>Lorem ipsum dolor sit amet</p>"
                    filtered: []
                    reblog:
                    application:
                    account:
                      id: '109430029818254309'
                      username: denver_green122
                      acct: denver_green122
                      display_name: ''
                      locked: false
                      bot: false
                      discoverable: true
                      group: false
                      created_at: '2022-11-30T00:00:00.000Z'
                      note: ''
                      url: https://cb6e6126.ngrok.io/@denver_green122
                      avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      header: https://cb6e6126.ngrok.io/headers/original/missing.png
                      header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                      followers_count: 1
                      following_count: 0
                      statuses_count: 1
                      last_status_at: '2022-11-30'
                      noindex: false
                      emojis: []
                      fields: []
                    media_attachments: []
                    mentions: []
                    tags: []
                    emojis: []
                    card:
                    poll:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Status"
  "/api/v1/conversations/{id}/read":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: read conversation
      tags:
      - Api
      - V1
      - Conversations
      operationId: v1ConversationsReadConversation
      security:
      - bearerAuth: []
      - oauth:
        - write
        - write:conversations
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/conversations":
    get:
      summary: list conversations
      tags:
      - Api
      - V1
      - Conversations
      operationId: v1ConversationsListConversation
      security:
      - bearerAuth: []
      - oauth:
        - read
        - read:statuses
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/conversations/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    delete:
      summary: delete conversation
      tags:
      - Api
      - V1
      - Conversations
      operationId: v1ConversationsDeleteConversation
      security:
      - bearerAuth: []
      - oauth:
        - write
        - write:conversations
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/custom_emojis":
    get:
      summary: list custom_emojis
      tags:
      - Api
      - V1
      - CustomEmojis
      operationId: v1CustomemojisListCustomEmoji
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/directory":
    get:
      summary: show directory
      tags:
      - Api
      - V1
      - Directories
      operationId: v1DirectoriesShowDirectory
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - id: '109430029838768903'
                    username: manie_hartmann128
                    acct: manie_hartmann128
                    display_name: ''
                    locked: false
                    bot: false
                    discoverable: true
                    group: false
                    created_at: '2022-11-30T00:00:00.000Z'
                    note: ''
                    url: https://cb6e6126.ngrok.io/@manie_hartmann128
                    avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                    header: https://cb6e6126.ngrok.io/headers/original/missing.png
                    header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                    followers_count: 0
                    following_count: 0
                    statuses_count: 0
                    last_status_at:
                    noindex: false
                    emojis: []
                    fields: []
  "/api/v1/domain_blocks":
    get:
      summary: show domain_block
      tags:
      - Api
      - V1
      - DomainBlocks
      operationId: v1DomainblocksShowDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
    delete:
      summary: delete domain_block
      tags:
      - Api
      - V1
      - DomainBlocks
      operationId: v1DomainblocksDeleteDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
    post:
      summary: create domain_block
      tags:
      - Api
      - V1
      - DomainBlocks
      operationId: v1DomainblocksCreateDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: Domain can''t be blank'
  "/api/v1/emails/confirmations":
    post:
      summary: create confirmation
      tags:
      - Api
      - V1
      - Emails
      - Confirmations
      operationId: v1EmailsConfirmationsCreateConfirmation
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This method is only available while the e-mail is awaiting
                      confirmation
  "/api/v1/endorsements":
    get:
      summary: list endorsements
      tags:
      - Api
      - V1
      - Endorsements
      operationId: v1EndorsementsListEndorsement
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/favourites":
    get:
      summary: list favourites
      tags:
      - Api
      - V1
      - Favourites
      operationId: v1FavouritesListFavourite
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/featured_tags/suggestions":
    get:
      summary: list suggestions
      tags:
      - Api
      - V1
      - FeaturedTags
      - Suggestions
      operationId: v1FeaturedtagsSuggestionsListSuggestion
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/featured_tags":
    get:
      summary: list featured_tags
      tags:
      - Api
      - V1
      - FeaturedTags
      operationId: v1FeaturedtagsListFeaturedTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
    post:
      summary: create featured_tag
      tags:
      - Api
      - V1
      - FeaturedTags
      operationId: v1FeaturedtagsCreateFeaturedTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/featured_tags/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    delete:
      summary: delete featured_tag
      tags:
      - Api
      - V1
      - FeaturedTags
      operationId: v1FeaturedtagsDeleteFeaturedTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/filters":
    get:
      summary: list filters
      tags:
      - Api
      - V1
      - Filters
      operationId: v1FiltersListFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
    post:
      summary: create filter
      tags:
      - Api
      - V1
      - Filters
      operationId: v1FiltersCreateFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: Title can''t be blank, Context can''t
                      be blank, Context None or invalid context supplied'
  "/api/v1/filters/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show filter
      tags:
      - Api
      - V1
      - Filters
      operationId: v1FiltersShowFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update filter
      tags:
      - Api
      - V1
      - Filters
      operationId: v1FiltersUpdateFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update filter
      tags:
      - Api
      - V1
      - Filters
      operationId: v1FiltersUpdateFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete filter
      tags:
      - Api
      - V1
      - Filters
      operationId: v1FiltersDeleteFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/follow_requests/{id}/authorize":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: authorize follow_request
      tags:
      - Api
      - V1
      - FollowRequests
      operationId: v1FollowrequestsAuthorizeFollowRequest
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/follow_requests/{id}/reject":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: reject follow_request
      tags:
      - Api
      - V1
      - FollowRequests
      operationId: v1FollowrequestsRejectFollowRequest
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/follow_requests":
    get:
      summary: list follow_requests
      tags:
      - Api
      - V1
      - FollowRequests
      operationId: v1FollowrequestsListFollowRequest
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/followed_tags":
    get:
      summary: list followed_tags
      tags:
      - Api
      - V1
      - FollowedTags
      operationId: v1FollowedtagsListFollowedTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/instance/activity":
    get:
      summary: show activity
      tags:
      - Api
      - V1
      - Instances
      - Activity
      operationId: v1InstancesActivityShowActivity
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                  - week: '1669769743'
                    statuses: '0'
                    logins: '1'
                    registrations: '0'
                  - week: '1669164943'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1668560143'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1667955343'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1667350543'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1666745743'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1666140943'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1665536143'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1664931343'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1664326543'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1663721743'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
                  - week: '1663116943'
                    statuses: '0'
                    logins: '0'
                    registrations: '0'
  "/api/v1/instance/domain_blocks":
    get:
      summary: list domain_blocks
      tags:
      - Api
      - V1
      - Instances
      - DomainBlocks
      operationId: v1InstancesDomainblocksListDomainBlock
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/instance/extended_description":
    get:
      summary: show extended_description
      tags:
      - Api
      - V1
      - Instances
      - ExtendedDescriptions
      operationId: v1InstancesExtendeddescriptionsShowExtendedDescription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    updated_at:
                    content: ''
  "/api/v1/instance/peers":
    get:
      summary: list peers
      tags:
      - Api
      - V1
      - Instances
      - Peers
      operationId: v1InstancesPeersListPeer
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/instance/privacy_policy":
    get:
      summary: show privacy_policy
      tags:
      - Api
      - V1
      - Instances
      - PrivacyPolicies
      operationId: v1InstancesPrivacypoliciesShowPrivacyPolicy
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    updated_at: '2022-10-07T00:00:00+00:00'
                    content: |
                      <p>This privacy policy describes how cb6e6126.ngrok.io (&quot;cb6e6126.ngrok.io&quot;, &quot;we&quot;, &quot;us&quot;) collects, protects and uses the personally identifiable information you may provide through the cb6e6126.ngrok.io website or its API. The policy also describes the choices available to you regarding our use of your personal information and how you can access and update this information. This policy does not apply to the practices of companies that cb6e6126.ngrok.io does not own or control, or to individuals that cb6e6126.ngrok.io does not employ or manage.</p>

                      <h1>What information do we collect?</h1>

                      <ul>
                      <li><strong>Basic account information</strong>: If you register on this server, you may be asked to enter a username, an e-mail address and a password. You may also enter additional profile information such as a display name and biography, and upload a profile picture and header image. The username, display name, biography, profile picture and header image are always listed publicly.</li>
                      <li><strong>Posts, following and other public information</strong>: The list of people you follow is listed publicly, the same is true for your followers. When you submit a message, the date and time is stored as well as the application you submitted the message from. Messages may contain media attachments, such as pictures and videos. Public and unlisted posts are available publicly. When you feature a post on your profile, that is also publicly available information. Your posts are delivered to your followers, in some cases it means they are delivered to different servers and copies are stored there. When you delete posts, this is likewise delivered to your followers. The action of reblogging or favouriting another post is always public.</li>
                      <li><strong>Direct and followers-only posts</strong>: All posts are stored and processed on the server. Followers-only posts are delivered to your followers and users who are mentioned in them, and direct posts are delivered only to users mentioned in them. In some cases it means they are delivered to different servers and copies are stored there. We make a good faith effort to limit the access to those posts only to authorized persons, but other servers may fail to do so. Therefore it&#39;s important to review servers your followers belong to. You may toggle an option to approve and reject new followers manually in the settings. <strong>Please keep in mind that the operators of the server and any receiving server may view such messages</strong>, and that recipients may screenshot, copy or otherwise re-share them. <strong>Do not share any sensitive information over Mastodon.</strong></li>
                      <li><strong>IPs and other metadata</strong>: When you log in, we record the IP address you log in from, as well as the name of your browser application. All the logged in sessions are available for your review and revocation in the settings. The latest IP address used is stored for up to 12 months. We also may retain server logs which include the IP address of every request to our server.</li>
                      </ul>

                      <h1>What do we use your information for?</h1>

                      <p>Any of the information we collect from you may be used in the following ways:</p>

                      <ul>
                      <li>To provide the core functionality of Mastodon. You can only interact with other people&#39;s content and post your own content when you are logged in. For example, you may follow other people to view their combined posts in your own personalized home timeline.</li>
                      <li>To aid moderation of the community, for example comparing your IP address with other known ones to determine ban evasion or other violations.</li>
                      <li>The email address you provide may be used to send you information, notifications about other people interacting with your content or sending you messages, and to respond to inquiries, and/or other requests or questions.</li>
                      </ul>

                      <h1>How do we protect your information?</h1>

                      <p>We implement a variety of security measures to maintain the safety of your personal information when you enter, submit, or access your personal information. Among other things, your browser session, as well as the traffic between your applications and the API, are secured with SSL, and your password is hashed using a strong one-way algorithm. You may enable two-factor authentication to further secure access to your account.</p>

                      <h1>What is our data retention policy?</h1>

                      <p>We will make a good faith effort to:</p>

                      <ul>
                      <li>Retain server logs containing the IP address of all requests to this server, in so far as such logs are kept, no more than 90 days.</li>
                      <li>Retain the IP addresses associated with registered users no more than 12 months.</li>
                      </ul>

                      <p>You can request and download an archive of your content, including your posts, media attachments, profile picture, and header image.</p>

                      <p>You may irreversibly delete your account at any time.</p>

                      <h1>Do we use cookies?</h1>

                      <p>Yes. Cookies are small files that a site or its service provider transfers to your computer&#39;s hard drive through your Web browser (if you allow). These cookies enable the site to recognize your browser and, if you have a registered account, associate it with your registered account.</p>

                      <p>We use cookies to understand and save your preferences for future visits.</p>

                      <h1>Do we disclose any information to outside parties?</h1>

                      <p>We do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. This does not include trusted third parties who assist us in operating our site, conducting our business, or servicing you, so long as those parties agree to keep this information confidential. We may also release your information when we believe release is appropriate to comply with the law, enforce our site policies, or protect ours or others rights, property, or safety.</p>

                      <p>Your public content may be downloaded by other servers in the network. Your public and followers-only posts are delivered to the servers where your followers reside, and direct messages are delivered to the servers of the recipients, in so far as those followers or recipients reside on a different server than this.</p>

                      <p>When you authorize an application to use your account, depending on the scope of permissions you approve, it may access your public profile information, your following list, your followers, your lists, all your posts, and your favourites. Applications can never access your e-mail address or password.</p>

                      <h1>Site usage by children</h1>

                      <p>If this server is in the EU or the EEA: Our site, products and services are all directed to people who are at least 16 years old. If you are under the age of 16, per the requirements of the GDPR (General Data Protection Regulation) do not use this site.</p>

                      <p>If this server is in the USA: Our site, products and services are all directed to people who are at least 13 years old. If you are under the age of 13, per the requirements of COPPA (Children&#39;s Online Privacy Protection Act) do not use this site.</p>

                      <p>Law requirements can be different if this server is in another jurisdiction.</p>

                      <hr>

                      <p>This document is CC-BY-SA. Originally adapted from the <a href="https://github.com/discourse/discourse">Discourse privacy policy</a>.</p>
  "/api/v1/instance/rules":
    get:
      summary: list rules
      tags:
      - Api
      - V1
      - Instances
      - Rules
      operationId: v1InstancesRulesListRule
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/instance":
    get:
      summary: show instance
      tags:
      - Api
      - V1
      - Instances
      operationId: v1InstancesShowInstance
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    uri: cb6e6126.ngrok.io
                    title: Mastodon
                    short_description: ''
                    description: ''
                    email: ''
                    version: 4.0.2
                    urls:
                      streaming_api: ws://localhost:4000
                    stats:
                      user_count: 1
                      status_count: 0
                      domain_count: 0
                    thumbnail: https://cb6e6126.ngrok.io/packs-test/media/images/preview-6399aebd96ccf025654e2977454f168f.png
                    languages:
                    - en
                    registrations: true
                    approval_required: false
                    invites_enabled: true
                    configuration:
                      accounts:
                        max_featured_tags: 10
                      statuses:
                        max_characters: 500
                        max_media_attachments: 4
                        characters_reserved_per_url: 23
                      media_attachments:
                        supported_mime_types:
                        - image/jpeg
                        - image/png
                        - image/gif
                        - image/heic
                        - image/heif
                        - image/webp
                        - image/avif
                        - video/webm
                        - video/mp4
                        - video/quicktime
                        - video/ogg
                        - audio/wave
                        - audio/wav
                        - audio/x-wav
                        - audio/x-pn-wave
                        - audio/vnd.wave
                        - audio/ogg
                        - audio/vorbis
                        - audio/mpeg
                        - audio/mp3
                        - audio/webm
                        - audio/flac
                        - audio/aac
                        - audio/m4a
                        - audio/x-m4a
                        - audio/mp4
                        - audio/3gpp
                        - video/x-ms-asf
                        image_size_limit: 10485760
                        image_matrix_limit: 16777216
                        video_size_limit: 41943040
                        video_frame_rate_limit: 60
                        video_matrix_limit: 2304000
                      polls:
                        max_options: 4
                        max_characters_per_option: 50
                        min_expiration: 300
                        max_expiration: 2629746
                    contact_account:
                    rules: []
  "/api/v1/lists/{list_id}/accounts":
    parameters:
    - name: list_id
      in: path
      description: list_id
      required: true
      schema:
        type: string
    get:
      summary: show account
      tags:
      - Api
      - V1
      - Lists
      - Accounts
      operationId: v1ListsAccountsShowAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete account
      tags:
      - Api
      - V1
      - Lists
      - Accounts
      operationId: v1ListsAccountsDeleteAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    post:
      summary: create account
      tags:
      - Api
      - V1
      - Lists
      - Accounts
      operationId: v1ListsAccountsCreateAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/lists":
    get:
      summary: list lists
      tags:
      - Api
      - V1
      - Lists
      operationId: v1ListsListList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
    post:
      summary: create list
      tags:
      - Api
      - V1
      - Lists
      operationId: v1ListsCreateList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: Title can''t be blank'
  "/api/v1/lists/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show list
      tags:
      - Api
      - V1
      - Lists
      operationId: v1ListsShowList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update list
      tags:
      - Api
      - V1
      - Lists
      operationId: v1ListsUpdateList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update list
      tags:
      - Api
      - V1
      - Lists
      operationId: v1ListsUpdateList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete list
      tags:
      - Api
      - V1
      - Lists
      operationId: v1ListsDeleteList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/markers":
    get:
      summary: list markers
      tags:
      - Api
      - V1
      - Markers
      operationId: v1MarkersListMarker
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
    post:
      summary: create marker
      tags:
      - Api
      - V1
      - Markers
      operationId: v1MarkersCreateMarker
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
  "/api/v1/media":
    post:
      summary: create medium
      tags:
      - Api
      - V1
      - Media
      operationId: v1MediaCreateMedium
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: File can''t be blank'
  "/api/v1/media/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show medium
      tags:
      - Api
      - V1
      - Media
      operationId: v1MediaShowMedium
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update medium
      tags:
      - Api
      - V1
      - Media
      operationId: v1MediaUpdateMedium
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update medium
      tags:
      - Api
      - V1
      - Media
      operationId: v1MediaUpdateMedium
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/mutes":
    get:
      summary: list mutes
      tags:
      - Api
      - V1
      - Mutes
      operationId: v1MutesListMute
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/notifications/clear":
    post:
      summary: clear notification
      tags:
      - Api
      - V1
      - Notifications
      operationId: v1NotificationsClearNotification
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
  "/api/v1/notifications/{id}/dismiss":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: dismiss notification
      tags:
      - Api
      - V1
      - Notifications
      operationId: v1NotificationsDismissNotification
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/notifications":
    get:
      summary: list notifications
      tags:
      - Api
      - V1
      - Notifications
      operationId: v1NotificationsListNotification
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/notifications/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show notification
      tags:
      - Api
      - V1
      - Notifications
      operationId: v1NotificationsShowNotification
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/polls/{poll_id}/votes":
    parameters:
    - name: poll_id
      in: path
      description: poll_id
      required: true
      schema:
        type: string
    post:
      summary: create vote
      tags:
      - Api
      - V1
      - Polls
      - Votes
      operationId: v1PollsVotesCreateVote
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/polls":
    post:
      summary: create poll
      tags:
      - Api
      - V1
      - Polls
      operationId: v1PollsCreatePoll
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/polls/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show poll
      tags:
      - Api
      - V1
      - Polls
      operationId: v1PollsShowPoll
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/preferences":
    get:
      summary: list preferences
      tags:
      - Api
      - V1
      - Preferences
      operationId: v1PreferencesListPreference
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    posting:default:visibility: public
                    posting:default:sensitive: false
                    posting:default:language: en
                    reading:expand:media: default
                    reading:expand:spoilers: false
  "/api/v1/push/subscription":
    get:
      summary: show subscription
      tags:
      - Api
      - V1
      - Push
      - Subscriptions
      operationId: v1PushSubscriptionsShowSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Not Found
    patch:
      summary: update subscription
      tags:
      - Api
      - V1
      - Push
      - Subscriptions
      operationId: v1PushSubscriptionsUpdateSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Not Found
    put:
      summary: update subscription
      tags:
      - Api
      - V1
      - Push
      - Subscriptions
      operationId: v1PushSubscriptionsUpdateSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Not Found
    delete:
      summary: delete subscription
      tags:
      - Api
      - V1
      - Push
      - Subscriptions
      operationId: v1PushSubscriptionsDeleteSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
    post:
      summary: create subscription
      tags:
      - Api
      - V1
      - Push
      - Subscriptions
      operationId: v1PushSubscriptionsCreateSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: |-
                      param is missing or the value is empty: subscription
                      Did you mean?  subscription
                                     action
                                     controller
  "/api/v1/reports":
    post:
      summary: create report
      tags:
      - Api
      - V1
      - Reports
      operationId: v1ReportsCreateReport
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '2'
                    action_taken: false
                    action_taken_at:
                    category: other
                    comment: reasons
                    forwarded: false
                    created_at: '2022-11-30T00:55:44.681Z'
                    status_ids:
                    - '109430029982710165'
                    rule_ids:
                    target_account:
                      id: '109430029982718011'
                      username: pok185
                      acct: pok185
                      display_name: ''
                      locked: false
                      bot: false
                      discoverable: true
                      group: false
                      created_at: '2022-11-30T00:00:00.000Z'
                      note: ''
                      url: https://cb6e6126.ngrok.io/@pok185
                      avatar: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      avatar_static: https://cb6e6126.ngrok.io/avatars/original/missing.png
                      header: https://cb6e6126.ngrok.io/headers/original/missing.png
                      header_static: https://cb6e6126.ngrok.io/headers/original/missing.png
                      followers_count: 0
                      following_count: 0
                      statuses_count: 1
                      last_status_at: '2022-11-30'
                      noindex: false
                      emojis: []
                      fields: []
              schema:
                type: object
                "$ref": "#/components/schemas/Report"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status_ids:
                  type: array
                  items:
                    type: integer
                account_id:
                  type: integer
                comment:
                  type: string
                category:
                  type: string
                  nullable: true
                rule_ids:
                  type: array
                  items:
                    type: string
                  nullable: true
                forward:
                  type: boolean
                  nullable: true
              required:
              - status_ids
              - account_id
  "/api/v1/scheduled_statuses":
    get:
      summary: list scheduled_statuses
      tags:
      - Api
      - V1
      - ScheduledStatuses
      operationId: v1ScheduledstatusesListScheduledStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/scheduled_statuses/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show scheduled_status
      tags:
      - Api
      - V1
      - ScheduledStatuses
      operationId: v1ScheduledstatusesShowScheduledStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update scheduled_status
      tags:
      - Api
      - V1
      - ScheduledStatuses
      operationId: v1ScheduledstatusesUpdateScheduledStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update scheduled_status
      tags:
      - Api
      - V1
      - ScheduledStatuses
      operationId: v1ScheduledstatusesUpdateScheduledStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete scheduled_status
      tags:
      - Api
      - V1
      - ScheduledStatuses
      operationId: v1ScheduledstatusesDeleteScheduledStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/bookmark":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: create bookmark
      tags:
      - Api
      - V1
      - Statuses
      - Bookmarks
      operationId: v1StatusesBookmarksCreateBookmark
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/unbookmark":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: delete bookmark
      tags:
      - Api
      - V1
      - Statuses
      - Bookmarks
      operationId: v1StatusesBookmarksDeleteBookmark
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/favourited_by":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    get:
      summary: list favourited_by_accounts
      tags:
      - Api
      - V1
      - Statuses
      - FavouritedByAccounts
      operationId: v1StatusesFavouritedbyaccountsListFavouritedByAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/favourite":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: create favourite
      tags:
      - Api
      - V1
      - Statuses
      - Favourites
      operationId: v1StatusesFavouritesCreateFavourite
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/unfavourite":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: delete favourite
      tags:
      - Api
      - V1
      - Statuses
      - Favourites
      operationId: v1StatusesFavouritesDeleteFavourite
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/history":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    get:
      summary: show history
      tags:
      - Api
      - V1
      - Statuses
      - Histories
      operationId: v1StatusesHistoriesShowHistory
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/mute":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: create mute
      tags:
      - Api
      - V1
      - Statuses
      - Mutes
      operationId: v1StatusesMutesCreateMute
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/unmute":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: delete mute
      tags:
      - Api
      - V1
      - Statuses
      - Mutes
      operationId: v1StatusesMutesDeleteMute
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/pin":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: create pin
      tags:
      - Api
      - V1
      - Statuses
      - Pins
      operationId: v1StatusesPinsCreatePin
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/unpin":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: delete pin
      tags:
      - Api
      - V1
      - Statuses
      - Pins
      operationId: v1StatusesPinsDeletePin
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/reblogged_by":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    get:
      summary: list reblogged_by_accounts
      tags:
      - Api
      - V1
      - Statuses
      - RebloggedByAccounts
      operationId: v1StatusesRebloggedbyaccountsListRebloggedByAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/reblog":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: create reblog
      tags:
      - Api
      - V1
      - Statuses
      - Reblogs
      operationId: v1StatusesReblogsCreateReblog
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/unreblog":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: delete reblog
      tags:
      - Api
      - V1
      - Statuses
      - Reblogs
      operationId: v1StatusesReblogsDeleteReblog
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/source":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    get:
      summary: show source
      tags:
      - Api
      - V1
      - Statuses
      - Sources
      operationId: v1StatusesSourcesShowSource
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{status_id}/translate":
    parameters:
    - name: status_id
      in: path
      description: status_id
      required: true
      schema:
        type: string
    post:
      summary: create translation
      tags:
      - Api
      - V1
      - Statuses
      - Translations
      operationId: v1StatusesTranslationsCreateTranslation
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses/{id}/context":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: context status
      tags:
      - Api
      - V1
      - Statuses
      operationId: v1StatusesContextStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/statuses":
    post:
      summary: create status
      tags:
      - Api
      - V1
      - Statuses
      operationId: v1StatusesCreateStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: Text can''t be blank'
  "/api/v1/statuses/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show status
      tags:
      - Api
      - V1
      - Statuses
      operationId: v1StatusesShowStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update status
      tags:
      - Api
      - V1
      - Statuses
      operationId: v1StatusesUpdateStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update status
      tags:
      - Api
      - V1
      - Statuses
      operationId: v1StatusesUpdateStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete status
      tags:
      - Api
      - V1
      - Statuses
      operationId: v1StatusesDeleteStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/streaming":
    get:
      summary: list streamings
      tags:
      - Api
      - V1
      - Streaming
      operationId: v1StreamingListStreaming
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/suggestions":
    get:
      summary: list suggestions
      tags:
      - Api
      - V1
      - Suggestions
      operationId: v1SuggestionsListSuggestion
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/suggestions/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    delete:
      summary: delete suggestion
      tags:
      - Api
      - V1
      - Suggestions
      operationId: v1SuggestionsDeleteSuggestion
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
  "/api/v1/tags/{id}/follow":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: follow tag
      tags:
      - Api
      - V1
      - Tags
      operationId: v1TagsFollowTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Not Found
  "/api/v1/tags/{id}/unfollow":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    post:
      summary: unfollow tag
      tags:
      - Api
      - V1
      - Tags
      operationId: v1TagsUnfollowTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Not Found
  "/api/v1/tags/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show tag
      tags:
      - Api
      - V1
      - Tags
      operationId: v1TagsShowTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Not Found
  "/api/v1/timelines/home":
    get:
      summary: show home
      tags:
      - Api
      - V1
      - Timelines
      - Home
      operationId: v1TimelinesHomeShowHome
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/timelines/list/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show list
      tags:
      - Api
      - V1
      - Timelines
      - List
      operationId: v1TimelinesListShowList
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v1/timelines/public":
    get:
      summary: show public
      tags:
      - Api
      - V1
      - Timelines
      - Public
      operationId: v1TimelinesPublicShowPublic
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/timelines/tag/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show tag
      tags:
      - Api
      - V1
      - Timelines
      - Tag
      operationId: v1TimelinesTagShowTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/trends/links":
    get:
      summary: list links
      tags:
      - Api
      - V1
      - Trends
      - Links
      operationId: v1TrendsLinksListLink
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/trends/statuses":
    get:
      summary: list statuses
      tags:
      - Api
      - V1
      - Trends
      - Statuses
      operationId: v1TrendsStatusesListStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/trends":
    get:
      summary: list tags
      tags:
      - Api
      - V1
      - Trends
      - Tags
      operationId: v1TrendsTagsListTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v1/trends/tags":
    get:
      summary: list tags
      tags:
      - Api
      - V1
      - Trends
      - Tags
      operationId: v1TrendsTagsListTag
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/v2/admin/accounts":
    get:
      summary: list accounts
      tags:
      - Api
      - V2
      - Admin
      - Accounts
      operationId: v2AdminAccountsListAccount
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: This action is not allowed
  "/api/v2/filters/{filter_id}/keywords":
    parameters:
    - name: filter_id
      in: path
      description: filter_id
      required: true
      schema:
        type: string
    get:
      summary: list keywords
      tags:
      - Api
      - V2
      - Filters
      - Keywords
      operationId: v2FiltersKeywordsListKeyword
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    post:
      summary: create keyword
      tags:
      - Api
      - V2
      - Filters
      - Keywords
      operationId: v2FiltersKeywordsCreateKeyword
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v2/filters/keywords/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show keyword
      tags:
      - Api
      - V2
      - Filters
      - Keywords
      operationId: v2FiltersKeywordsShowKeyword
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update keyword
      tags:
      - Api
      - V2
      - Filters
      - Keywords
      operationId: v2FiltersKeywordsUpdateKeyword
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update keyword
      tags:
      - Api
      - V2
      - Filters
      - Keywords
      operationId: v2FiltersKeywordsUpdateKeyword
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete keyword
      tags:
      - Api
      - V2
      - Filters
      - Keywords
      operationId: v2FiltersKeywordsDeleteKeyword
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v2/filters/{filter_id}/statuses":
    parameters:
    - name: filter_id
      in: path
      description: filter_id
      required: true
      schema:
        type: string
    get:
      summary: list statuses
      tags:
      - Api
      - V2
      - Filters
      - Statuses
      operationId: v2FiltersStatusesListStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    post:
      summary: create status
      tags:
      - Api
      - V2
      - Filters
      - Statuses
      operationId: v2FiltersStatusesCreateStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v2/filters/statuses/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show status
      tags:
      - Api
      - V2
      - Filters
      - Statuses
      operationId: v2FiltersStatusesShowStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete status
      tags:
      - Api
      - V2
      - Filters
      - Statuses
      operationId: v2FiltersStatusesDeleteStatus
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v2/filters":
    get:
      summary: list filters
      tags:
      - Api
      - V2
      - Filters
      operationId: v2FiltersListFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
    post:
      summary: create filter
      tags:
      - Api
      - V2
      - Filters
      operationId: v2FiltersCreateFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: Title can''t be blank, Context can''t
                      be blank, Context None or invalid context supplied'
  "/api/v2/filters/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show filter
      tags:
      - Api
      - V2
      - Filters
      operationId: v2FiltersShowFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    patch:
      summary: update filter
      tags:
      - Api
      - V2
      - Filters
      operationId: v2FiltersUpdateFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    put:
      summary: update filter
      tags:
      - Api
      - V2
      - Filters
      operationId: v2FiltersUpdateFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
    delete:
      summary: delete filter
      tags:
      - Api
      - V2
      - Filters
      operationId: v2FiltersDeleteFilter
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/v2/instance":
    get:
      summary: show instance
      tags:
      - Api
      - V2
      - Instances
      operationId: v2InstancesShowInstance
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    domain: cb6e6126.ngrok.io
                    title: Mastodon
                    version: 4.0.2
                    source_url: https://github.com/mastodon/mastodon
                    description: ''
                    usage:
                      users:
                        active_month: 0
                    thumbnail:
                      url: https://cb6e6126.ngrok.io/packs-test/media/images/preview-6399aebd96ccf025654e2977454f168f.png
                    languages:
                    - en
                    configuration:
                      urls:
                        streaming: ws://localhost:4000
                      accounts:
                        max_featured_tags: 10
                      statuses:
                        max_characters: 500
                        max_media_attachments: 4
                        characters_reserved_per_url: 23
                      media_attachments:
                        supported_mime_types:
                        - image/jpeg
                        - image/png
                        - image/gif
                        - image/heic
                        - image/heif
                        - image/webp
                        - image/avif
                        - video/webm
                        - video/mp4
                        - video/quicktime
                        - video/ogg
                        - audio/wave
                        - audio/wav
                        - audio/x-wav
                        - audio/x-pn-wave
                        - audio/vnd.wave
                        - audio/ogg
                        - audio/vorbis
                        - audio/mpeg
                        - audio/mp3
                        - audio/webm
                        - audio/flac
                        - audio/aac
                        - audio/m4a
                        - audio/x-m4a
                        - audio/mp4
                        - audio/3gpp
                        - video/x-ms-asf
                        image_size_limit: 10485760
                        image_matrix_limit: 16777216
                        video_size_limit: 41943040
                        video_frame_rate_limit: 60
                        video_matrix_limit: 2304000
                      polls:
                        max_options: 4
                        max_characters_per_option: 50
                        min_expiration: 300
                        max_expiration: 2629746
                      translation:
                        enabled: false
                    registrations:
                      enabled: true
                      approval_required: false
                      message:
                    contact:
                      email: ''
                      account:
                    rules: []
  "/api/v2/media":
    post:
      summary: create medium
      tags:
      - Api
      - V2
      - Media
      operationId: v2MediaCreateMedium
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: 'Validation failed: File can''t be blank'
  "/api/v2/search":
    get:
      summary: list searches
      tags:
      - Api
      - V2
      - Search
      operationId: v2SearchListSearch
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: |-
                      param is missing or the value is empty: q
                      Did you mean?  search
                                     action
                                     controller
  "/api/v2/suggestions":
    get:
      summary: list suggestions
      tags:
      - Api
      - V2
      - Suggestions
      operationId: v2SuggestionsListSuggestion
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: []
  "/api/web/embed":
    post:
      summary: create embed
      tags:
      - Api
      - Web
      - Embeds
      operationId: webEmbedsCreateEmbed
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/web/push_subscriptions/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    put:
      summary: update push_subscription
      tags:
      - Api
      - Web
      - PushSubscriptions
      operationId: webPushsubscriptionsUpdatePushSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    error: Record not found
  "/api/web/push_subscriptions":
    post:
      summary: create push_subscription
      tags:
      - Api
      - Web
      - PushSubscriptions
      operationId: webPushsubscriptionsCreatePushSubscription
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/web/settings":
    patch:
      summary: update setting
      tags:
      - Api
      - Web
      - Settings
      operationId: webSettingsUpdateSetting
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
    put:
      summary: update setting
      tags:
      - Api
      - Web
      - Settings
      operationId: webSettingsUpdateSetting
      security:
      - bearerAuth: []
      - oauth:
        - read
      parameters:
      - name: authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value: {}
